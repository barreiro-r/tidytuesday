[
  {
    "objectID": "posts/2025-05-27/notebook.html",
    "href": "posts/2025-05-27/notebook.html",
    "title": "Dungeons and Dragons Monsters (2024)",
    "section": "",
    "text": "This week we’re exploring monsters from the Dungeons & Dragons System Reference Document! After the popularity of our Dungeons and Dragons Spells (2024), we thought it might be fun to explore the freely available monsters from the 2024 update.\n\nEvery monster is a font of adventure. In this bestiary of Dungeons & Dragons monsters, you’ll discover the weird, the whimsical, the majestic, and the macabre. Choose your favorites, and make them part of your D&D play."
  },
  {
    "objectID": "posts/2025-05-27/notebook.html#about-the-data",
    "href": "posts/2025-05-27/notebook.html#about-the-data",
    "title": "Dungeons and Dragons Monsters (2024)",
    "section": "",
    "text": "This week we’re exploring monsters from the Dungeons & Dragons System Reference Document! After the popularity of our Dungeons and Dragons Spells (2024), we thought it might be fun to explore the freely available monsters from the 2024 update.\n\nEvery monster is a font of adventure. In this bestiary of Dungeons & Dragons monsters, you’ll discover the weird, the whimsical, the majestic, and the macabre. Choose your favorites, and make them part of your D&D play."
  },
  {
    "objectID": "posts/2025-05-27/notebook.html#initializing",
    "href": "posts/2025-05-27/notebook.html#initializing",
    "title": "Dungeons and Dragons Monsters (2024)",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(scales)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(shadowtext)\n\nfont_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 400, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n1.2 Set theme\n\ntheme_set(\n    theme_minimal() +\n    theme(\n    # axis.line.x.bottom = element_line(color = '#474747', linewidth = .3),\n    # axis.ticks.x= element_line(color = '#474747', linewidth = .3),\n    # axis.line.y.left = element_line(color = '#474747', linewidth = .3),\n    # axis.ticks.y= element_line(color = '#474747', linewidth = .3),\n    # # panel.grid = element_line(linewidth = .3, color = 'grey90'),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.ticks.length = unit(-0.15, \"cm\"),\n    plot.background = element_blank(),\n    plot.title.position = \"plot\",\n    plot.title = element_text(family = \"Ubuntu\", size = 18, face = 'bold'),\n    plot.caption = element_text(size = 8, color = 'grey60',margin = margin(20,0,0,0)),\n    plot.subtitle = element_text(size = 9,lineheight = 1.15, margin = margin(5,0,15,0)),\n    axis.title.x = element_markdown(family = \"Ubuntu\", hjust = .5, size = 8, color = \"grey40\"),\n    axis.title.y = element_markdown(family = \"Ubuntu\", hjust = .5, size = 8, color = \"grey40\"),\n    axis.text = element_text(family = \"Ubuntu\", hjust = .5, size = 8, color = \"grey40\"),\n    legend.position = \"top\",\n    text = element_text(family = \"Ubuntu\"),\n    plot.margin = margin(25, 25, 25, 25))\n)\n\n\n\n1.3 Load this week’s data\n\ntuesdata &lt;- tidytuesdayR::tt_load(2025, week = 21)\nmonsters &lt;- tuesdata$monsters"
  },
  {
    "objectID": "posts/2025-05-27/notebook.html#data-analysis",
    "href": "posts/2025-05-27/notebook.html#data-analysis",
    "title": "Dungeons and Dragons Monsters (2024)",
    "section": "2 Data analysis",
    "text": "2 Data analysis\nHow many types are there?\n\nmonsters |&gt; count(type)\n\n# A tibble: 16 × 2\n   type                     n\n   &lt;chr&gt;                &lt;int&gt;\n 1 Aberration               9\n 2 Beast                   84\n 3 Celestial               13\n 4 Construct               10\n 5 Dragon                  45\n 6 Elemental               17\n 7 Fey                     15\n 8 Fiend                   29\n 9 Giant                   10\n10 Humanoid                26\n11 Monstrosity             37\n12 Ooze                     4\n13 Plant                    6\n14 Swarm of Tiny Beasts     6\n15 Swarm of Tiny Undead     1\n16 Undead                  18\n\n\nHow many alignment are there?\n\nmonsters |&gt; count(alignment) \n\n# A tibble: 10 × 2\n   alignment           n\n   &lt;chr&gt;           &lt;int&gt;\n 1 Chaotic Evil       45\n 2 Chaotic Good       11\n 3 Chaotic Neutral     7\n 4 Lawful Evil        35\n 5 Lawful Good        20\n 6 Lawful Neutral      3\n 7 Neutral            50\n 8 Neutral Evil       28\n 9 Neutral Good        6\n10 Unaligned         125"
  },
  {
    "objectID": "posts/2025-05-27/notebook.html#transform-data-for-plotting",
    "href": "posts/2025-05-27/notebook.html#transform-data-for-plotting",
    "title": "Dungeons and Dragons Monsters (2024)",
    "section": "3 Transform Data for Plotting",
    "text": "3 Transform Data for Plotting\n\n3.1 Mean Stats by Type\nAnd filter low count (&lt;10) types\n\ndata2plot &lt;- \n  monsters |&gt;\n  select(alignment, type, str, dex, con, int, wis, cha) |&gt;\n  filter(alignment != \"Unaligned\") |&gt;\n  mutate(\n    alignment = if_else(\n      alignment == 'Neutral',\n      true = 'Neutral Neutral',\n      false = alignment\n    )\n  ) |&gt;\n  group_by(type) |&gt;\n  filter(n() &gt; 10) |&gt;\n  summarize(across(where(is.numeric), mean, na.rm = TRUE)) |&gt;\n  ungroup()\n\n\n\n3.2 Transform axis\nThank you Gemini\n\n# Function to calculate (x,y) coordinates for radar chart axes\n# for a single set of data values (e.g., one row from your summary)\ncalculate_radar_coordinates &lt;- function(scaled_data_values) {\n  # scaled_data_values: A numeric vector of already scaled values,\n  # one for each axis. The length of this vector determines N.\n\n  N &lt;- length(scaled_data_values)\n  if (N &lt; 1) {\n    stop(\"scaled_data_values must have at least one value.\")\n  }\n\n  # Calculate angles for each axis (starting upwards, clockwise)\n  # Angles are in radians\n  angles &lt;- pi / 2 - ((0:(N - 1)) * (2 * pi / N))\n  # (0:(N-1)) is used because R is 1-indexed, but it's often easier\n  # to think of the first axis as index 0 for angle calculation.\n  # (j-1) in the formula becomes 0 for the first axis, 1 for the second, etc.\n\n  # Calculate Cartesian coordinates\n  x_coords &lt;- scaled_data_values * cos(angles)\n  y_coords &lt;- scaled_data_values * sin(angles)\n\n  # Return as a data frame or list\n  return(data.frame(\n    axis_index = 1:N,\n    angle_rad = angles,\n    angle_deg = angles * 180 / pi, # For easier understanding\n    scaled_radius = scaled_data_values,\n    x = x_coords,\n    y = y_coords\n  ))\n}\n\ndata2plot2 &lt;-\n  data2plot |&gt;\n  rowwise() |&gt;\n  mutate(\n    radar_coords = list(calculate_radar_coordinates(c_across(where(\n      is.numeric\n    ))))\n  ) |&gt;\n  ungroup() |&gt;\n  unnest(radar_coords) |&gt;\n  mutate(\n    attr = case_when(\n      axis_index == 1 ~ 'str',\n      axis_index == 2 ~ 'dex',\n      axis_index == 3 ~ 'con',\n      axis_index == 4 ~ 'int',\n      axis_index == 5 ~ 'wis',\n      axis_index == 6 ~ 'cha',\n    )\n  ) |&gt;\n  select(-c(str, dex, con, int, wis, cha)) |&gt;\n  mutate(x = round(x, digits = 3)) |&gt;\n  mutate(y = round(y, digits = 3)) |&gt;\n  left_join(\n    data2plot |&gt;\n      pivot_longer(cols = -type, names_to = 'attr', values_to = 'original'),\n    by = c('type','attr')\n  ) # Add back original value\n# separate(col = alignment, into = c('chaotic_lawful', 'good_evil'), sep = ' ', remove = FALSE) |&gt;\n# mutate(chaotic_lawful = factor(chaotic_lawful, levels = c(\"Chaotic\",\"Neutral\",\"Lawful\"))) |&gt;\n# mutate(good_evil = factor(good_evil, levels = c(\"Evil\",\"Neutral\",\"Good\")))"
  },
  {
    "objectID": "posts/2025-05-27/notebook.html#time-to-plot",
    "href": "posts/2025-05-27/notebook.html#time-to-plot",
    "title": "Dungeons and Dragons Monsters (2024)",
    "section": "4 Time to plot!",
    "text": "4 Time to plot!\n\n4.1 Before\n\ndata2plot2 |&gt;\n  group_by(attr) |&gt;\n  mutate(original_scaled = scale(original)) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(x = x, y = y)) +\n  geom_polygon(\n    aes(group = type),\n    fill = \"#aebae0\",\n    color = '#aebae0',\n    alpha = .1\n  ) +\n  geom_point(color = '#aebae0', size = 3) +\n  geom_point(aes(color = original_scaled), size = 2) +\n  facet_wrap(~type, ncol = 4) +\n  theme_gray() +\n  coord_fixed(ratio = 1, expand = TRUE) +\n  scale_y_continuous(expand = c(0, 5, 0, 5)) +\n  scale_x_continuous(expand = c(0, 5, 0, 5)) +\n  labs(\n    title = 'Well, at least Dragons are clumsy',\n    subtitle = str_wrap('Stats distribuition for each monster type. Each point indicate scaled values for each stats. Darkblue being the high (above mean) stats and orange low (below the mean) stats.', width = 80),\n    caption = 'Tidytuesday 2025-05-27'\n  )\n\n\n\n\n\n\n\n\n\n\n4.2 After\n\n# Create my own axis (crying)\ncircle_data &lt;- tibble(\n  x_center = c(0, 0, 0, 0),\n  y_center = c(0, 0, 0, 0),\n  radius = c(5, 10, 15, 20)\n)\n\n\ndata2plot2 |&gt;\n  group_by(attr) |&gt;\n  mutate(original_scaled = scale(original)) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(x = x, y = y)) +\n  geom_polygon(\n    aes(group = type),\n    fill = \"#aebae0\",\n    color = '#aebae0',\n    alpha = .2\n  ) +\n  ggforce::geom_circle(\n    aes(x0 = x_center, y0 = y_center, r = radius),\n    data = circle_data,\n    fill = \"transparent\",\n    color = '#ced5ea',\n    linewidth = .25,\n    inherit.aes = FALSE\n  ) +\n  shadowtext::geom_shadowtext(\n    data = subset(data2plot2 |&gt; distinct(type)),\n    aes(label = type),\n    x = 0,\n    y = 0,\n    family = 'Ubuntu',\n    bg.color = \"white\", # Border\n    bg.r = 0.2,\n    color = '#47506e',\n    size = 3\n  ) +\n  geom_point(color = '#aebae0', size = 3) +\n  geom_point(aes(color = original_scaled), size = 2) +\n  geom_text(\n    data = data2plot2 |&gt; mutate(y = if_else(y &gt; 0, y + 4, y - 4)),\n    aes(label = attr),\n    family = \"Ubuntu\",\n    size = 2.5,    \n    color = \"#aebae0\"\n  ) +\n  facet_wrap(~type, ncol = 4) +\n  theme_void() +\n  coord_fixed(ratio = 1, expand = TRUE) +\n  scale_y_continuous(expand = c(0, 5, 0, 5)) +\n  scale_x_continuous(expand = c(0, 5, 0, 5)) +\n  scale_color_gradientn(colours = MetBrewer::MetPalettes$Hiroshige[[1]]) +\n  theme(\n    strip.background = element_blank(),\n    strip.text = element_blank(),\n    text = element_text(family = \"Ubuntu\"),\n    plot.title.position = \"plot\",\n    plot.title = element_text(family = \"Ubuntu\", size = 14, face = 'bold'),\n    plot.caption = element_text(\n      size = 8,\n      color = 'grey60',\n      margin = margin(20, 0, 0, 0)\n    ),\n    plot.subtitle = element_text(\n      size = 9,\n      lineheight = 1.15,\n      margin = margin(5, 0, 15, 0)\n    )\n  ) +\n  guides(color = 'none', fill = 'none') +\n  labs(\n    title = 'Well, at least Dragons are clumsy',\n    subtitle = str_wrap('This chart displays the stats distribution for each monster type. Point colors correspond to scaled stat values, where dark blue signifies higher values (above the mean) and orange signifies lower values (below the mean)', width = 80),\n    caption = 'Tidytuesday 2025-05-27'\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBe aware that radar charts are not really that useful. A better vizualization could be done with bar chart, but I never done a radar before, so I gave it a try (and probably my last, lol)"
  },
  {
    "objectID": "posts/2025-04-11/notebook.html",
    "href": "posts/2025-04-11/notebook.html",
    "title": "National Science Foundation Grant Terminations under the Trump Administration",
    "section": "",
    "text": "library(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(curl)\nlibrary(ggplot2)\nlibrary(ggimage)\nlibrary(ggrepel)\nlibrary(ggtext)\n  \n\n# ---- Data Preparation ----\n\ntuesdata &lt;- tidytuesdayR::tt_load(2025, week = 14)\ncare_state &lt;- tuesdata$care_state\n\ndata2plot &lt;- \n  care_state |&gt;\n  mutate(score = if_else(is.na(score), 0, score)) |&gt;\n  filter(measure_id %in% c('HCP_COVID_19','IMM_3')) |&gt;\n  mutate(measure_id = case_when(\n    measure_id == 'HCP_COVID_19' ~ \"COVID-19\",\n    measure_id == 'IMM_3' ~ \"Influenza\"\n  ))\n\n# --- Raw Plot\ndata2plot |&gt;\n  ggplot(aes(x = score, y = state, fill = measure_id)) +\n  geom_col()\n\n\n\n\n\n\n\n# --- Stage 2\n\nlibrary(geofacet)\ndata2plot |&gt;\n  ggplot(aes(x = score, y = measure_id)) +\n  geom_col(aes(fill = measure_id)) +\n  facet_geo(~ state, grid = \"us_state_grid1\", strip.position = \"top\")\n\n\n\n\n\n\n\n# --- Stage 3\n\ndata2plot |&gt;\n  ggplot(aes(x = score, y = measure_id)) +\n  geom_col(aes(fill = measure_id)) +\n  facet_geo(~ state, grid = \"us_state_grid1\", strip.position = \"top\") +\n  coord_polar() +\n  geom_text(data = .%&gt;% filter(measure_id == 'Influenza'), x = 0, y = -1, aes(label = scales::percent(score/100, accuracy = 1), color = measure_id), size = 2.5,fontface = \"bold\") +\n  geom_text(data = .%&gt;% filter(measure_id == 'COVID-19'), x = 0, y = -3, aes(label = scales::percent(score/100, accuracy = 1), color = measure_id), size = 2.5,fontface = \"bold\") +\n  scale_y_discrete(expand = c(0,3,0,0)) +\n  scale_x_continuous(limits = c(0,100), expand = c(0,0,0,0)) +\n  theme_void()\n\n\n\n\n\n\n\n# --- Stage 4\n\n\ndata2plot |&gt;\n  ggplot(aes(x = score, y = measure_id)) +\n  geom_col(aes(fill = measure_id)) +\n  geom_text(data = .%&gt;% filter(measure_id == 'Influenza'), x = 0, y = -1, aes(label = scales::percent(score/100, accuracy = 1), color = measure_id), size = 2.5,fontface = \"bold\") +\n  geom_text(data = .%&gt;% filter(measure_id == 'COVID-19'), x = 0, y = -3, aes(label = scales::percent(score/100, accuracy = 1), color = measure_id), size = 2.5,fontface = \"bold\") +\n  coord_polar() +\n  facet_geo(~ state, grid = \"us_state_grid1\", strip.position = \"top\") +\n  scale_y_discrete(expand = c(0,3,0,0)) +\n  scale_x_continuous(limits = c(0,100), expand = c(0,0,0,0)) +\n  scale_fill_manual(values = c(\"#99780b\",\"#14405C\")) +\n  scale_color_manual(values = c(\"#99780b\",\"#14405C\")) +\n  labs(\n    fill = NULL, \n    title = \"US Healthcare Personnel Vaccination\", \n    subtitle = \"Percentage of healthcare personnel who are up to date with COVID-19 or Influenza vaccinations on US (2024)\",\n    caption = 'SOURCE: #Tidytuesday 2025-04-08') +\n  guides(color = 'none') +\n  theme_void() +\n  theme(\n    plot.title.position = \"plot\",\n    plot.title = element_text(family = \"Ubuntu\", size = 20, face = 'bold'),\n    plot.subtitle = element_markdown(size = 9,lineheight = 1.25, margin = margin(5,0,20,0)),\n    legend.position = \"top\",\n    text = element_text(family = \"Ubuntu\"),\n    strip.text = element_text(color = 'grey30'),\n    legend.margin = margin(0,0,20,0),\n    legend.spacing = unit(0.1, 'cm'),\n    legend.key.height= unit(0.3, 'cm'),\n    legend.key.width= unit(0.5, 'cm'))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tidytuesday by Rodrigo Barreiro",
    "section": "",
    "text": "Hey there, and welcome to my TidyTuesday gallery!  👋\nIf you’re not familiar, #TidyTuesday is this awesome weekly data challenge run by the R for Data Science online community. Every week, they release a brand new dataset, and I jump at the chance to practice my data wrangling and visualization skills in R (and Python).\nFor each entry, you’ll find my code, the visuals I came up with.\nI love seeing what stories the numbers can tell and I hope you enjoy it too!\n— Rodrigo Barreiro\n\nGallery\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nradar\n\n\n\n\nMay 27, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntimeseries\n\n\n\n\nMay 23, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmap\n\n\ncircular\n\n\n\n\nApr 11, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2025-05-20/notebook.html",
    "href": "posts/2025-05-20/notebook.html",
    "title": "Water quality at Sydney Beaches",
    "section": "",
    "text": "tuesdata &lt;- tidytuesdayR::tt_load(2025, week = 20)\nwater_quality &lt;- tuesdata$water_quality\nweather &lt;- tuesdata$weather\n\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(scales)\nlibrary(showtext)\nlibrary(ggtext)\n\nfont_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 300, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)"
  },
  {
    "objectID": "posts/2025-05-20/notebook.html#before",
    "href": "posts/2025-05-20/notebook.html#before",
    "title": "Water quality at Sydney Beaches",
    "section": "Before",
    "text": "Before\n\ndata2plot |&gt;\n  filter(region != 'Western Sydney') |&gt;\n  ggplot(aes(x = date, y = roll_mean_enterococci)) +\n  geom_smooth(aes(color = region), linewidth = 0.5, se = FALSE, span = .2) +\n  labs(\n    title = 'Water Quality at Sydney Beaches',\n    subtitle = str_wrap(\n      width = 50,\n      'High concetration of _Enterococci spp._ in beach water can indicate contamination and poses health risks to swimmers, such as gastrointestinal upset and infections.'\n    )\n  )"
  },
  {
    "objectID": "posts/2025-05-20/notebook.html#after",
    "href": "posts/2025-05-20/notebook.html#after",
    "title": "Water quality at Sydney Beaches",
    "section": "After",
    "text": "After\n\naxis_text &lt;-\n  tibble(y = c(100, 200, 300)) |&gt;\n  mutate(\n    label = if_else(\n      y == max(y),\n      str_c(y, ' Enterococcus spp. CFL/ml'),\n      str_c(y)\n    )\n  ) |&gt;\n  mutate(date = data2plot$date |&gt; min())\n\ndata2plot |&gt;\n  filter(region != 'Western Sydney') |&gt;\n  ggplot(aes(x = date, y = roll_mean_enterococci)) +\n\n  geom_text(\n    data = axis_text,\n    aes(y = y, label = label, x = date - 2000),\n    size = 2,\n    color = '#9fa8c2',\n    hjust = 0,\n    vjust = -0.4\n  ) +\n\n  geom_smooth(aes(color = region), linewidth = 0.5, se = FALSE, span = .2) +\n  guides(color = 'none') +\n  facet_wrap(~region, ncol = 2, scales = 'free_x') +\n  gghighlight::gghighlight(\n    roll_mean_enterococci &gt;= 0,\n    keep_scales = TRUE,\n    use_direct_label = FALSE,\n    unhighlighted_params = list(\n      alpha = 0.75,\n      linewidth = 0.3,\n      color = '#d3daed'\n    )\n  ) +\n\n  theme_minimal() +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = 'Water Quality at Sydney Beaches',\n    subtitle = str_wrap(\n      width = 60,\n      'High concetration of _Enterococci spp._ in beach water can indicate contamination and poses health risks to swimmers, such as gastrointestinal upset and infections.'\n    ) |&gt; str_replace_all('\\n','&lt;br&gt;')\n  ) +\n\n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.grid.major.y = element_line(\n      linewidth = .1,\n      color = '#d3daed'\n    ),\n    panel.grid.minor = element_blank(),\n    axis.ticks.x = element_line(color = '#9fa8c2', linewidth = .25),\n    text = element_text(family = \"Ubuntu\"),\n    axis.text = element_text(color = '#9fa8c2', hjust = .5, size = 6),\n    axis.text.y = element_blank(),\n    plot.title = element_text(family = 'Ubuntu', face = 'bold', size = 16),\n    plot.subtitle = element_markdown(\n      family = 'Ubuntu',\n      size = 9,\n      color = '#4a5063',\n      margin = margin(0, 0, 20, 0),\n      lineheight = 1.25,\n    ),\n    panel.spacing = unit(2, \"lines\"),\n    strip.placement = \"outside\",\n    strip.text = element_text(\n      # hjust = -0.11,\n      color = '#0d3bb8',\n      hjust = 0,\n      size = 7,\n      margin = margin(0, 0.5, 0, 0)\n    ),\n    strip.background = element_blank(),\n    plot.margin = margin(25, 25, 25, 25)\n  ) +\n  scale_y_continuous(expand = c(0, 0, 0, 0)) +\n  scale_x_date(\n    expand = c(0, 0, 0.1, 0),\n    label = year,\n    breaks = c(\n      data2plot$date |&gt; min(),\n      as.Date('2010-01-01'),\n      data2plot$date |&gt; max()\n    )\n  ) +\n  scale_color_manual(values = c('#0d3bb8', '#0d3bb8', '#0d3bb8', '#0d3bb8'))"
  }
]