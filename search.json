[
  {
    "objectID": "posts/2025-09-02/notebook.html",
    "href": "posts/2025-09-02/notebook.html",
    "title": "Australian Frogs",
    "section": "",
    "text": "Tip\n\n\n\n If this code was useful to you, please consider give it a little star on GitHub."
  },
  {
    "objectID": "posts/2025-09-02/notebook.html#about-the-data",
    "href": "posts/2025-09-02/notebook.html#about-the-data",
    "title": "Australian Frogs",
    "section": "About the Data",
    "text": "About the Data\n\n\n\n\n\n\n\nNote\n\n\n\n Check the data in TidyTuesday GitHub repository.\n\n\n\nThis week we’re exploring 2023 data from the sixth annual release of FrogID data.\nFrogID is an Australian frog call identification initiative. The FrogID mobile app allows citizen scientists to record and submit frog calls for museum experts to identify. Since 2017, FrogID data has contributed to over 30 scientific papers exploring frog ecology, taxonomy, and conservation.\n\nAustralia is home to a unique and diverse array of frog species found almost nowhere else on Earth, with 257 native species distributed throughout the continent. But Australia’s frogs are in peril – almost one in five species are threatened with extinction due to threats such as climate change, urbanisation, disease, and the spread of invasive species."
  },
  {
    "objectID": "posts/2025-09-02/notebook.html#initializing",
    "href": "posts/2025-09-02/notebook.html#initializing",
    "title": "Australian Frogs",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\npacman::p_load(\n  tidyverse,\n  glue,\n  scales,\n  showtext,\n  ggtext,\n  shadowtext,\n  maps,\n  ggpattern,\n  ggrepel,\n  patchwork,\n  tidylog\n)\n\nfont_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 400, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n1.2 Set theme\n\ncool_gray0 &lt;- \"#323955\"\ncool_gray1 &lt;- \"#5a6695\"\ncool_gray2 &lt;- \"#7e89bb\"\ncool_gray3 &lt;- \"#a4aee2\"\ncool_gray4 &lt;- \"#cbd5ff\"\ncool_gray5 &lt;- \"#e7efff\"\n\ncool_red0 &lt;- \"#A31C44\"\ncool_red1 &lt;- \"#F01B5B\"\ncool_red2 &lt;- \"#F43E75\"\ncool_red3 &lt;- \"#E891AB\"\ncool_red4 &lt;- \"#FAC3D3\"\ncool_red5 &lt;- \"#FCE0E8\"\n\ntheme_set(\n  theme_minimal() +\n    theme(\n      # axis.line.x.bottom = element_line(color = 'cool_gray0', linewidth = .3),\n      # axis.ticks.x= element_line(color = 'cool_gray0', linewidth = .3),\n      # axis.line.y.left = element_line(color = 'cool_gray0', linewidth = .3),\n      # axis.ticks.y= element_line(color = 'cool_gray0', linewidth = .3),\n      # # panel.grid = element_line(linewidth = .3, color = 'grey90'),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      axis.ticks.length = unit(-0.15, \"cm\"),\n      plot.background = element_blank(),\n      # plot.title.position = \"plot\",\n      plot.title = element_text(family = \"Ubuntu\", size = 14, face = 'bold'),\n      plot.caption = element_text(\n        size = 8,\n        color = cool_gray3,\n        margin = margin(20, 0, 0, 0),\n        hjust = 0\n      ),\n      plot.subtitle = element_text(\n        size = 9,\n        lineheight = 1.15,\n        margin = margin(5, 0, 15, 0)\n      ),\n      axis.title.x = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.title.y = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.text = element_text(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      legend.position = \"top\",\n      text = element_text(family = \"Ubuntu\", color = cool_gray1),\n      # plot.margin = margin(25, 25, 25, 25)\n    )\n)\n\n\n\n1.3 Load this week’s data\n\ntuesdata &lt;- tidytuesdayR::tt_load('2025-09-02')"
  },
  {
    "objectID": "posts/2025-09-02/notebook.html#quick-exploratory-data-analysis",
    "href": "posts/2025-09-02/notebook.html#quick-exploratory-data-analysis",
    "title": "Australian Frogs",
    "section": "2 Quick Exploratory Data Analysis",
    "text": "2 Quick Exploratory Data Analysis\n\n2.1 How many species of frogs were found?\n\ntuesdata$frogID_data |&gt;\n  janitor::clean_names() |&gt;\n  count(scientific_name, sort = TRUE)\n\n# A tibble: 186 × 2\n   scientific_name                n\n   &lt;chr&gt;                      &lt;int&gt;\n 1 Crinia signifera           33630\n 2 Limnodynastes peronii      17462\n 3 Litoria fallax              8572\n 4 Litoria peronii             8565\n 5 Limnodynastes tasmaniensis  7372\n 6 Litoria ewingii             6471\n 7 Litoria verreauxii          5824\n 8 Crinia parinsignifera       4339\n 9 Limnodynastes dumerilii     3289\n10 Litoria caerulea            3011\n# ℹ 176 more rows\n\n\n\n\n2.2 Geografical distribution\n\ntuesdata$frogID_data |&gt;\n  janitor::clean_names() |&gt;\n  ggplot(aes(x = decimal_longitude, y = decimal_latitude)) +\n  geom_point() +\n  coord_fixed()\n\n\n\n\n\n\n\n\n\n\n2.2 Geografical distribution by species\n\nmost_commom_frogs &lt;- tuesdata$frogID_data |&gt;\n  janitor::clean_names() |&gt;\n  count(scientific_name, sort = TRUE) |&gt;\n  head(10)\n\ntuesdata$frogID_data |&gt;\n  janitor::clean_names() |&gt;\n  mutate(month = month(event_date)) |&gt;\n  mutate(scientific_name = if_else(scientific_name %in% most_commom_frogs$scientific_name, scientific_name, \"Other\")) |&gt;\n  mutate(scientific_name = factor(scientific_name, levels = c(most_commom_frogs$scientific_name, \"Other\"))) |&gt;\n  ggplot(aes(x = decimal_latitude, y = decimal_longitude)) +\n  geom_point(aes(color = scientific_name), size = 0.5) +\n  facet_grid(month ~ scientific_name) +\n  coord_fixed()\n\n\n\n\n\n\n\n\n\n\n2.2 Geografical distribution by genus\n\nmost_commom_frogs_geni &lt;- tuesdata$frogID_data |&gt;\n  janitor::clean_names() |&gt;\n  mutate(genus = str_remove(scientific_name, \".* \")) |&gt;\n  count(genus, sort = TRUE) |&gt;\n  head(10)\n\ntuesdata$frogID_data |&gt;\n  janitor::clean_names() |&gt;\n  mutate(genus = str_remove(scientific_name, \".* \")) |&gt;\n  mutate(month = month(event_date)) |&gt;\n  mutate(genus = if_else(genus %in% most_commom_frogs_geni$genus, genus, \"Other\")) |&gt;\n  mutate(genus = factor(genus, levels = c(most_commom_frogs_geni$genus, \"Other\"))) |&gt;\n  ggplot(aes(x = decimal_longitude, y = decimal_latitude)) +\n  geom_point(aes(color = genus), size = 0.5) +\n  facet_grid(month ~ genus) +\n  coord_fixed()\n\n\n\n\n\n\n\n\n\n\n2.2 Geografical distribution by subfamily\n\nmost_commom_frogs_subfamilies &lt;- tuesdata$frogID_data |&gt;\n  janitor::clean_names() |&gt;\n  inner_join(\n    tuesdata$frog_names |&gt;\n      janitor::clean_names() |&gt;\n      select(scientific_name, subfamily, tribe),\n    by = \"scientific_name\"\n  ) |&gt;\n  mutate(subfamily = str_remove(subfamily, \".* \")) |&gt;\n  count(subfamily, sort = TRUE) |&gt;\n  head(10)\n\ntuesdata$frogID_data |&gt;\n  janitor::clean_names() |&gt;\n  inner_join(\n    tuesdata$frog_names |&gt;\n      janitor::clean_names() |&gt;\n      select(scientific_name, subfamily, tribe),\n    by = \"scientific_name\"\n  ) |&gt;\n  mutate(month = month(event_date)) |&gt;\n  ggplot(aes(x = decimal_longitude, y = decimal_latitude)) +\n  geom_point(aes(color = subfamily), size = 0.5) +\n  facet_wrap(subfamily ~ month, ncol = 11) +\n  coord_fixed()"
  },
  {
    "objectID": "posts/2025-09-02/notebook.html#transform-data-for-plotting",
    "href": "posts/2025-09-02/notebook.html#transform-data-for-plotting",
    "title": "Australian Frogs",
    "section": "3 Transform Data for Plotting",
    "text": "3 Transform Data for Plotting\n\nlibrary(sf)\n\nmost_commom_frogs &lt;- tuesdata$frogID_data |&gt;\n  janitor::clean_names() |&gt;\n  count(scientific_name, sort = TRUE) |&gt;\n  head(9) |&gt;\n  mutate(scientific_name_rank = str_c(row_number(), \". \", scientific_name))\n\n\ndata2plot &lt;-\n  tuesdata$frogID_data |&gt;\n  janitor::clean_names() |&gt;\n  left_join(\n    tuesdata$frog_names |&gt;\n      janitor::clean_names() |&gt;\n      dplyr::select(scientific_name, subfamily, tribe),\n    by = \"scientific_name\"\n  ) |&gt;\n  st_as_sf(\n    coords = c(\"decimal_longitude\", \"decimal_latitude\"),\n    crs = \"EPSG:27700\",\n    remove = FALSE\n  ) |&gt;\n  mutate(\n    xcoord = st_coordinates(geometry)[, 1],\n    ycoord = st_coordinates(geometry)[, 2]\n  ) |&gt;\n  left_join(most_commom_frogs, by = \"scientific_name\") |&gt;\n  mutate(\n    scientific_name_rank = if_else(\n      is.na(scientific_name_rank),\n      \"Other\",\n      scientific_name_rank\n    ),\n    scientific_name_rank = factor(\n      scientific_name_rank,\n      levels = c(most_commom_frogs$scientific_name_rank, \"Other\")\n    )\n  )\n\n\nget_density &lt;- function(x, y, ...) {\n  # Calculate the 2D kernel density estimate\n  dens &lt;- MASS::kde2d(x, y, ...)\n\n  # Find the intervals for each point in x and y\n  ix &lt;- findInterval(x, dens$x)\n  iy &lt;- findInterval(y, dens$y)\n\n  # Combine the indices\n  ii &lt;- cbind(ix, iy)\n\n  # Return the density value for each point\n  return(dens$z[ii])\n}\n\ndata2plot &lt;- data2plot |&gt;\n  group_by(scientific_name_rank) |&gt;\n  mutate(\n    density_group = get_density(xcoord, ycoord, n = 100)\n  ) |&gt;\n  mutate(\n    z_score_density_group = (density_group - mean(density_group)) / sd(density_group)\n  ) |&gt;\n  ungroup() |&gt;\n  mutate(density = get_density(xcoord, ycoord, n = 100)) |&gt;\n  mutate(z_score_density = (density - mean(density)) / sd(density))"
  },
  {
    "objectID": "posts/2025-09-02/notebook.html#time-to-plot",
    "href": "posts/2025-09-02/notebook.html#time-to-plot",
    "title": "Australian Frogs",
    "section": "4 Time to plot!",
    "text": "4 Time to plot!\n\n4.1 Final chart\n\nau &lt;- rnaturalearth::ne_countries(scale = \"large\", returnclass = \"sf\") |&gt;\n  dplyr::select(name, continent, geometry) |&gt;\n  filter(name == \"Australia\")\n\np_sub &lt;-\n  ggplot() +\n  geom_sf(data = au, color = cool_gray3, fill = 'white', linewidth = .2) +\n  geom_point(\n    data = data2plot |&gt; filter(scientific_name_rank != \"Other\"),\n    aes(x = xcoord, y = ycoord, color = z_score_density_group),\n    size = 0.3,\n    show.legend = FALSE\n  ) +\n  theme(\n    # panel.background = element_rect(fill = \"#e3edf7ff\", color = NA)\n    axis.text = element_blank(),\n    strip.text = element_text(\n      color = cool_gray1,\n      hjust = 0,\n      family = \"Ubuntu\",\n      size = 5\n    ),\n  ) +\n  coord_sf(xlim = c(112, 155), ylim = c(-45, -10), expand = FALSE) +\n  facet_wrap(~scientific_name_rank) +\n  scale_color_gradientn(\n    colors = (RColorBrewer::brewer.pal(name = \"Spectral\", n = 8)) |&gt; rev()\n  ) +\n  labs(x = NULL, y = NULL)\n\np_main &lt;-\n  ggplot() +\n  geom_sf(data = au, color = cool_gray3, fill = 'white', linewidth = .2) +\n  geom_point(\n    data = data2plot,\n    aes(x = xcoord, y = ycoord, color = z_score_density),\n    size = 0.3,\n    show.legend = FALSE\n  ) +\n  theme(\n    # panel.background = element_rect(fill = \"#e3edf7ff\", color = NA)\n    axis.text = element_blank()\n  ) +\n  coord_sf(xlim = c(112, 155), ylim = c(-45, -10), expand = FALSE) +\n  scale_color_gradientn(\n    colors = (RColorBrewer::brewer.pal(name = \"Spectral\", n = 8)) |&gt; rev()\n  ) +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Spot the frogs\",\n    subtitle = \"Australian frogs records by FrogID in 2023. Overall and top 9 most common species.\",\n    caption = str_wrap(\n      \"NOTE This visualization offers a preliminary look at the data and may not capture the full complexity of the underlying reality. SOURCE #Tidytuesday 2025-08-26 GITHUB barreiro-r\",\n      width = 150\n    )\n  )\n\np_main + p_sub"
  },
  {
    "objectID": "posts/2025-08-19/notebook.html",
    "href": "posts/2025-08-19/notebook.html",
    "title": "Scottish Munros",
    "section": "",
    "text": "Tip\n\n\n\n If this code was useful to you, please consider give it a little star on GitHub."
  },
  {
    "objectID": "posts/2025-08-19/notebook.html#about-the-data",
    "href": "posts/2025-08-19/notebook.html#about-the-data",
    "title": "Scottish Munros",
    "section": "About the Data",
    "text": "About the Data\n\n\n\n\n\n\n\nNote\n\n\n\n Check the data in TidyTuesday GitHub repository.\n\n\n\nA Munro is a Scottish mountain with an elevation of over 3,000 feet, whereas a Munro Top is a subsidiary summit of a Munro that also exceeds 3,000 feet in height but is not considered a distinct mountain in its own right. The most famous Munro is Ben Nevis.\n\nIn 1891, Sir Hugh Munro produced the first list of these hills. However, unlike other classification schemes in Scotland which require a peak to have a prominence of at least 500 feet for inclusion, the Munros lack a rigid set of criteria for inclusion. And so, re-surveying can lead to changes in which peaks are included on the list."
  },
  {
    "objectID": "posts/2025-08-19/notebook.html#initializing",
    "href": "posts/2025-08-19/notebook.html#initializing",
    "title": "Scottish Munros",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\npacman::p_load(\n  tidyverse,\n  glue,\n  scales,\n  showtext,\n  ggtext,\n  shadowtext,\n  maps,\n  ggpattern,\n  ggrepel,\n  patchwork,\n  tidylog,\n  sf,\n  ggblend\n)\n\nfont_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 400, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n1.2 Set theme\n\ncool_gray0 &lt;- \"#323955\"\ncool_gray1 &lt;- \"#5a6695\"\ncool_gray2 &lt;- \"#7e89bb\"\ncool_gray3 &lt;- \"#a4aee2\"\ncool_gray4 &lt;- \"#cbd5ff\"\ncool_gray5 &lt;- \"#e7efff\"\n\ncool_red0 &lt;- \"#A31C44\"\ncool_red1 &lt;- \"#F01B5B\"\ncool_red2 &lt;- \"#F43E75\"\ncool_red3 &lt;- \"#E891AB\"\ncool_red4 &lt;- \"#FAC3D3\"\ncool_red5 &lt;- \"#FCE0E8\"\n\nmy_colors &lt;- c(\n  `Munro` = \"#1fc09dff\",\n  `Munro Top` = \"#ffc413ff\",\n  `Non-Munro` = \"#f23a3aff\"\n)\n\ntheme_set(\n  theme_minimal() +\n    theme(\n      # axis.line.x.bottom = element_line(color = 'cool_gray0', linewidth = .3),\n      # axis.ticks.x= element_line(color = 'cool_gray0', linewidth = .3),\n      # axis.line.y.left = element_line(color = 'cool_gray0', linewidth = .3),\n      # axis.ticks.y= element_line(color = 'cool_gray0', linewidth = .3),\n      # # panel.grid = element_line(linewidth = .3, color = 'grey90'),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      axis.ticks.length = unit(-0.15, \"cm\"),\n      plot.background = element_blank(),\n      # plot.title.position = \"plot\",\n      plot.title = element_text(family = \"Ubuntu\", size = 14, face = 'bold'),\n      plot.caption = element_text(\n        size = 8,\n        color = cool_gray3,\n        margin = margin(20, 0, 0, 0),\n        hjust = 0\n      ),\n      plot.subtitle = element_text(\n        size = 9,\n        lineheight = 1.15,\n        margin = margin(5, 0, 15, 0)\n      ),\n      axis.title.x = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.title.y = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.text = element_text(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 6,\n        color = cool_gray2,\n      ),\n      axis.text.x = element_text(margin = margin(t = -10)), # Add space above x-axis text\n      axis.text.y = element_text(margin = margin(r = -30)), # Add space to the right of y-axis text\n      legend.position = \"top\",\n      text = element_text(family = \"Ubuntu\", color = cool_gray1),\n      # plot.margin = margin(25, 25, 25, 25)\n    )\n)\n\n\n\n1.3 Load this week’s data\n\ntuesdata &lt;- tidytuesdayR::tt_load('2025-08-19')"
  },
  {
    "objectID": "posts/2025-08-19/notebook.html#quick-exploratory-data-analysis",
    "href": "posts/2025-08-19/notebook.html#quick-exploratory-data-analysis",
    "title": "Scottish Munros",
    "section": "2 Quick Exploratory Data Analysis",
    "text": "2 Quick Exploratory Data Analysis\n\n2.1 Classification over the years\n\ntuesdata$scottish_munros |&gt;\n  select(DoBIH_number, `1981`:`2021`) |&gt;\n  pivot_longer(-DoBIH_number, names_to = 'year', values_to = 'classification') |&gt;\n  mutate(classification = if_else(is.na(classification), 'Non-Munro', classification)) |&gt;\n  ggplot(aes(x = year, y = DoBIH_number)) +\n  geom_tile(aes(fill = classification)) +\n  theme(axis.text.y = element_blank()) +\n  scale_fill_manual(values = my_colors)\n\n\n\n\n\n\n\n\n\nmunros_change &lt;- \n  tuesdata$scottish_munros |&gt;\n  select(DoBIH_number, `1981`:`2021`) |&gt;\n  pivot_longer(-DoBIH_number, names_to = 'year', values_to = 'classification') |&gt;\n  mutate(classification = if_else(is.na(classification), 'Non-Munro', classification)) |&gt;\n  group_by(DoBIH_number) |&gt;\n  count(classification) |&gt;\n  summarise(n = n()) |&gt;\n  filter(n &gt; 1) |&gt;\n  pull(DoBIH_number)\n\ntuesdata$scottish_munros |&gt;\n  select(DoBIH_number, `1981`:`2021`) |&gt;\n  pivot_longer(-DoBIH_number, names_to = 'year', values_to = 'classification') |&gt;\n  mutate(classification = if_else(is.na(classification), 'Non-Munro', classification)) |&gt;\n  filter(DoBIH_number %in% munros_change) |&gt;\n  ggplot(aes(x = year, y = DoBIH_number)) +\n  geom_tile(aes(fill = classification)) +\n  theme(axis.text.y = element_blank()) +\n  scale_fill_manual(values = my_colors)\n\n\n\n\n\n\n\n\n\n\n2.2 Geographical distribution\n\ntuesdata$scottish_munros |&gt;\n  dplyr::select(xcoord, ycoord, Height_m, `2021`) |&gt;\n  ggplot(aes(x = xcoord, y = ycoord, z = Height_m)) +\n  stat_summary_hex(\n    fun = mean,\n    bins = 50\n  ) +\n  geom_point(\n    data = subset(tuesdata$scottish_munros, `2021` == 'Munro') |&gt; dplyr::slice_max(Height_m, n = 3),\n    color = \"#f60c46ff\",\n    size = 0.5\n  ) +\n  scale_fill_gradient(\n    low = \"#F3F3F3\",\n    high = \"#958277ff\") +\n  coord_fixed()"
  },
  {
    "objectID": "posts/2025-08-19/notebook.html#transform-data-for-plotting",
    "href": "posts/2025-08-19/notebook.html#transform-data-for-plotting",
    "title": "Scottish Munros",
    "section": "3 Transform Data for Plotting",
    "text": "3 Transform Data for Plotting\n\ndata2plot &lt;- \n  tuesdata$scottish_munros |&gt;\n  dplyr::select(Name, xcoord, ycoord, Height_m, `2021`) |&gt;\n  rename(munro_classification = '2021') |&gt;\n  janitor::clean_names() |&gt;\n  mutate(munro_classification = if_else(is.na(munro_classification),'Non-Munro', munro_classification))"
  },
  {
    "objectID": "posts/2025-08-19/notebook.html#time-to-plot",
    "href": "posts/2025-08-19/notebook.html#time-to-plot",
    "title": "Scottish Munros",
    "section": "4 Time to plot!",
    "text": "4 Time to plot!\n\n4.1 Raw chart\n\ntuesdata$scottish_munros |&gt;\n  dplyr::select(xcoord, ycoord, Height_m, `2021`) |&gt;\n  ggplot(aes(x = xcoord, y = ycoord, z = Height_m)) +\n  stat_summary_hex(\n    fun = mean,\n    bins = 50\n  ) +\n  geom_point(\n    data = subset(tuesdata$scottish_munros, `2021` == 'Munro') |&gt; dplyr::slice_max(Height_m, n = 3),\n    color = \"#f60c46ff\",\n    size = 0.5\n  ) +\n  coord_fixed()\n\n\n\n\n\n\n\n\n\n\n4.2 Final chart\n\nlibrary(sf)\nlibrary(ggblend)\n\ndata2plot2 &lt;-\n  data2plot |&gt;\n  filter(!is.na(xcoord)) |&gt;\n  st_as_sf(coords = c(\"xcoord\", \"ycoord\"), crs = \"EPSG:27700\") |&gt;\n\n  mutate(\n    xcoord = st_coordinates(geometry)[, 1],\n    ycoord = st_coordinates(geometry)[, 2]\n  ) |&gt;\n\n  mutate(name = str_remove(name, \" \\\\[.*\"))\n\n\nxcoord_limits &lt;- c(\n  min(data2plot2$xcoord) - 0.25 * min(data2plot2$xcoord),\n  max(data2plot2$xcoord) + 0.25 * max(data2plot2$xcoord)\n)\nycoord_limits &lt;- c(\n  min(data2plot2$ycoord) - 0.03 * min(data2plot2$ycoord),\n  max(data2plot2$ycoord) + 0.03 * max(data2plot2$ycoord)\n)\n\ndata2plot_top1 &lt;-\n  data2plot2 |&gt;\n  filter(munro_classification == 'Munro') |&gt;\n  dplyr::slice_max(height_m, n = 2) |&gt;\n  arrange(desc(height_m)) |&gt;\n  mutate(rank = row_number())\n\nuk &lt;- rnaturalearth::ne_countries(scale = \"medium\", returnclass = \"sf\") |&gt;\n  select(name, continent, geometry) |&gt;\n  filter(name == \"United Kingdom\")\n\nggplot() +\n  geom_sf(data = uk, fill = \"white\", color = NA, size = 0.2) +\n  # stat_summary_hex(\n  #   data = data2plot2,\n  #   aes(\n  #     x = st_coordinates(geometry)[, 1],\n  #     y = st_coordinates(geometry)[, 2],\n  #     z = height_m\n  #   ),\n  #   fun = mean,\n  #   bins = 50\n  # ) +\n  geom_point(\n    data = data2plot2,\n    aes(x = xcoord, y = ycoord, color = height_m),\n    size = 2,\n    stroke = 0)  |&gt; blend(\"darken\") +\n  scale_color_gradient(\n    limits = c(\n      floor(min(data2plot2$height_m)),\n      ceiling(max(data2plot2$height_m))\n    ),\n    n.breaks = 3,\n    low = \"#f5f1efff\",\n    high = \"#453e3aff\"\n  ) +\n  geom_point(\n    data = data2plot_top1,\n    aes(x = xcoord, y = ycoord),\n    fill = cool_gray5,\n    color = cool_gray0,\n    size = 6,\n    shape = 21\n  ) +\n  geom_text(\n    data = data2plot_top1,\n    aes(x = xcoord, y = ycoord, label = rank),\n    color = cool_gray0,\n    size = 3,\n    face = \"bold\",\n    family = \"Ubuntu\"\n  ) +\n  ggtext::geom_richtext(\n    data = data2plot_top1,\n    aes(x = xcoord, y = ycoord, label = glue::glue(\"**{name}**&lt;br&gt;({height_m}m)\")),\n    color = cool_gray0,\n    size = 3,\n    hjust = 1.1,\n    family = \"Ubuntu\",\n    fill = NA,\n    label.color = NA\n  ) +\n  coord_sf(xlim = xcoord_limits, ylim = ycoord_limits, crs = \"EPSG:27700\") +\n  theme(\n    panel.background = element_rect(fill = \"#e3edf7ff\", color = NA),\n    legend.position = c(.95, .95),\n    legend.justification = c(1, 1),\n    legend.text = element_text(size = 8),\n    legend.title = element_text(size = 8),\n    legend.background = element_rect(\n      fill = \"white\",\n      color = cool_gray4,\n      linewidth = 0.2\n    ),\n    legend.margin = margin(10, 10, 10, 10),\n  ) +\n  labs(\n    x = NULL,\n    y = NULL,\n    color = \"Height (m)\",\n    title = \"Scottish Munros\",\n    subtitle =  str_wrap(\"A Munro is a Scottish mountain with an elevation of over 3,000 feet. The most famous Munro is Ben Nevis.\", width = 80),\n    caption = str_wrap(\n      \"NOTE This visualization offers a preliminary look at the data and may not capture the full complexity of the underlying reality. SOURCE #Tidytuesday 2025-06-17 GITHUB barreiro-r\",\n      width = 100\n    )\n  ) +\n  guides(\n    color = guide_colorbar(\n      direction = \"horizontal\",\n      barwidth = 5,\n      barheight = .3,\n      title.position = 'top'\n    )\n  )"
  },
  {
    "objectID": "posts/2025-08-05/notebook.html",
    "href": "posts/2025-08-05/notebook.html",
    "title": "Income Inequality Before and After Taxes",
    "section": "",
    "text": "Tip\n\n\n\n If this code was useful to you, please consider give it a little star on GitHub."
  },
  {
    "objectID": "posts/2025-08-05/notebook.html#about-the-data",
    "href": "posts/2025-08-05/notebook.html#about-the-data",
    "title": "Income Inequality Before and After Taxes",
    "section": "About the Data",
    "text": "About the Data\n\n\n\n\n\n\nNote\n\n\n\n Check the data in TidyTuesday GitHub repository.\n\n\nThis week we’re exploring Income Inequality Before and After Taxes, as processed and visualized by Joe Hasell at Our World in Data: “Income inequality before and after taxes: how much do countries redistribute income?”\n\nThe Gini coefficient measures inequality on a scale from 0 to 1. Higher values indicate higher inequality. Inequality is measured here in terms of income before and after taxes and benefits."
  },
  {
    "objectID": "posts/2025-08-05/notebook.html#initializing",
    "href": "posts/2025-08-05/notebook.html#initializing",
    "title": "Income Inequality Before and After Taxes",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(scales)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(shadowtext)\nlibrary(maps)\nlibrary(ggpattern)\nlibrary(ggrepel)\nlibrary(patchwork)\nlibrary(tidylog)\n\nfont_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 400, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n1.2 Set theme\n\ncool_gray0 &lt;- \"#323955\"\ncool_gray1 &lt;- \"#5a6695\"\ncool_gray2 &lt;- \"#7e89bb\"\ncool_gray3 &lt;- \"#a4aee2\"\ncool_gray4 &lt;- \"#cbd5ff\"\ncool_gray5 &lt;- \"#e7efff\"\n\ncool_red0 &lt;- \"#A31C44\"\ncool_red1 &lt;- \"#F01B5B\"\ncool_red2 &lt;- \"#F43E75\"\ncool_red3 &lt;- \"#E891AB\"\ncool_red4 &lt;- \"#FAC3D3\"\ncool_red5 &lt;- \"#FCE0E8\"\n\ntheme_set(\n  theme_minimal() +\n    theme(\n      # axis.line.x.bottom = element_line(color = 'cool_gray0', linewidth = .3),\n      # axis.ticks.x= element_line(color = 'cool_gray0', linewidth = .3),\n      # axis.line.y.left = element_line(color = 'cool_gray0', linewidth = .3),\n      # axis.ticks.y= element_line(color = 'cool_gray0', linewidth = .3),\n      # # panel.grid = element_line(linewidth = .3, color = 'grey90'),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      axis.ticks.length = unit(-0.15, \"cm\"),\n      plot.background = element_blank(),\n      # plot.title.position = \"plot\",\n      plot.title = element_text(family = \"Ubuntu\", size = 14, face = 'bold'),\n      plot.caption = element_text(\n        size = 8,\n        color = cool_gray3,\n        margin = margin(20, 0, 0, 0),\n        hjust = 0\n      ),\n      plot.subtitle = element_text(\n        size = 9,\n        lineheight = 1.15,\n        margin = margin(5, 0, 15, 0)\n      ),\n      axis.title.x = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.title.y = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.text = element_text(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      legend.position = \"top\",\n      text = element_text(family = \"Ubuntu\", color = cool_gray1),\n      # plot.margin = margin(25, 25, 25, 25)\n    )\n)\n\n\n\n1.3 Load this week’s data\n\nincome_inequality_processed &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-08-05/income_inequality_processed.csv')"
  },
  {
    "objectID": "posts/2025-08-05/notebook.html#data-analysis",
    "href": "posts/2025-08-05/notebook.html#data-analysis",
    "title": "Income Inequality Before and After Taxes",
    "section": "2 Data analysis",
    "text": "2 Data analysis\n\nHow many countries?\n\nincome_inequality_processed |&gt;\n  count(Entity, sort = TRUE)\n\n# A tibble: 52 × 2\n   Entity             n\n   &lt;chr&gt;          &lt;int&gt;\n 1 United States     61\n 2 United Kingdom    54\n 3 Canada            45\n 4 Germany           40\n 5 Brazil            38\n 6 Luxembourg        37\n 7 France            30\n 8 Spain             30\n 9 Austria           27\n10 Sweden            27\n# ℹ 42 more rows\n\n\nHow many years?\n\nincome_inequality_processed |&gt;\n  count(Year, sort = TRUE)\n\n# A tibble: 61 × 2\n    Year     n\n   &lt;dbl&gt; &lt;int&gt;\n 1  2010    41\n 2  2016    41\n 3  2013    40\n 4  2007    37\n 5  2015    37\n 6  2014    36\n 7  2017    36\n 8  2018    35\n 9  2004    34\n10  2011    34\n# ℹ 51 more rows\n\n\nBoth:\n\nincome_inequality_processed |&gt;\n  mutate(Entity = fct_infreq(Entity)) |&gt;\n  ggplot(aes(x = Year, y = Entity)) +\n  geom_tile(aes(fill = gini_mi_eq + gini_dhi_eq), show.legend = FALSE) \n\n\n\n\n\n\n\n\nMany NAs.\nLets add some filters\n\nincome_inequality_processed |&gt;\n  filter(!is.na(gini_dhi_eq) & !is.na(gini_mi_eq)) |&gt;\n  group_by(Entity) |&gt;\n  filter(n() &gt; 10) |&gt;\n  ungroup() |&gt;\n  mutate(Entity = fct_infreq(Entity)) |&gt;\n  ggplot(aes(x = Year, y = Entity)) +\n  geom_tile(aes(fill = gini_mi_eq - gini_dhi_eq)) \n\n\n\n\n\n\n\n\n\n\nHow it change over time?\n\nmin_year &lt;- \n  income_inequality_processed |&gt;\n  filter(!is.na(gini_dhi_eq) & !is.na(gini_mi_eq)) |&gt;\n  filter(n() &gt; 10) |&gt;\n  group_by(Entity) |&gt;\n  slice_min(Year, n = 3) |&gt;\n  summarise(\n    pre_tax = mean(gini_mi_eq), sd_pre_tax = sd(gini_mi_eq),\n    pos_tax = mean(gini_dhi_eq), sd_pos_tax = sd(gini_dhi_eq)) |&gt;\n  ungroup() |&gt;\n  mutate(limit = 'lower')\n\nmax_year &lt;- \n  income_inequality_processed |&gt;\n  filter(!is.na(gini_dhi_eq) & !is.na(gini_mi_eq)) |&gt;\n  filter(n() &gt; 10) |&gt;\n  group_by(Entity) |&gt;\n  slice_max(Year, n = 3) |&gt;\n  summarise(\n    pre_tax = mean(gini_mi_eq), sd_pre_tax = sd(gini_mi_eq),\n    pos_tax = mean(gini_dhi_eq), sd_pos_tax = sd(gini_dhi_eq)) |&gt;\n  ungroup() |&gt;\n  mutate(limit = 'upper')\n\nbind_rows(min_year, max_year) |&gt;\n  mutate(reduction = 1 - pos_tax / pre_tax ) |&gt;\n  ggplot(aes(x = limit, y = reduction)) +\n  geom_point(aes(color = Entity), show.legend = FALSE) +\n  geom_line(aes(color = Entity, group = Entity), show.legend = FALSE)"
  },
  {
    "objectID": "posts/2025-08-05/notebook.html#transform-data-for-plotting",
    "href": "posts/2025-08-05/notebook.html#transform-data-for-plotting",
    "title": "Income Inequality Before and After Taxes",
    "section": "3 Transform Data for Plotting",
    "text": "3 Transform Data for Plotting\n\nmin_year &lt;- \n  income_inequality_processed |&gt;\n  filter(!is.na(gini_dhi_eq) & !is.na(gini_mi_eq)) |&gt;\n  filter(Year &gt; 2000) |&gt;\n  filter(n() &gt; 10) |&gt;\n  group_by(Entity) |&gt;\n  slice_min(Year, n = 3) |&gt;\n  summarise(\n    pre_tax = mean(gini_mi_eq), sd_pre_tax = sd(gini_mi_eq),\n    pos_tax = mean(gini_dhi_eq), sd_pos_tax = sd(gini_dhi_eq),\n    year = min(Year)) |&gt;\n  ungroup() |&gt;\n  mutate(limit = 'first 3 records')\n\nmax_year &lt;- \n  income_inequality_processed |&gt;\n  filter(!is.na(gini_dhi_eq) & !is.na(gini_mi_eq)) |&gt;\n  filter(Year &gt; 2000) |&gt;\n  filter(n() &gt; 10) |&gt;\n  group_by(Entity) |&gt;\n  slice_max(Year, n = 3) |&gt;\n  summarise(\n    pre_tax = mean(gini_mi_eq), sd_pre_tax = sd(gini_mi_eq),\n    pos_tax = mean(gini_dhi_eq), sd_pos_tax = sd(gini_dhi_eq),\n    year = max(Year)) |&gt;\n  ungroup() |&gt;\n  mutate(limit = 'last 3 records')\n\ndata2plot &lt;- \n  bind_rows(min_year, max_year) |&gt;\n  mutate(reduction = 1 - pos_tax / pre_tax ) |&gt;\n  janitor::clean_names()\n\n# -- Raw\ndata2plot2 &lt;- \n  income_inequality_processed |&gt;\n  filter(!is.na(gini_dhi_eq) & !is.na(gini_mi_eq)) |&gt;\n  filter(Year &gt; 2000) |&gt;\n  filter(n() &gt; 10) |&gt;\n  janitor::clean_names() |&gt;\n  rename(gini_pre_tax = gini_mi_eq,  gini_pos_tax = gini_dhi_eq)"
  },
  {
    "objectID": "posts/2025-08-05/notebook.html#time-to-plot",
    "href": "posts/2025-08-05/notebook.html#time-to-plot",
    "title": "Income Inequality Before and After Taxes",
    "section": "4 Time to plot!",
    "text": "4 Time to plot!\n\n4.1 Before\n\ndata2plot |&gt;\n  mutate(reduction = 1 - pos_tax / pre_tax ) |&gt;\n  ggplot(aes(x = limit, y = reduction)) +\n  geom_point(aes(color = entity), show.legend = FALSE) +\n  geom_line(aes(color = entity, group = entity), show.legend = FALSE) +\n  theme_grey()\n\n\n\n\n\n\n\n\n\n\n4.2 Final\n\nreduction_change &lt;-\n  data2plot |&gt;\n  select(entity, reduction, limit) |&gt;\n  pivot_wider(names_from = limit, values_from = reduction) |&gt;\n  janitor::clean_names() |&gt;\n  mutate(reduction_change = first_3_records - last_3_records)\n\nmore_reduction_country &lt;- reduction_change |&gt;\n  slice_max(reduction_change, n = 1) |&gt;\n  pull(entity)\nless_reduction_country &lt;- reduction_change |&gt;\n  slice_min(reduction_change, n = 1) |&gt;\n  pull(entity)\n\nmore_reduction_data &lt;- data2plot |&gt; filter(entity %in% more_reduction_country)\nless_reduction_data &lt;- data2plot |&gt; filter(entity %in% less_reduction_country)\n\np1 &lt;-\n  data2plot |&gt;\n  filter(\n    !entity %in% c(more_reduction_data$entity, less_reduction_data$entity)\n  ) |&gt;\n  mutate(reduction = 1 - pos_tax / pre_tax) |&gt;\n  ggplot(aes(x = limit, y = reduction)) +\n  geom_point(show.legend = FALSE, color = cool_gray5, size = 0.5) +\n  geom_line(\n    aes(group = entity),\n    linewidth = .2,\n    color = cool_gray5,\n    show.legend = FALSE\n  ) +\n  # add more\n  geom_point(\n    data = more_reduction_data,\n    show.legend = FALSE,\n    color = cool_gray1\n  ) +\n  geom_line(\n    data = more_reduction_data,\n    aes(group = entity),\n    color = cool_gray1,\n    show.legend = FALSE\n  ) +\n  # add less\n  geom_point(\n    data = less_reduction_data,\n    show.legend = FALSE,\n    color = cool_red1,\n  ) +\n  geom_line(\n    data = less_reduction_data,\n    aes(group = entity),\n    color = cool_red1,\n    show.legend = FALSE\n  ) +\n  # add name\n  geom_text(\n    data = more_reduction_data |&gt; filter(limit == 'first 3 records'),\n    aes(label = entity),\n    hjust = 1,\n    nudge_x = -0.05,\n    size = 3,\n    color = cool_gray1\n  ) +\n  geom_text(\n    data = less_reduction_data |&gt; filter(limit == 'first 3 records'),\n    aes(label = entity),\n    hjust = 1,\n    nudge_x = -0.05,\n    size = 3,\n    color = cool_red1\n  ) +\n  # add change\n  geom_text(\n    data = more_reduction_data |&gt;\n      left_join(reduction_change, by = 'entity') |&gt;\n      filter(limit == 'last 3 records'),\n    aes(label = percent(reduction_change, accuracy = 0.1)),\n    hjust = 0,\n    nudge_x = 0.05,\n    size = 3,\n    color = cool_gray1\n  ) +\n  geom_text(\n    data = less_reduction_data |&gt;\n      left_join(reduction_change, by = 'entity') |&gt;\n      filter(limit == 'last 3 records'),\n    aes(label = percent(reduction_change, accuracy = 0.1)),\n    hjust = 0,\n    nudge_x = 0.05,\n    size = 3,\n    color = cool_red1\n  ) +\n  # Labels\n  labs(\n    x = NULL,\n    y = \"**Income inequality reduction by taxes**&lt;br&gt;(Gini coefficient)\",\n    title = \"The Redistributive Power of Government:\\nIncome Inequality Before and After Taxes\",\n    subtitle = str_wrap(\"The Gini coefficient is a widely used measure of income inequality, but its value may be affected by the inclusion of taxes in the calculation. Here we compare the reduction of the Gini coefficient after taxes from the earlier years to the later year and take a closer look to countries with higher and lower inequality reduction change. Solid color bars represent the Gini coefficient before taxes, while dashed color bars represent the Gini coefficient before taxes.\", width = 110),\n    caption = str_wrap(\n      \"NOTE This visualization offers a preliminary look at the data and may not capture the full complexity of the underlying reality. SOURCE #Tidytuesday 2025-06-17 GITHUB barreiro-r\",\n      width = 120,\n    )\n  ) +\n  scale_y_continuous(\n    label = percent,\n    limits = c(0, .5)\n  ) +\n  scale_x_discrete(\n    label = c(\n      `first 3 records` = 'First 3 records',\n      `last 3 records` = 'Last 3 records'\n    )\n  )\n\n\n# --- Bar plot\n\ndata2plot2_more_reduction &lt;-\n  bind_rows(\n    data2plot2 |&gt;\n      filter(entity %in% c(more_reduction_data$entity)) |&gt;\n      slice_max(year, n = 3) |&gt;\n      mutate(limit = 'first 3 records'),\n    data2plot2 |&gt;\n      filter(entity %in% c(more_reduction_data$entity)) |&gt;\n      slice_min(year, n = 3) |&gt;\n      mutate(limit = 'last 3 records')\n  )\n\ndata2plot2_less_reduction &lt;-\n  bind_rows(\n    data2plot2 |&gt;\n      filter(entity %in% c(less_reduction_data$entity)) |&gt;\n      slice_max(year, n = 3) |&gt;\n      mutate(limit = 'first 3 records'),\n    data2plot2 |&gt;\n      filter(entity %in% c(less_reduction_data$entity)) |&gt;\n      slice_min(year, n = 3) |&gt;\n      mutate(limit = 'last 3 records')\n  )\n\ndata2plot3 &lt;-\n  bind_rows(data2plot2_less_reduction, data2plot2_more_reduction) |&gt;\n  arrange(entity, year) |&gt;\n  group_by(entity) |&gt;\n  mutate(bar_position = row_number()) |&gt;\n  # create a gap\n  mutate(\n    bar_position = if_else(bar_position &gt; 3, bar_position + 1, bar_position)\n  ) |&gt;\n  ungroup() |&gt;\n  pivot_longer(\n    cols = c(gini_pre_tax, gini_pos_tax),\n    names_to = 'tax',\n    values_to = 'gini'\n  ) |&gt;\n  mutate(\n    entity = factor(\n      entity,\n      levels = c(less_reduction_country, more_reduction_country)\n    )\n  ) |&gt;\n  mutate(limit = factor(limit, levels = c('first 3 records', 'last 3 records')))\n\np2 &lt;-\n  data2plot3 |&gt;\n  ggplot(aes(x = bar_position, y = gini)) +\n  geom_col_pattern(\n    data = subset(data2plot3, tax == 'gini_pre_tax'),\n    pattern = \"stripe\",\n    aes(pattern_fill = entity),\n    color = NA,\n    pattern_color = NA,\n    fill = 'white',\n    pattern_spacing = .02,\n    pattern_angle = 45,\n    show.legend = FALSE\n  ) +\n  geom_col(\n    data = subset(data2plot3, tax == 'gini_pos_tax'),\n    aes(fill = entity),\n    show.legend = FALSE\n  ) +\n  geom_text(\n    data = subset(data2plot3, tax == 'gini_pos_tax'),\n    aes(label = year),\n    angle = 90,\n    y = 0.01,\n    hjust = 0,\n    color = \"white\",\n    size = 2.5\n  ) +\n  facet_wrap(vars(entity)) +\n  labs(\n    x = NULL,\n    y = \"**Income inequality** (Gini coefficient)\",\n  ) +\n  scale_y_continuous(\n    expand = c(0,0,0,0)\n  ) +\n  scale_fill_manual(values = c(cool_red1, cool_gray1)) +\n  scale_pattern_fill_manual(values = c(cool_red1, cool_gray1)) +\n  theme(\n    axis.text.x = element_blank(),\n    strip.text = element_text(family = \"Ubuntu\", size = 8, color = cool_gray0),\n  )\n\n\n# --- Combine\np1 + p2 + plot_layout(widths = c(1.7, 2))"
  },
  {
    "objectID": "posts/2025-07-22/notebook.html",
    "href": "posts/2025-07-22/notebook.html",
    "title": "MTA Permanent Art Catalog",
    "section": "",
    "text": "Tip\n\n\n\n If this code was useful to you, please consider give it a little star on GitHub."
  },
  {
    "objectID": "posts/2025-07-22/notebook.html#about-the-data",
    "href": "posts/2025-07-22/notebook.html#about-the-data",
    "title": "MTA Permanent Art Catalog",
    "section": "About the Data",
    "text": "About the Data\n\n\n\n\n\n\nNote\n\n\n\n Check the data in TidyTuesday GitHub repository.\n\n\nThis week we’re exploring the (New York) MTA Permanent Art Catalog! Thank you to Georgios Karamanis (GitHub | Bluesky | LinkedIn for suggesting this dataset. Submit your dataset ideas through our GitHub issue tracker!\nThe MTA has a dashboard to explore this dataset, but the dashboard is at least partially broken. Can you recreate it in Shiny for R or Python?\n\nThrough the Permanent Art Program, MTA Arts & Design (formerly Arts for Transit) commissions public art that is seen by millions of city-dwellers as well as national and international visitors who use the MTA’s subways and trains. Arts & Design works closely with the architects and engineers at MTA NYC Transit, Long Island Rail Road and Metro-North Railroad to determine the parameters and sites for the artwork that is to be incorporated into each station scheduled for renovation. A diversity of well-established, mid-career and emerging artists contribute to the growing collection of works created in the materials of the system -mosaic, ceramic, tile, bronze, steel and glass. Artists are chosen through a competitive process that uses selection panels comprised of visual arts professionals and community representatives which review and select artists. This data provides the branch or station and the artist and artwork information."
  },
  {
    "objectID": "posts/2025-07-22/notebook.html#initializing",
    "href": "posts/2025-07-22/notebook.html#initializing",
    "title": "MTA Permanent Art Catalog",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(scales)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(shadowtext)\nlibrary(maps)\nlibrary(ggpattern)\nlibrary(ggrepel)\nlibrary(patchwork)\n# library(tidylog)\n\n# font_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 400, bold.wt = 700)\n# showtext_auto()\n# showtext_opts(dpi = 300)\n\n\n\n1.2 Set theme\n\ncool_gray0 &lt;- \"#323955\"\ncool_gray1 &lt;- \"#5a6695\"\ncool_gray2 &lt;- \"#7e89bb\"\ncool_gray3 &lt;- \"#a4aee2\"\ncool_gray4 &lt;- \"#cbd5ff\"\ncool_gray5 &lt;- \"#e7efff\"\n\ncool_red0 &lt;- \"#A31C44\"\ncool_red1 &lt;- \"#F01B5B\"\ncool_red2 &lt;- \"#F43E75\"\ncool_red3 &lt;- \"#E891AB\"\ncool_red4 &lt;- \"#FAC3D3\"\ncool_red5 &lt;- \"#FCE0E8\"\n\ntheme_set(\n  theme_minimal() +\n    theme(\n      # axis.line.x.bottom = element_line(color = '#474747', linewidth = .3),\n      # axis.ticks.x= element_line(color = '#474747', linewidth = .3),\n      # axis.line.y.left = element_line(color = '#474747', linewidth = .3),\n      # axis.ticks.y= element_line(color = '#474747', linewidth = .3),\n      # # panel.grid = element_line(linewidth = .3, color = 'grey90'),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      axis.ticks.length = unit(-0.15, \"cm\"),\n      plot.background = element_blank(),\n      # plot.title.position = \"plot\",\n      plot.title = element_text(family = \"Helvetica Neue\", size = 18, face = 'bold'),\n      plot.caption = element_text(\n        size = 8,\n        color = cool_gray1,\n        margin = margin(20, 0, 0, 0),\n        hjust = 0\n      ),\n      plot.subtitle = element_text(\n        size = 9,\n        lineheight = 1.15,\n        margin = margin(5, 0, 15, 0)\n      ),\n      axis.title.x = element_markdown(\n        family = \"Helvetica Neue\",\n        hjust = .5,\n        size = 8,\n        color = 'black'\n      ),\n      axis.title.y = element_markdown(\n        family = \"Helvetica Neue\",\n        hjust = .5,\n        size = 8,\n        color = 'black'\n      ),\n      axis.text = element_text(\n        family = \"Helvetica Neue\",\n        hjust = .5,\n        size = 8,\n        color = 'black'\n      ),\n      legend.position = \"top\",\n      text = element_text(family = \"Helvetica Neue\", color = 'black'),\n      plot.margin = margin(25, 25, 25, 25)\n    )\n)\n\n\n\n1.3 Load this week’s data\n\npath &lt;- \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data\"\n\nmta_art &lt;- readr::read_csv(glue('{path}/2025/2025-07-22/mta_art.csv'))\nstation_lines &lt;- readr::read_csv(glue('{path}/2025/2025-07-22/station_lines.csv'))"
  },
  {
    "objectID": "posts/2025-07-22/notebook.html#data-analysis",
    "href": "posts/2025-07-22/notebook.html#data-analysis",
    "title": "MTA Permanent Art Catalog",
    "section": "2 Data analysis",
    "text": "2 Data analysis\n\nHow many art each artist contributed to?\n\nmta_art |&gt;\n  count(artist, sort = TRUE, name = 'artpieces') |&gt;\n  count(artpieces, sort = TRUE, name = 'artists')\n\n# A tibble: 4 × 2\n  artpieces artists\n      &lt;int&gt;   &lt;int&gt;\n1         1     294\n2         2      35\n3         3       4\n4         5       1\n\n\nMostly did only one artpiece, 40 did more then 1.\n\n# Thank you Gemini\nart_categories &lt;- \n  read_csv('art_categories.csv') |&gt;\n  distinct(art_material, .keep_all = TRUE)\n\nmta_art |&gt; \n  mutate(art_material = str_remove(art_material, ' - .*')) |&gt;\n  mutate(art_material = str_remove(art_material, ', .*')) |&gt;\n  mutate(art_material = str_replace(art_material, '\\v', \"\")) |&gt;\n  left_join(art_categories, by = 'art_material') |&gt;\n  count(art_material_category, art_date, sort = TRUE, name = 'artpieces')\n\n# A tibble: 123 × 3\n   art_material_category      art_date artpieces\n   &lt;chr&gt;                         &lt;dbl&gt;     &lt;int&gt;\n 1 Glass                          2018        25\n 2 Glass                          2007        14\n 3 Glass                          2002        12\n 4 Glass                          2006        11\n 5 Glass                          2011        10\n 6 Glass                          2012        10\n 7 Glass                          2004         9\n 8 Glass                          2008         9\n 9 Metal                          1990         9\n10 Ceramic/Mosaic (Non-Glass)     1994         8\n# ℹ 113 more rows\n\n\nWell, not that interesting…"
  },
  {
    "objectID": "posts/2025-07-22/notebook.html#transform-data-for-plotting",
    "href": "posts/2025-07-22/notebook.html#transform-data-for-plotting",
    "title": "MTA Permanent Art Catalog",
    "section": "3 Transform Data for Plotting",
    "text": "3 Transform Data for Plotting\n\ndata2plot &lt;- \n  mta_art |&gt; \n  mutate(art_material = str_remove(art_material, ' - .*')) |&gt;\n  mutate(art_material = str_remove(art_material, ', .*')) |&gt;\n  mutate(art_material = str_replace(art_material, '\\v', \"\")) |&gt;\n  left_join(art_categories, by = 'art_material') |&gt;\n  count(art_material_category, art_date, sort = TRUE, name = 'artpieces') |&gt;\n  filter(art_date &gt; 2000) |&gt;\n  mutate(art_material_category = str_remove(art_material_category, '/.*'))"
  },
  {
    "objectID": "posts/2025-07-22/notebook.html#time-to-plot",
    "href": "posts/2025-07-22/notebook.html#time-to-plot",
    "title": "MTA Permanent Art Catalog",
    "section": "4 Time to plot!",
    "text": "4 Time to plot!\n\n4.1 Before\n\ndata2plot |&gt;\n  ggplot(aes(x = art_date, y = artpieces)) +\n  geom_point() + geom_line() +\n  theme_grey() +\n  labs(\n    color = NULL,\n    x = NULL,\n    y = \"New Artpieces\",\n    title = \"NYC Underground Art, really\",\n    subtitle = \"New artpieces by main material in MTA Arts & Design (formerly Arts for Transit)\",\n    caption = str_wrap(\n      \"NOTE This visualization offers a preliminary look at the data and may not capture the full complexity of the underlying reality. SOURCE #Tidytuesday 2025-06-17 GITHUB barreiro-r\",\n      width = 100\n    ))\n\n\n\n\n\n\n\n\n\n#' Add Vertical Spacing to Tied Values\n#'\n#' This function identifies ties within groups and adds a small vertical offset\n#' to distinguish them. It's designed to be used within a dplyr pipeline.\n#'\n#' @param .data A tibble or data frame.\n#' @param group_col The column that defines the main groups (e.g., a date range).\n#' @param value_col The numeric column where ties should be detected (e.g., counts).\n#' @param order_col The categorical column used to establish a consistent order for applying the offset during ties.\n#' @param new_col_name The name of the new column that will store the spaced-out values.\n#' @param residual The small numeric value to add for each subsequent tied item.\n#'\n#' @return A tibble with the new spaced-out value column added.\n#'\n#' @examples\n#' # See example usage below the function definition.\nadd_vertical_spacing &lt;- function(.data, group_col, value_col, order_col, new_col_name = \"spaced_total\", residual = 0.1) {\n  .data %&gt;%\n    # First, arrange by the designated ordering column. This is crucial because\n    # it ensures that when we find ties, the residuals are added in a consistent\n    # order (based on the factor levels or alphabetical order of this column).\n    arrange({{ order_col }}) %&gt;%\n    \n    # Group by the main category (e.g., date range) AND the specific value.\n    # This creates groups of rows that are tied. For example, all rows where\n    # art_date_range is \"2010-2012\" AND total_artpieces is 10.\n    # Rows with unique values will form a group of 1.\n    group_by({{ group_col }}, {{ value_col }}) %&gt;%\n    \n    # Create the new column.\n    mutate(\n      # `row_number()` gives the count (1, 2, 3...) for each row within the group.\n      # For a unique point, the group size is 1, so row_number() is 1, and we add 0.\n      # For two tied points, we get row numbers 1 and 2. We add (1-1)*residual and (2-1)*residual.\n      {{new_col_name}} := {{ value_col }} + (row_number() - 1) * residual\n    ) %&gt;%\n    \n    # It's good practice to ungroup after the operation is complete.\n    ungroup()\n}\n\n\nsubway_color &lt;- c(\n  \"#E70D42\",\n  \"#017DC6\",\n  \"#FFD203\",\n  \"#019964\",\n  \"#AF378A\",\n  \"#969798\"\n)\n\nlibrary(ggstance)\ndata2plot &lt;-\n  data2plot |&gt;\n  complete(art_date, art_material_category, fill = list(artpieces = 0)) |&gt;\n  mutate(year_group = floor((art_date - min(art_date)) / 3)) |&gt;\n  group_by(art_material_category, year_group) |&gt;\n  summarise(\n    art_date_range = if_else(\n      min(art_date) == max(art_date),\n      as.character(min(art_date)),\n      paste(min(art_date), max(art_date), sep = \"-\")\n    ),\n    total_artpieces = sum(artpieces),\n    .groups = \"drop\" # Drop the grouping structure after summarizing\n  )\n\ndata2plot &lt;-\n  data2plot |&gt;\n  mutate(\n    art_material_category = factor(\n      art_material_category,\n      levels = data2plot |&gt;\n        group_by(art_material_category) |&gt;\n        summarise(all = sum(total_artpieces)) |&gt;\n        arrange(desc(all)) |&gt;\n        pull(art_material_category)\n    )\n  )\n\ndata2plot2 &lt;-\n  data2plot |&gt;\n  add_vertical_spacing(\n    group_col = art_date_range,\n    value_col = total_artpieces,\n    order_col = art_material_category,\n    residual = 0.4\n  )\n\n\ndata2plot2 |&gt;\n  ggplot(aes(x = art_date_range, y = total_artpieces)) +\n  geom_point(aes(color = art_material_category)) +\n  geom_line(aes(color = art_material_category)) +\n  geom_line(\n    aes(\n      y = spaced_total,\n      color = art_material_category,\n      group = art_material_category\n    ),\n    linewidth = 1.8,\n    show.legend = FALSE\n  ) +\n  geom_point(color = 'black', size = 2) +\n  geom_point(color = 'white', size = 1.5) +\n  geom_segment(\n    aes(\n      x = art_date_range,\n      xend = art_date_range,\n      y = floor(spaced_total),\n      yend = spaced_total\n    ),\n    linewidth = 2.5,\n    lineend = \"round\"\n  ) +\n  geom_segment(\n    aes(\n      x = art_date_range,\n      xend = art_date_range,\n      y = floor(spaced_total),\n      yend = spaced_total\n    ),\n    linewidth = 1.7,\n    lineend = \"round\",\n    color = 'white'\n  ) +\n  labs(\n    color = NULL,\n    x = NULL,\n    y = \"New Artpieces\",\n    title = \"NYC Underground Art, really\",\n    subtitle = \"New artpieces by main material in MTA Arts & Design (formerly Arts for Transit)\",\n    caption = str_wrap(\n      \"NOTE This visualization offers a preliminary look at the data and may not capture the full complexity of the underlying reality. SOURCE #Tidytuesday 2025-06-17 GITHUB barreiro-r\",\n      width = 100,\n    ) |&gt;\n      str_replace_all(\"@\", \"\\n\")\n  ) +\n  scale_color_manual(values = subway_color) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1.3, vjust = 1.6))"
  },
  {
    "objectID": "posts/2025-07-08/notebook.html",
    "href": "posts/2025-07-08/notebook.html",
    "title": "The xkcd Color Survey Results",
    "section": "",
    "text": "Tip\n\n\n\n If this code was useful to you, please consider give it a little star."
  },
  {
    "objectID": "posts/2025-07-08/notebook.html#about-the-data",
    "href": "posts/2025-07-08/notebook.html#about-the-data",
    "title": "The xkcd Color Survey Results",
    "section": "About the Data",
    "text": "About the Data\n\n\n\n\n\n\nNote\n\n\n\n Check the data in TidyTuesday GitHub repository.\n\n\nIn 2010, the xkcd Color Survey asked hundreds of thousands of people to name colors they saw, revealing the different ways in which people perceive and label colors.\n\nColor is a really fascinating topic, especially since we’re taught so many different and often contradictory ideas about rainbows, different primary colors, and frequencies of light."
  },
  {
    "objectID": "posts/2025-07-08/notebook.html#initializing",
    "href": "posts/2025-07-08/notebook.html#initializing",
    "title": "The xkcd Color Survey Results",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(scales)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(shadowtext)\nlibrary(maps)\nlibrary(ggpattern)\nlibrary(ggrepel)\nlibrary(patchwork)\n\nfont_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 400, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n1.2 Set theme\n\ncool_gray0 &lt;- \"#323955\"\ncool_gray1 &lt;- \"#5a6695\"\ncool_gray2 &lt;- \"#7e89bb\"\ncool_gray3 &lt;- \"#a4aee2\"\ncool_gray4 &lt;- \"#cbd5ff\"\ncool_gray5 &lt;- \"#e7efff\"\n\ncool_red0 &lt;- \"#A31C44\"\ncool_red1 &lt;- \"#F01B5B\"\ncool_red2 &lt;- \"#F43E75\"\ncool_red3 &lt;- \"#E891AB\"\ncool_red4 &lt;- \"#FAC3D3\"\ncool_red5 &lt;- \"#FCE0E8\"\n\ntheme_set(\n  theme_minimal() +\n    theme(\n      # axis.line.x.bottom = element_line(color = '#474747', linewidth = .3),\n      # axis.ticks.x= element_line(color = '#474747', linewidth = .3),\n      # axis.line.y.left = element_line(color = '#474747', linewidth = .3),\n      # axis.ticks.y= element_line(color = '#474747', linewidth = .3),\n      # # panel.grid = element_line(linewidth = .3, color = 'grey90'),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      axis.ticks.length = unit(-0.15, \"cm\"),\n      plot.background = element_blank(),\n      plot.title.position = \"plot\",\n      plot.title = element_text(family = \"Ubuntu\", size = 18, face = 'bold'),\n      plot.caption = element_text(\n        size = 8,\n        color = cool_gray4,\n        margin = margin(20, 0, 0, 0),\n        hjust = 0\n      ),\n      plot.subtitle = element_text(\n        size = 9,\n        lineheight = 1.15,\n        margin = margin(5, 0, 15, 0)\n      ),\n      axis.title.x = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.title.y = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.text = element_text(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      legend.position = \"top\",\n      text = element_text(family = \"Ubuntu\", color = cool_gray1),\n      plot.margin = margin(25, 25, 25, 25)\n    )\n)\n\n\n\n1.3 Load this week’s data\n\nanswers &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-07-08/answers.csv')\ncolor_ranks &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-07-08/color_ranks.csv')\nusers &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-07-08/users.csv')"
  },
  {
    "objectID": "posts/2025-07-08/notebook.html#data-analysis",
    "href": "posts/2025-07-08/notebook.html#data-analysis",
    "title": "The xkcd Color Survey Results",
    "section": "2 Data analysis",
    "text": "2 Data analysis\n\nHow many anwsers by user?\n\nanswers |&gt; count(user_id, sort = TRUE, name = \"answers\") |&gt; count(answers, sort = TRUE)\n\n# A tibble: 183 × 2\n   answers     n\n     &lt;int&gt; &lt;int&gt;\n 1       1 17141\n 2       2 16036\n 3       3 14144\n 4       4 12141\n 5       5 10126\n 6       6  8234\n 7       7  6853\n 8       8  5709\n 9       9  4724\n10      10  3927\n# ℹ 173 more rows\n\n\nVery sparse.\n\n\nHow often the same color was classified?\n\nanswers |&gt; count(hex, sort = TRUE, name = \"answers\") |&gt; count(answers, sort = TRUE)\n\n# A tibble: 5 × 2\n  answers      n\n    &lt;int&gt;  &lt;int&gt;\n1       1 965244\n2       2  44042\n3       3   1566\n4       4     45\n5       5      1"
  },
  {
    "objectID": "posts/2025-07-08/notebook.html#transform-data-for-plotting",
    "href": "posts/2025-07-08/notebook.html#transform-data-for-plotting",
    "title": "The xkcd Color Survey Results",
    "section": "3 Transform Data for Plotting",
    "text": "3 Transform Data for Plotting\n\nlibrary(plotwidgets)\ndata2plot &lt;-\n  answers |&gt;\n  filter(user_id %in% (users |&gt; filter(spam_prob &lt; 0.001) |&gt; pull(user_id))) |&gt;\n  left_join(\n    color_ranks |&gt;\n      rename(rank_hex = hex) |&gt;\n      rowwise() |&gt;\n      mutate(hsl_rank = list(col2hsl(rank_hex))) |&gt;\n      ungroup(),\n    by = 'rank'\n  ) |&gt;\n  rowwise() |&gt;\n  mutate(hsl = list(col2hsl(hex))) |&gt;\n  ungroup()\n\n\ndata2plot &lt;-\n  data2plot |&gt;\n  hoist(hsl, h = 1, s = 2, l = 3) |&gt;\n  hoist(hsl_rank, h_rank = 1, s_rank = 2, l_rank = 3)\n\n\ndata2plot2 &lt;-\n  color_ranks |&gt;\n  rowwise() |&gt;\n  mutate(hsl_rank = list(col2hsl(hex))) |&gt;\n  ungroup() |&gt;\n  hoist(hsl_rank, h = 1, s = 2, l = 3) |&gt;\n  filter(rank %in% data2plot$rank)"
  },
  {
    "objectID": "posts/2025-07-08/notebook.html#time-to-plot",
    "href": "posts/2025-07-08/notebook.html#time-to-plot",
    "title": "The xkcd Color Survey Results",
    "section": "4 Time to plot!",
    "text": "4 Time to plot!\n\n4.1 Before\n\n# Main\np1 &lt;-\n  data2plot |&gt;\n  left_join(users, by = 'user_id') |&gt;\n  filter(colorblind == 0) |&gt;\n  filter(spam_prob &lt; 0.001) |&gt;\n  ggplot(aes(x = h, y = -l)) +\n  annotate(geom = 'segment', x = 0, xend = Inf, y = 0, color = cool_gray5) +\n  geom_point(aes(color = hex), size = 0.001) +\n  geom_point(data = data2plot2, aes(color = 'white'), size = 5.5) +\n  geom_point(data = data2plot2, aes(color = hex), size = 4.5) +\n  geom_text_repel(\n    data = data2plot2,\n    aes(label = str_to_sentence(color)),\n    family = \"Ubuntu\",\n    color = cool_gray0,\n    size = 3,\n    nudge_x = 5,\n    nudge_y = .1,\n    direction = \"y\",\n    hjust = \"center\",\n    bg.color = 'white',\n    segment.size = 0,\n    bg.r = 0.2\n  ) +\n  scale_color_identity() +\n  scale_y_continuous(limits = c(-1, 0)) +\n  coord_polar() +\n  labs(\n    title = \"Hue Knew? Your Purple Isn't Mine.\",\n    subtitle = str_wrap(\n      \"In 2010, the xkcd Color Survey asked hundreds of thousands of people to name colors they saw, revealing the different ways in which people perceive and label colors.\",\n      width = 90\n    ),\n    pattern_spacing = NULL,\n    y = NULL,\n    x = NULL,\n    caption = str_wrap(\n      \"NOTE This visualization offers a preliminary look at the data and may not capture the full complexity of the underlying reality. SOURCE #Tidytuesday 2025-06-17 GITHUB barreiro-r\",\n      width = 110,\n    ) |&gt;\n      str_replace_all(\"@\", \"\\n\")\n  ) +\n  theme(\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    plot.margin = margin(0, 0, 0, 0)\n  )\n\n# Faceted (copied only because of laziness)\np2 &lt;- data2plot |&gt;\n  left_join(users, by = 'user_id') |&gt;\n  filter(colorblind == 0) |&gt;\n  filter(spam_prob &lt; 0.001) |&gt;\n  ggplot(aes(x = h, y = -l)) +\n  annotate(geom = 'segment', x = 0, xend = Inf, y = 0, color = cool_gray5) +\n  geom_point(aes(color = hex), size = 0.001) +\n  geom_point(data = data2plot2, aes(color = 'white'), size = 3.5) +\n  geom_point(data = data2plot2, aes(color = hex), size = 2.5) +\n  geom_text_repel(\n    data = data2plot2,\n    aes(label = str_to_sentence(color)),\n    family = \"Ubuntu\",\n    color = cool_gray0,\n    size = 2,\n    nudge_x = 5,\n    nudge_y = .1,\n    direction = \"y\",\n    hjust = \"center\",\n    bg.color = 'white',\n    segment.size = 0,\n    bg.r = 0.2\n  ) +\n  scale_color_identity() +\n  scale_y_continuous(limits = c(-1, 0)) +\n  coord_polar() +\n  facet_wrap(~color, nrow = 2) +\n  theme(\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    strip.text = element_blank(),\n    plot.margin = margin(0, 0, 0, 0)\n  )\n\n# Plot both\np1 + p2"
  },
  {
    "objectID": "posts/2025-06-24/notebook.html",
    "href": "posts/2025-06-24/notebook.html",
    "title": "Measles cases across the world",
    "section": "",
    "text": "Note\n\n\n\n Check data in TidyTuesday GitHub repository.\n\n\nThis week we are exploring measles and rubella cases across the world. This data was downloaded from the World Health Organisation Provisional monthly measles and rubella data on 2025-06-12.\n\nPlease note that all data contained within is provisional. The number of cases of measles and rubella officially reported by a WHO Member State is only available by July of each year (through the joint WHO UNICEF annual data collection exercise). If any numbers from this provisional data are quoted, they should be properly sourced with a date (i.e. “provisional data based on monthly data reported to WHO (Geneva) as of June 2025”). For official data from 1980, please visit our website: https://immunizationdata.who.int/global/wiise-detail-page/measles-reported-cases-and-incidence"
  },
  {
    "objectID": "posts/2025-06-24/notebook.html#about-the-data",
    "href": "posts/2025-06-24/notebook.html#about-the-data",
    "title": "Measles cases across the world",
    "section": "",
    "text": "Note\n\n\n\n Check data in TidyTuesday GitHub repository.\n\n\nThis week we are exploring measles and rubella cases across the world. This data was downloaded from the World Health Organisation Provisional monthly measles and rubella data on 2025-06-12.\n\nPlease note that all data contained within is provisional. The number of cases of measles and rubella officially reported by a WHO Member State is only available by July of each year (through the joint WHO UNICEF annual data collection exercise). If any numbers from this provisional data are quoted, they should be properly sourced with a date (i.e. “provisional data based on monthly data reported to WHO (Geneva) as of June 2025”). For official data from 1980, please visit our website: https://immunizationdata.who.int/global/wiise-detail-page/measles-reported-cases-and-incidence"
  },
  {
    "objectID": "posts/2025-06-24/notebook.html#initializing",
    "href": "posts/2025-06-24/notebook.html#initializing",
    "title": "Measles cases across the world",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(scales)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(shadowtext)\nlibrary(maps)\n\nfont_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 400, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n1.2 Set theme\n\ncool_gray0 &lt;- \"#323955\"\ncool_gray1 &lt;- \"#5a6695\"\ncool_gray2 &lt;- \"#7e89bb\"\ncool_gray3 &lt;- \"#a4aee2\"\ncool_gray4 &lt;- \"#cbd5ff\"\ncool_gray5 &lt;- \"#e7efff\"\n\ntheme_set(\n  theme_minimal() +\n    theme(\n      # axis.line.x.bottom = element_line(color = '#474747', linewidth = .3),\n      # axis.ticks.x= element_line(color = '#474747', linewidth = .3),\n      # axis.line.y.left = element_line(color = '#474747', linewidth = .3),\n      # axis.ticks.y= element_line(color = '#474747', linewidth = .3),\n      # # panel.grid = element_line(linewidth = .3, color = 'grey90'),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      axis.ticks.length = unit(-0.15, \"cm\"),\n      plot.background = element_blank(),\n      plot.title.position = \"plot\",\n      plot.title = element_text(family = \"Ubuntu\", size = 18, face = 'bold'),\n      plot.caption = element_text(\n        size = 8,\n        color = cool_gray4,\n        margin = margin(20, 0, 0, 0),\n        hjust = 0\n      ),\n      plot.subtitle = element_text(\n        size = 9,\n        lineheight = 1.15,\n        margin = margin(5, 0, 15, 0)\n      ),\n      axis.title.x = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.title.y = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.text = element_text(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      legend.position = \"top\",\n      text = element_text(family = \"Ubuntu\", color = cool_gray1),\n      plot.margin = margin(25, 25, 25, 25)\n    )\n)\n\n\n\n1.3 Load this week’s data\n\ncases_month &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-24/cases_month.csv')\ncases_year &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-24/cases_year.csv')"
  },
  {
    "objectID": "posts/2025-06-24/notebook.html#data-analysis",
    "href": "posts/2025-06-24/notebook.html#data-analysis",
    "title": "Measles cases across the world",
    "section": "2 Data analysis",
    "text": "2 Data analysis\n\nHow many country and years?\n\nn_years &lt;- cases_year |&gt; distinct(year) |&gt; nrow()\nn_countries &lt;- cases_year |&gt; distinct(country) |&gt; nrow()\nn_countries_year &lt;- cases_year |&gt; distinct(year, country) |&gt; nrow() \n\nprint(glue('There are {n_countries} countries in {n_years} years.'))\n\nThere are 194 countries in 14 years.\n\nprint(glue('There are {n_countries_year} countries in {n_years} years.'))\n\nThere are 2382 countries in 14 years.\n\nprint(glue('It was expected {n_countries} * {n_years} ({comma(n_countries * n_years)}) records and found {comma(n_countries_year)} ({percent(n_countries_year / (n_countries * n_years))}).'))\n\nIt was expected 194 * 14 (2,716) records and found 2,382 (88%).\n\n\n\n\nSeasonality\n\ncases_month |&gt;\n  filter(region == 'EUR') |&gt;\n  group_by(year, month) |&gt;\n  summarize(\n    mean_melases = mean(measles_total, na.rm = TRUE),\n    sd = sd(measles_total, na.rm = TRUE)\n  ) |&gt;\n  ggplot(aes(x = month, y = mean_melases, color = year)) +\n  geom_point() +\n  geom_line(aes(group = year))\n\n\n\n\n\n\n\n\n\n\nCases by year\n\ncases_year |&gt;\n  group_by(year) |&gt;\n  summarize(\n    sum_cases = sum(measles_total, na.rm = TRUE),\n  ) |&gt;\n  ggplot(aes(x = year, y = sum_cases)) +\n  geom_point(color = cool_gray0) +\n  geom_text(aes(label = year)) +\n  geom_line(color = cool_gray0)\n\n\n\n\n\n\n\n\n\n\nGlobal Trends\n\nworld &lt;- map_data(\"world\") |&gt;\n  left_join(read_csv('region2iso3.csv'), by = 'region')\n\nworld_plot_data &lt;- \n  world |&gt;\n  left_join(\n    cases_year |&gt;\n      select(iso3, measles_total, year),\n    by = 'iso3'\n  )\nggplot() +\n  geom_polygon(data = world_plot_data, aes(x = long, y = lat, group = group, fill = measles_total)) +\n  coord_fixed(1.2) +\n  facet_wrap(~year)\n\n\n\n\n\n\n\n\n\n\nWhat happend in Madagascar in 2019?\n\ncases_year |&gt; \n  filter(year == 2019) |&gt;\n  mutate(is_madagascar = country == 'Madagascar') |&gt;\n  group_by(is_madagascar) |&gt;\n  summarise(sum_measles = sum(measles_total))\n\n# A tibble: 2 × 2\n  is_madagascar sum_measles\n  &lt;lgl&gt;               &lt;dbl&gt;\n1 FALSE              328110\n2 TRUE               213291"
  },
  {
    "objectID": "posts/2025-06-24/notebook.html#transform-data-for-plotting",
    "href": "posts/2025-06-24/notebook.html#transform-data-for-plotting",
    "title": "Measles cases across the world",
    "section": "3 Transform Data for Plotting",
    "text": "3 Transform Data for Plotting\n\ncases_data &lt;-\n  cases_year |&gt;\n  filter(year == 2019) |&gt;\n  mutate(is_madagascar = country == 'Madagascar') |&gt;\n  mutate(measles_by_1m = measles_total / total_population * 10^6) |&gt;\n  select(iso3, country, is_madagascar, measles_total, measles_by_1m) |&gt;\n  arrange(-measles_by_1m)\n\nmap_data &lt;-\n  world |&gt; left_join(cases_data, by = 'iso3')"
  },
  {
    "objectID": "posts/2025-06-24/notebook.html#time-to-plot",
    "href": "posts/2025-06-24/notebook.html#time-to-plot",
    "title": "Measles cases across the world",
    "section": "4 Time to plot!",
    "text": "4 Time to plot!\n\n4.1 Before\n\nmap_data |&gt;\n  ggplot() +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = measles_total)) +\n  coord_fixed(1.2) +\n  theme_grey()\n\n\n\n\n\n\n\n\n\n# Circular Plot\ndata2plot &lt;-\n  cases_data |&gt;\n  group_by(is_madagascar) |&gt;\n  summarise(total = sum(measles_total))\n\np_circular &lt;-\n  data2plot |&gt;\n  ggplot(aes(y = total)) +\n  geom_col(aes(x = 1, fill = is_madagascar)) +\n  annotate(\n    geom = 'text',\n    x = -1,\n    y = 0,\n    label = percent(\n      data2plot |&gt; filter(is_madagascar) |&gt; pull(total) / sum(data2plot$total)\n    ),\n    family = 'Ubuntu',\n    size = 3,\n    color = cool_gray1,\n    vjust = .5,\n    fontface = 'bold'\n  ) +\n  coord_radial(theta = 'y', expand = FALSE) +\n  scale_fill_manual(values = c(`TRUE` = \"#F01B5B\", `FALSE` = cool_gray5)) +\n  theme(\n    # Remove axis text\n    axis.text = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    legend.position = 'bottom',\n    plot.margin = margin(0, 0, 0, 0)\n  ) +\n  guides(fill = 'none')\n\n# Top bar plots\np_bars &lt;-\n  cases_data |&gt;\n  slice_max(measles_by_1m, n = 5) |&gt;\n  ggplot(aes(x = measles_by_1m, y = reorder(country, measles_by_1m))) +\n  geom_segment(\n    aes(x = 0, xend = measles_by_1m, color = is_madagascar),\n    lineend = 'round',\n    linewidth = 2,\n    show.legend = FALSE\n  ) +\n  scale_x_continuous(label = comma, breaks = c(0, 3500, 7000)) +\n  scale_color_manual(values = c(`TRUE` = \"#F01B5B\", `FALSE` = cool_gray1)) +\n  labs(x = NULL, y = NULL, title = \"Total measles cases (per million)\") +\n  theme(plot.title = element_text(size = 8), plot.margin = margin(0, 0, 0, 0))\n\n\nmap_data |&gt;\n  ggplot() +\n  geom_polygon(data = subset(map_data, is_madagascar), aes(\n    x = long,\n    y = lat,\n  ), color = '#FFD8E4', fill = NA, linewidth = 6) +\n  geom_polygon(aes(\n    x = long,\n    y = lat,\n    group = group,\n    fill = measles_total / 1000000\n  )) +\n  coord_fixed(1.2) +\n  scale_fill_gradient(\n    low = '#F5F8FF',\n    high = cool_gray1,\n    na.value = 'grey98',\n    breaks = pretty_breaks(n = 4)\n  ) +\n  theme(\n    plot.title = element_text(size = 14),\n    legend.title.position = 'top',\n    legend.position = c(0, 0),\n    legend.justification = c(0, 0),\n    legend.direction = 'horizontal',\n    # Remove axis text\n    axis.text = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n  ) +\n  annotation_custom(\n    xmin = 60,\n    xmax = 110,\n    ymin = 0,\n    ymax = -80,\n    grob = ggplotGrob(p_circular)\n  ) +\n  annotation_custom(\n    xmin = 55,\n    xmax = 190,\n    ymin = 25,\n    ymax = 80,\n    grob = ggplotGrob(p_bars)\n  ) +\n  annotate(\n    geom = 'text',\n    x = 65,\n    y = 0,\n    label = str_wrap(\n      \"In that year almost 40% of all measles cases worldwide were registered in Madagascar\",\n      width = 30\n    ),\n    hjust = 0,\n    family = 'Ubuntu',\n    size = 3,\n    color = cool_gray1\n  ) +\n  labs(\n    title = \"In 2019, a huge measles outbreak hit Madagascar\",\n    fill = \"Registered measles cases (M)\",\n    y = NULL,\n    caption = str_wrap(\n      \"NOTE This visualization offers a preliminary look at the data and may not capture the full complexity of the underlying reality. SOURCE #Tidytuesday 2025-06-17 GITHUB barreiro-r\",\n      width = 110,\n    ) |&gt;\n      str_replace_all(\"@\", \"\\n\")\n  ) +\n  guides(\n    fill = guide_colorbar(\n      barwidth = 13,\n      barheight = .3,\n      title.position = 'top'\n    )\n  )"
  },
  {
    "objectID": "posts/2025-06-10/notebook.html",
    "href": "posts/2025-06-10/notebook.html",
    "title": "U.S. Judges and the historydata R package",
    "section": "",
    "text": "Note\n\n\n\n Check data in TidyTuesday GitHub repository.\n\n\nThis week we’re exploring U. S. judge data from the {historydata} R package! This package is looking for a new maintainer. If you are interested in this dataset (and other datasets of historical information), please consider volunteering! Check out the rOpenSci Blog What Does It Mean to Maintain a Package? by Maëlle Salmon for more information.\nNote: The package help for this dataset links to a particular PDF with some information about judgeships, but the actual source data can be found at Biographical Directory of Article III Federal Judges: Export on the Federal Judicial Center website.\n\nThis dataset contains information about the appointments and careers of all federal judges in United States history since 1789. It includes judges who “judges presidentially appointed during good behavior who have served since 1789 on the U.S. District Courts, the U.S. Courts of Appeals, the Supreme Court of the United States, the former U.S. Circuit Courts, and the federal judiciary’s courts of special jurisdiction.” Some of the unnecessary information from the source has been excluded."
  },
  {
    "objectID": "posts/2025-06-10/notebook.html#about-the-data",
    "href": "posts/2025-06-10/notebook.html#about-the-data",
    "title": "U.S. Judges and the historydata R package",
    "section": "",
    "text": "Note\n\n\n\n Check data in TidyTuesday GitHub repository.\n\n\nThis week we’re exploring U. S. judge data from the {historydata} R package! This package is looking for a new maintainer. If you are interested in this dataset (and other datasets of historical information), please consider volunteering! Check out the rOpenSci Blog What Does It Mean to Maintain a Package? by Maëlle Salmon for more information.\nNote: The package help for this dataset links to a particular PDF with some information about judgeships, but the actual source data can be found at Biographical Directory of Article III Federal Judges: Export on the Federal Judicial Center website.\n\nThis dataset contains information about the appointments and careers of all federal judges in United States history since 1789. It includes judges who “judges presidentially appointed during good behavior who have served since 1789 on the U.S. District Courts, the U.S. Courts of Appeals, the Supreme Court of the United States, the former U.S. Circuit Courts, and the federal judiciary’s courts of special jurisdiction.” Some of the unnecessary information from the source has been excluded."
  },
  {
    "objectID": "posts/2025-06-10/notebook.html#initializing",
    "href": "posts/2025-06-10/notebook.html#initializing",
    "title": "U.S. Judges and the historydata R package",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(scales)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(shadowtext)\n\nfont_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 400, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n1.2 Set theme\n\ntheme_set(\n  theme_minimal() +\n    theme(\n      # axis.line.x.bottom = element_line(color = '#474747', linewidth = .3),\n      # axis.ticks.x= element_line(color = '#474747', linewidth = .3),\n      # axis.line.y.left = element_line(color = '#474747', linewidth = .3),\n      # axis.ticks.y= element_line(color = '#474747', linewidth = .3),\n      # # panel.grid = element_line(linewidth = .3, color = 'grey90'),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      axis.ticks.length = unit(-0.15, \"cm\"),\n      plot.background = element_blank(),\n      plot.title.position = \"plot\",\n      plot.title = element_text(family = \"Ubuntu\", size = 18, face = 'bold'),\n      plot.caption = element_text(\n        size = 8,\n        color = '#aebae0',\n        margin = margin(20, 0, 0, 0),\n        hjust = 0\n      ),\n      plot.subtitle = element_text(\n        size = 9,\n        lineheight = 1.15,\n        margin = margin(5, 0, 15, 0)\n      ),\n      axis.title.x = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = \"#374571\"\n      ),\n      axis.title.y = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = \"#374571\"\n      ),\n      axis.text = element_text(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = \"#374571\"\n      ),\n      legend.position = \"top\",\n      text = element_text(family = \"Ubuntu\", color = \"#374571\"),\n      plot.margin = margin(25, 25, 25, 25)\n    )\n)\n\n\n\n1.3 Load this week’s data\n\njudges_appointments &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-10/judges_appointments.csv')\njudges_people &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-10/judges_people.csv')"
  },
  {
    "objectID": "posts/2025-06-10/notebook.html#data-analysis",
    "href": "posts/2025-06-10/notebook.html#data-analysis",
    "title": "U.S. Judges and the historydata R package",
    "section": "2 Data analysis",
    "text": "2 Data analysis\n\nHow diverse is the judges?\n\njudges_people |&gt; count(gender, race) |&gt; pivot_wider(names_from = gender, values_from = n)\n\n# A tibble: 12 × 3\n   race                     F     M\n   &lt;chr&gt;                &lt;int&gt; &lt;int&gt;\n 1 African Am./Hispanic     1     1\n 2 African American        51   150\n 3 American Indian          1     2\n 4 Asian American           9    22\n 5 Hispanic                29    87\n 6 Hispanic/Asian Am.       1    NA\n 7 White                  293  2871\n 8 White/Asian Am.          1    NA\n 9 &lt;NA&gt;                     3     6\n10 Hispanic/White          NA     1\n11 Pac. Isl./Asian Am.     NA     2\n12 Pac. Isl./White         NA     1\n\nmain_r &lt;- c(\"African American\", \"Asian American\", \"Hispanic\", \"White\")\n\nThere are three main race classifications: African American, Asian American, Hispanic and White; We can classify other as “Mixed”, maybe.\n\n\nHow complete is the nomination and termination date?\n\njudges_appointments |&gt; count(is.na(judge_id), is.na(nomination_date), is.na(termination_date))\n\n# A tibble: 4 × 4\n  `is.na(judge_id)` `is.na(nomination_date)` `is.na(termination_date)`     n\n  &lt;lgl&gt;             &lt;lgl&gt;                    &lt;lgl&gt;                     &lt;int&gt;\n1 FALSE             FALSE                    FALSE                      2675\n2 FALSE             FALSE                    TRUE                       1367\n3 FALSE             TRUE                     FALSE                       153\n4 FALSE             TRUE                     TRUE                          7\n\n\nAre NAs in termination_date judges with active appointments or is it missing data?\n\nmissing_termination_min &lt;-\n  judges_appointments |&gt;\n  filter(is.na(termination_date)) |&gt;\n  filter(!is.na(nomination_date)) |&gt;\n  pull(nomination_date) |&gt;\n  as.Date(format = \"%m/%d/%Y\") |&gt;\n  min()\n\nall_time_min &lt;- \n  judges_appointments |&gt;\n  filter(!is.na(nomination_date)) |&gt;\n  pull(nomination_date) |&gt;\n  as.Date(format = \"%m/%d/%Y\") |&gt;\n  min()\n\nThe all time earliest nomination is 1789-09-24 and the earliest missing termination date is 1962-06-23. So it would make sense it is still active appointments."
  },
  {
    "objectID": "posts/2025-06-10/notebook.html#transform-data-for-plotting",
    "href": "posts/2025-06-10/notebook.html#transform-data-for-plotting",
    "title": "U.S. Judges and the historydata R package",
    "section": "3 Transform Data for Plotting",
    "text": "3 Transform Data for Plotting\n\n3.1 Creating table of authors with most records for each language\n\nmax_date &lt;- \n  judges_appointments |&gt; \n  filter(!is.na(termination_date), !is.na(nomination_date)) |&gt;\n  rowwise() |&gt;\n  mutate(all_dates = list(list(nomination_date, termination_date))) |&gt;\n  ungroup() |&gt;\n  select(all_dates) |&gt;\n  unnest(all_dates) |&gt;\n  unnest(all_dates) |&gt;\n  pull(all_dates) |&gt;\n  as.Date(format = \"%m/%d/%Y\") |&gt;\n  max() |&gt; format(format = \"%d/%m/%Y\")\n\njudges_characteristics &lt;- \n  judges_people |&gt; \n  select(judge_id, gender, race) |&gt; \n  mutate(race = if_else(race %in% main_r, race, \"Mixed\"))\n\ndata2plot &lt;- \n  judges_appointments |&gt;\n  filter(!is.na(nomination_date)) |&gt;\n  mutate(termination_date = if_else(is.na(termination_date), max_date, termination_date)) |&gt;\n  mutate(nomination_date = str_replace(nomination_date, \"/../\", \"/01/\")) |&gt;\n  mutate(termination_date = str_replace(termination_date, \"/../\", \"/01/\")) |&gt;\n  select(judge_id, termination_date, nomination_date) |&gt;\n  mutate(nomination_date = as.Date(nomination_date, format = \"%m/%d/%Y\")) |&gt;\n  mutate(termination_date = as.Date(termination_date, format = \"%m/%d/%Y\")) |&gt;\n  rowwise() |&gt;\n  mutate(date = list(seq(nomination_date, termination_date, by = \"month\"))) |&gt;\n  unnest(date) |&gt;\n  ungroup() |&gt;\n  left_join(judges_characteristics, by = 'judge_id') |&gt;\n  group_by(date) |&gt;\n  count(gender, race)"
  },
  {
    "objectID": "posts/2025-06-10/notebook.html#time-to-plot",
    "href": "posts/2025-06-10/notebook.html#time-to-plot",
    "title": "U.S. Judges and the historydata R package",
    "section": "4 Time to plot!",
    "text": "4 Time to plot!\n\n4.1 Before\n\ndata2plot |&gt; \n  ggplot(aes(x = date, y = n)) +\n  geom_col(aes(fill = str_c(gender, race, sep = ' '))) +\n  theme_gray() +\n  labs(\n    title = 'Judges Diversity',\n    subtitle = '-')\n\n\n\n\n\n\n\n\n\nmy_color_pallet &lt;- c(\n  \"African American\" = \"#CF251A\",\n  \"Asian American\" = \"#F09A00\",\n  \"Hispanic\" = \"#1F7611\",\n  \"White\" = \"#337EE4\",\n  \"Mixed\" = \"#303381\"\n)\n\ndata2plot2 &lt;-\n  data2plot |&gt;\n  mutate(n = if_else(gender == 'F', -n, n)) |&gt;\n  group_by(gender, race) |&gt;\n  arrange(gender, race, date) |&gt;\n  mutate(\n    mean_n = zoo::rollmeanr(n, k = 12, fill = NA) # k=3 for 3 periods\n  ) |&gt;\n  ungroup()\n\np1 &lt;-\n  data2plot2 |&gt;\n  ggplot(aes(x = date, y = mean_n)) +\n  annotate(\n    geom = 'text',\n    x = as.Date('1770-09-01'),\n    y = 500,\n    label = 'Male Judges →',\n    hjust = 0.5,\n    vjust = 0.5,\n    size = 3,\n    color = \"#374571\",\n    angle = 90,\n  ) +\n  annotate(\n    geom = 'text',\n    x = as.Date('1770-09-01'),\n    y = -500,\n    label = '← Female Judges',\n    hjust = 0.5,\n    vjust = 0.5,\n    size = 3,\n    color = \"#374571\",\n    angle = 90,\n  ) +\n  geom_text(\n    data = tibble(guide_value = seq(-1000, 1000, 250)),\n    x = as.Date('1776-09-01'),\n    aes(label = abs(guide_value), y = guide_value),\n    hjust = 0,\n    vjust = 0.5,\n    size = 2.5,\n    color = \"#374571\"\n  ) +\n  stat_smooth(\n    aes(fill = race, group = str_c(race, gender)),\n    se = FALSE,\n    geom = 'area',\n    alpha = .2\n  ) +\n  geom_smooth(\n    aes(group = str_c(race, gender)),\n    se = FALSE,\n    color = 'white',\n    span = .2,\n    linewidth = 1.5\n  ) +\n  geom_smooth(\n    aes(color = race, group = str_c(race, gender)),\n    se = FALSE,\n    span = .2,\n    linewidth = 0.5\n  ) +\n  scale_x_date(expand = c(0.05, 0, 0, 0)) +\n  scale_y_continuous(expand = c(0.05, 0, 0.05, 0), limits = c(-1000, 1000)) +\n  annotate(\n    geom = 'segment',\n    y = 0,\n    x = min(data2plot2$date),\n    xend = max(data2plot2$date),\n    color = 'white',\n    linewidth = 1.5\n  ) +\n  annotate(\n    geom = 'segment',\n    y = 0,\n    x = min(data2plot2$date),\n    xend = max(data2plot2$date),\n    color = '#374571',\n    linewidth = 0.25,\n    linetype = '11'\n  ) +\n  # theme(legend.position = c(0.05, 0.99), legend.justification = c(0, 1)) +\n  scale_color_manual(values = my_color_pallet) +\n  scale_fill_manual(values = my_color_pallet) +\n  labs(x = NULL, y = \"Number of judges\", color = NULL, fill = NULL)\n\np2 &lt;- p1 +\n  coord_cartesian(\n    expand = FALSE,\n    ylim = c(-100, 100),\n    xlim = c(as.Date(\"1950-01-01\"), as.Date(\"2014-10-01\"))\n  ) +\n  theme(\n    plot.margin = margin(0, 0, 0, 0),\n    legend.position = 'none',\n    panel.border = element_rect(color = '#aebae0', linewidth = .5, fill = NA)\n  ) +\n  annotate(\n    geom = 'text',\n    label = '2014',\n    x = as.Date(\"2014-01-01\"),\n    y = -95,\n    hjust = 1,\n    vjust = 0,\n    size = 2.5,\n    color = \"#374571\"\n  ) +\n  annotate(\n    geom = 'text',\n    label = '1950',\n    x = as.Date(\"1950-09-01\"),\n    y = -95,\n    hjust = 0,\n    vjust = 0,\n    size = 2.5,\n    color = \"#374571\"\n  ) +\n  labs(x = NULL, y = NULL) +\n  theme(axis.text.x = element_blank()) +\n  scale_y_continuous(label = abs)\n\np1 +\n  theme(axis.text.y = element_blank(), axis.title.y = element_blank()) +\nannotation_custom(\n  xmin = as.Date(\"1825-01-01\"),\n  xmax = as.Date(\"1900-10-01\"),\n  ymin = 300,\n  ymax = 1000,\n  grob = ggplotGrob(p2)\n) +\n  labs(\n    title = \"US Judge Appointments\",\n    subtitle = \"Number of judges by race and gender\",\n    caption = str_wrap(\"NOTE This visualization offers a preliminary look at the data and may not capture the full complexity of the underlying reality.@SOURCE #Tidytuesday 2025-06-10@GITHUB barreiro-r\", width = 110) |&gt; str_replace_all(\"@\",\"\\n\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nI tryed to use ggforce::zoom_panel() and {ggmagnify} but both didn’t work."
  },
  {
    "objectID": "posts/2025-05-27/notebook.html",
    "href": "posts/2025-05-27/notebook.html",
    "title": "Dungeons and Dragons Monsters (2024)",
    "section": "",
    "text": "This week we’re exploring monsters from the Dungeons & Dragons System Reference Document! After the popularity of our Dungeons and Dragons Spells (2024), we thought it might be fun to explore the freely available monsters from the 2024 update.\n\nEvery monster is a font of adventure. In this bestiary of Dungeons & Dragons monsters, you’ll discover the weird, the whimsical, the majestic, and the macabre. Choose your favorites, and make them part of your D&D play."
  },
  {
    "objectID": "posts/2025-05-27/notebook.html#about-the-data",
    "href": "posts/2025-05-27/notebook.html#about-the-data",
    "title": "Dungeons and Dragons Monsters (2024)",
    "section": "",
    "text": "This week we’re exploring monsters from the Dungeons & Dragons System Reference Document! After the popularity of our Dungeons and Dragons Spells (2024), we thought it might be fun to explore the freely available monsters from the 2024 update.\n\nEvery monster is a font of adventure. In this bestiary of Dungeons & Dragons monsters, you’ll discover the weird, the whimsical, the majestic, and the macabre. Choose your favorites, and make them part of your D&D play."
  },
  {
    "objectID": "posts/2025-05-27/notebook.html#initializing",
    "href": "posts/2025-05-27/notebook.html#initializing",
    "title": "Dungeons and Dragons Monsters (2024)",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(scales)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(shadowtext)\n\nfont_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 400, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n1.2 Set theme\n\ntheme_set(\n    theme_minimal() +\n    theme(\n    # axis.line.x.bottom = element_line(color = '#474747', linewidth = .3),\n    # axis.ticks.x= element_line(color = '#474747', linewidth = .3),\n    # axis.line.y.left = element_line(color = '#474747', linewidth = .3),\n    # axis.ticks.y= element_line(color = '#474747', linewidth = .3),\n    # # panel.grid = element_line(linewidth = .3, color = 'grey90'),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.ticks.length = unit(-0.15, \"cm\"),\n    plot.background = element_blank(),\n    plot.title.position = \"plot\",\n    plot.title = element_text(family = \"Ubuntu\", size = 18, face = 'bold'),\n    plot.caption = element_text(size = 8, color = 'grey60',margin = margin(20,0,0,0)),\n    plot.subtitle = element_text(size = 9,lineheight = 1.15, margin = margin(5,0,15,0)),\n    axis.title.x = element_markdown(family = \"Ubuntu\", hjust = .5, size = 8, color = \"grey40\"),\n    axis.title.y = element_markdown(family = \"Ubuntu\", hjust = .5, size = 8, color = \"grey40\"),\n    axis.text = element_text(family = \"Ubuntu\", hjust = .5, size = 8, color = \"grey40\"),\n    legend.position = \"top\",\n    text = element_text(family = \"Ubuntu\"),\n    plot.margin = margin(25, 25, 25, 25))\n)\n\n\n\n1.3 Load this week’s data\n\ntuesdata &lt;- tidytuesdayR::tt_load(2025, week = 21)\nmonsters &lt;- tuesdata$monsters"
  },
  {
    "objectID": "posts/2025-05-27/notebook.html#data-analysis",
    "href": "posts/2025-05-27/notebook.html#data-analysis",
    "title": "Dungeons and Dragons Monsters (2024)",
    "section": "2 Data analysis",
    "text": "2 Data analysis\nHow many types are there?\n\nmonsters |&gt; count(type)\n\n# A tibble: 16 × 2\n   type                     n\n   &lt;chr&gt;                &lt;int&gt;\n 1 Aberration               9\n 2 Beast                   84\n 3 Celestial               13\n 4 Construct               10\n 5 Dragon                  45\n 6 Elemental               17\n 7 Fey                     15\n 8 Fiend                   29\n 9 Giant                   10\n10 Humanoid                26\n11 Monstrosity             37\n12 Ooze                     4\n13 Plant                    6\n14 Swarm of Tiny Beasts     6\n15 Swarm of Tiny Undead     1\n16 Undead                  18\n\n\nHow many alignment are there?\n\nmonsters |&gt; count(alignment) \n\n# A tibble: 10 × 2\n   alignment           n\n   &lt;chr&gt;           &lt;int&gt;\n 1 Chaotic Evil       45\n 2 Chaotic Good       11\n 3 Chaotic Neutral     7\n 4 Lawful Evil        35\n 5 Lawful Good        20\n 6 Lawful Neutral      3\n 7 Neutral            50\n 8 Neutral Evil       28\n 9 Neutral Good        6\n10 Unaligned         125"
  },
  {
    "objectID": "posts/2025-05-27/notebook.html#transform-data-for-plotting",
    "href": "posts/2025-05-27/notebook.html#transform-data-for-plotting",
    "title": "Dungeons and Dragons Monsters (2024)",
    "section": "3 Transform Data for Plotting",
    "text": "3 Transform Data for Plotting\n\n3.1 Mean Stats by Type\nAnd filter low count (&lt;10) types\n\ndata2plot &lt;- \n  monsters |&gt;\n  select(alignment, type, str, dex, con, int, wis, cha) |&gt;\n  filter(alignment != \"Unaligned\") |&gt;\n  mutate(\n    alignment = if_else(\n      alignment == 'Neutral',\n      true = 'Neutral Neutral',\n      false = alignment\n    )\n  ) |&gt;\n  group_by(type) |&gt;\n  filter(n() &gt; 10) |&gt;\n  summarize(across(where(is.numeric), mean, na.rm = TRUE)) |&gt;\n  ungroup()\n\n\n\n3.2 Transform axis\nThank you Gemini\n\n# Function to calculate (x,y) coordinates for radar chart axes\n# for a single set of data values (e.g., one row from your summary)\ncalculate_radar_coordinates &lt;- function(scaled_data_values) {\n  # scaled_data_values: A numeric vector of already scaled values,\n  # one for each axis. The length of this vector determines N.\n\n  N &lt;- length(scaled_data_values)\n  if (N &lt; 1) {\n    stop(\"scaled_data_values must have at least one value.\")\n  }\n\n  # Calculate angles for each axis (starting upwards, clockwise)\n  # Angles are in radians\n  angles &lt;- pi / 2 - ((0:(N - 1)) * (2 * pi / N))\n  # (0:(N-1)) is used because R is 1-indexed, but it's often easier\n  # to think of the first axis as index 0 for angle calculation.\n  # (j-1) in the formula becomes 0 for the first axis, 1 for the second, etc.\n\n  # Calculate Cartesian coordinates\n  x_coords &lt;- scaled_data_values * cos(angles)\n  y_coords &lt;- scaled_data_values * sin(angles)\n\n  # Return as a data frame or list\n  return(data.frame(\n    axis_index = 1:N,\n    angle_rad = angles,\n    angle_deg = angles * 180 / pi, # For easier understanding\n    scaled_radius = scaled_data_values,\n    x = x_coords,\n    y = y_coords\n  ))\n}\n\ndata2plot2 &lt;-\n  data2plot |&gt;\n  rowwise() |&gt;\n  mutate(\n    radar_coords = list(calculate_radar_coordinates(c_across(where(\n      is.numeric\n    ))))\n  ) |&gt;\n  ungroup() |&gt;\n  unnest(radar_coords) |&gt;\n  mutate(\n    attr = case_when(\n      axis_index == 1 ~ 'str',\n      axis_index == 2 ~ 'dex',\n      axis_index == 3 ~ 'con',\n      axis_index == 4 ~ 'int',\n      axis_index == 5 ~ 'wis',\n      axis_index == 6 ~ 'cha',\n    )\n  ) |&gt;\n  select(-c(str, dex, con, int, wis, cha)) |&gt;\n  mutate(x = round(x, digits = 3)) |&gt;\n  mutate(y = round(y, digits = 3)) |&gt;\n  left_join(\n    data2plot |&gt;\n      pivot_longer(cols = -type, names_to = 'attr', values_to = 'original'),\n    by = c('type','attr')\n  ) # Add back original value\n# separate(col = alignment, into = c('chaotic_lawful', 'good_evil'), sep = ' ', remove = FALSE) |&gt;\n# mutate(chaotic_lawful = factor(chaotic_lawful, levels = c(\"Chaotic\",\"Neutral\",\"Lawful\"))) |&gt;\n# mutate(good_evil = factor(good_evil, levels = c(\"Evil\",\"Neutral\",\"Good\")))"
  },
  {
    "objectID": "posts/2025-05-27/notebook.html#time-to-plot",
    "href": "posts/2025-05-27/notebook.html#time-to-plot",
    "title": "Dungeons and Dragons Monsters (2024)",
    "section": "4 Time to plot!",
    "text": "4 Time to plot!\n\n4.1 Before\n\ndata2plot2 |&gt;\n  group_by(attr) |&gt;\n  mutate(original_scaled = scale(original)) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(x = x, y = y)) +\n  geom_polygon(\n    aes(group = type),\n    fill = \"#aebae0\",\n    color = '#aebae0',\n    alpha = .1\n  ) +\n  geom_point(color = '#aebae0', size = 3) +\n  geom_point(aes(color = original_scaled), size = 2) +\n  facet_wrap(~type, ncol = 4) +\n  theme_gray() +\n  coord_fixed(ratio = 1, expand = TRUE) +\n  scale_y_continuous(expand = c(0, 5, 0, 5)) +\n  scale_x_continuous(expand = c(0, 5, 0, 5)) +\n  labs(\n    title = 'Well, at least Dragons are clumsy',\n    subtitle = str_wrap('Stats distribuition for each monster type. Each point indicate scaled values for each stats. Darkblue being the high (above mean) stats and orange low (below the mean) stats.', width = 80),\n    caption = 'Tidytuesday 2025-05-27'\n  )\n\n\n\n\n\n\n\n\n\n\n4.2 After\n\n# Create my own axis (crying)\ncircle_data &lt;- tibble(\n  x_center = c(0, 0, 0, 0),\n  y_center = c(0, 0, 0, 0),\n  radius = c(5, 10, 15, 20)\n)\n\n\ndata2plot2 |&gt;\n  group_by(attr) |&gt;\n  mutate(original_scaled = scale(original)) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(x = x, y = y)) +\n  geom_polygon(\n    aes(group = type),\n    fill = \"#aebae0\",\n    color = '#aebae0',\n    alpha = .2\n  ) +\n  ggforce::geom_circle(\n    aes(x0 = x_center, y0 = y_center, r = radius),\n    data = circle_data,\n    fill = \"transparent\",\n    color = '#ced5ea',\n    linewidth = .25,\n    inherit.aes = FALSE\n  ) +\n  shadowtext::geom_shadowtext(\n    data = subset(data2plot2 |&gt; distinct(type)),\n    aes(label = type),\n    x = 0,\n    y = 0,\n    family = 'Ubuntu',\n    bg.color = \"white\", # Border\n    bg.r = 0.2,\n    color = '#47506e',\n    size = 3\n  ) +\n  geom_point(color = '#aebae0', size = 3) +\n  geom_point(aes(color = original_scaled), size = 2) +\n  geom_text(\n    data = data2plot2 |&gt; mutate(y = if_else(y &gt; 0, y + 4, y - 4)),\n    aes(label = attr),\n    family = \"Ubuntu\",\n    size = 2.5,    \n    color = \"#aebae0\"\n  ) +\n  facet_wrap(~type, ncol = 4) +\n  theme_void() +\n  coord_fixed(ratio = 1, expand = TRUE) +\n  scale_y_continuous(expand = c(0, 5, 0, 5)) +\n  scale_x_continuous(expand = c(0, 5, 0, 5)) +\n  scale_color_gradientn(colours = MetBrewer::MetPalettes$Hiroshige[[1]]) +\n  theme(\n    strip.background = element_blank(),\n    strip.text = element_blank(),\n    text = element_text(family = \"Ubuntu\"),\n    plot.title.position = \"plot\",\n    plot.title = element_text(family = \"Ubuntu\", size = 14, face = 'bold'),\n    plot.caption = element_text(\n      size = 8,\n      color = 'grey60',\n      margin = margin(20, 0, 0, 0)\n    ),\n    plot.subtitle = element_text(\n      size = 9,\n      lineheight = 1.15,\n      margin = margin(5, 0, 15, 0)\n    )\n  ) +\n  guides(color = 'none', fill = 'none') +\n  labs(\n    title = 'Well, at least Dragons are clumsy',\n    subtitle = str_wrap('This chart displays the stats distribution for each monster type. Point colors correspond to scaled stat values, where dark blue signifies higher values (above the mean) and orange signifies lower values (below the mean)', width = 80),\n    caption = 'Tidytuesday 2025-05-27'\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBe aware that radar charts are not really that useful. A better vizualization could be done with bar chart, but I never done a radar before, so I gave it a try (and probably my last, lol)"
  },
  {
    "objectID": "posts/2025-05-13/notebook.html",
    "href": "posts/2025-05-13/notebook.html",
    "title": "Seismic Events at Mount Vesuvius",
    "section": "",
    "text": "Note\n\n\n\nCheck data in tidytuesday GitHub repository.\n\n\nThe dataset this week explores seismic events detected at the famous Mount Vesuvius in Italy. It comes from the Italian Istituto Nazionale di Geofisica e Vulcanologia (INGV)’s Data Portal and can be explored along with other seismic areas on the GOSSIP website. The raw data was saved as individual CSV files from the GOSSIP website and some values were translated from Italian to English.\n\nThe Open Data Portal of Istituto Nazionale di Geofisica e Vulcanologia (INGV) gives public access to data resulting from institutional research activities in the fields of Seismology, Volcanology, and Environment."
  },
  {
    "objectID": "posts/2025-05-13/notebook.html#about-the-data",
    "href": "posts/2025-05-13/notebook.html#about-the-data",
    "title": "Seismic Events at Mount Vesuvius",
    "section": "",
    "text": "Note\n\n\n\nCheck data in tidytuesday GitHub repository.\n\n\nThe dataset this week explores seismic events detected at the famous Mount Vesuvius in Italy. It comes from the Italian Istituto Nazionale di Geofisica e Vulcanologia (INGV)’s Data Portal and can be explored along with other seismic areas on the GOSSIP website. The raw data was saved as individual CSV files from the GOSSIP website and some values were translated from Italian to English.\n\nThe Open Data Portal of Istituto Nazionale di Geofisica e Vulcanologia (INGV) gives public access to data resulting from institutional research activities in the fields of Seismology, Volcanology, and Environment."
  },
  {
    "objectID": "posts/2025-05-13/notebook.html#initializing",
    "href": "posts/2025-05-13/notebook.html#initializing",
    "title": "Seismic Events at Mount Vesuvius",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(scales)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(shadowtext)\nlibrary(hexbin)\nlibrary(OpenStreetMap)\nlibrary(ggplot2)\nlibrary(ggspatial)\nlibrary(sf)\nlibrary(ggforce)\n\nfont_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 400, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n1.2 Set theme\n\ntheme_set(\n    theme_minimal() +\n    theme(\n    axis.line.x.bottom = element_line(color = '#47506e', linewidth = .3),\n    # axis.ticks.x= element_line(color = '#47506e', linewidth = .3),\n    axis.line.y.left = element_line(color = '#47506e', linewidth = .3),\n    # axis.ticks.y= element_line(color = '#47506e', linewidth = .3),\n    panel.grid = element_line(linewidth = .3, color = '#aebae0'),\n    panel.grid.minor = element_blank(),\n    axis.ticks.length = unit(-0.15, \"cm\"),\n    plot.background = element_blank(),\n    plot.title.position = \"plot\",\n    plot.title = element_text(family = \"Ubuntu\", size = 18, face = 'bold'),\n    plot.caption = element_text(size = 8, color = '#aebae0',margin = margin(20,0,0,0)),\n    plot.subtitle = element_text(size = 9,lineheight = 1.15, margin = margin(5,0,15,0)),\n    axis.title.x = element_markdown(family = \"Ubuntu\", hjust = .5, size = 8, color = \"#47506e\"),\n    axis.title.y = element_markdown(family = \"Ubuntu\", hjust = .5, size = 8, color = \"#47506e\"),\n    axis.text = element_text(family = \"Ubuntu\", hjust = .5, size = 8, color = \"#47506e\"),\n    legend.position = \"top\",\n    text = element_text(family = \"Ubuntu\"),\n    plot.margin = margin(25, 25, 25, 25))\n)\n\n\n\n1.3 Load this week’s data\n\ntuesdata &lt;- tidytuesdayR::tt_load(2025, week = 19)\nvesuvius &lt;- tuesdata$vesuvius"
  },
  {
    "objectID": "posts/2025-05-13/notebook.html#data-analysis",
    "href": "posts/2025-05-13/notebook.html#data-analysis",
    "title": "Seismic Events at Mount Vesuvius",
    "section": "2 Data analysis",
    "text": "2 Data analysis\nHow many events per year\n\nvesuvius |&gt; mutate(year = year(time)) |&gt; count(year) |&gt; ggplot(aes(x = year, y = n)) + geom_col() + theme_minimal()\n\n\n\n\n\n\n\nvesuvius |&gt; mutate(year = year(time)) |&gt; group_by(year) |&gt; summarize(md = mean(duration_magnitude_md, na.rm = TRUE)) |&gt; ungroup() |&gt; ggplot(aes(x = year, y = md)) + geom_col() + theme_minimal()\n\n\n\n\n\n\n\n\nGeo distribuiton\n\nvesuvius |&gt; mutate(year = year(time)) |&gt; ggplot(aes(x = latitude, y = longitude)) + geom_point(aes(color = time)) + theme_minimal()\n\n\n\n\n\n\n\nvesuvius |&gt; mutate(year = year(time)) |&gt; filter(year == max(year)) |&gt; ggplot(aes(x = latitude, y = longitude)) + \n  geom_point(aes(color = time)) + theme_minimal()"
  },
  {
    "objectID": "posts/2025-05-13/notebook.html#transform-data-for-plotting",
    "href": "posts/2025-05-13/notebook.html#transform-data-for-plotting",
    "title": "Seismic Events at Mount Vesuvius",
    "section": "3 Transform Data for Plotting",
    "text": "3 Transform Data for Plotting\n\n3.1 Calculate counts by hex bin\nAt the beggining I was trying to use the defaul ggplot hexbin, but it can’t change size so I have to calculate my own.\n\ndata2plot &lt;- vesuvius |&gt;\n  mutate(year = year(time)) |&gt;\n  filter(year == max(year), longitude &gt; 14.405)\n\nhb_counts &lt;- hexbin::hexbin(\n  data2plot$latitude,\n  data2plot$longitude,\n  xbins = 20,\n  IDs = TRUE\n)\n\nhex_summary_counts &lt;- data.frame(\n  hcell2xy(hb_counts),\n  count = hb_counts@count # Accesses the count for each bin\n)\n\n\n\n3.2 Loading Map\n\nmy_data_sf &lt;- st_as_sf(hex_summary_counts, coords = c(\"x\", \"y\"), crs = 4326)\nmy_data_transformed &lt;- st_transform(my_data_sf, crs = 3857)\nextent &lt;- st_bbox(my_data_transformed)\n\nopen_map &lt;- openmap(\n  upperLeft = c(\n    min(hex_summary_counts$x) - .0025,\n    max(hex_summary_counts$y) + .0025\n  ),\n  lowerRight = c(\n    max(hex_summary_counts$x) + .0025,\n    min(hex_summary_counts$y) - .0025\n  ),\n  zoom = NULL,\n  mergeTiles = TRUE,\n  type = \"bing\",\n  minNumTiles = 10\n)\nsa_map2 &lt;- openproj(open_map)"
  },
  {
    "objectID": "posts/2025-05-13/notebook.html#time-to-plot",
    "href": "posts/2025-05-13/notebook.html#time-to-plot",
    "title": "Seismic Events at Mount Vesuvius",
    "section": "4 Time to plot!",
    "text": "4 Time to plot!\n\n4.1 Before\n\nvesuvius |&gt;\n  mutate(year = year(time)) |&gt;\n  filter(year == max(year), longitude &gt; 14.405) |&gt;\n  ggplot(aes(x = latitude, y = longitude)) +\n  geom_hex(\n    binwidth = c(.0012),\n    aes(linewidth = after_stat(count)),\n    color = 'white'\n  ) +\n  theme_minimal() +\n  coord_fixed() +\n  scale_linewidth(range = c(1.5, 0)) +\n  scale_fill_distiller(palette = \"Spectral\")\n\n\n\n\n\n\n\n\n\n\n4.2 After\n\nOpenStreetMap::autoplot.OpenStreetMap(sa_map2) +\n  ggforce::geom_regon(\n    data = hex_summary_counts,\n    aes(\n      x0 = y,\n      y0 = x,\n      sides = 6,\n      r = scales::rescale(count, to = c(0.0002, 0.0008)),\n      angle = 1,\n      fill = count,\n    ),\n    alpha = 1,\n    # color = '#441C77',\n    color = 'white',\n    size = .25\n  ) +\n  scale_size(range = c(0.5, 3)) +\n  theme_void() +\n  viridis::scale_fill_viridis(\n    option = 'magma',\n    breaks = seq(0, 45, 15),\n    limits = c(0, 45)\n  ) +\n  labs(\n    title = 'Is Mount Vesuvius sleeping?',\n    subtitle = str_wrap(\n      width = 70,\n      \"Here are the sismic Events of Mount Vesuvius in 2024. Although many events, most of them are just above the volcano\"\n    ),\n    fill = \"Number of Events\",\n    caption = \"#Tidytuesday 2025-05-13\"\n  ) +\n  theme(\n    strip.background = element_blank(),\n    strip.text = element_blank(),\n    text = element_text(family = \"Ubuntu\"),\n    plot.title.position = \"plot\",\n    plot.title = element_text(family = \"Ubuntu\", size = 14, face = 'bold'),\n    plot.caption = element_text(\n      size = 8,\n      color = 'grey60',\n      margin = margin(10, 0, 0, 0)\n    ),\n    legend.title = element_text(size = 8, color = 'white'),\n    legend.justification = c(1, 0),\n    legend.position = c(0.97, 0.03),\n    legend.direction = 'horizontal',\n    legend.text = element_text(color = 'white'),\n    plot.subtitle = element_text(\n      size = 9,\n      lineheight = 1.15,\n      margin = margin(5, 0, 15, 0)\n    )\n  ) +\n  guides(\n    fill = guide_colorbar(\n      barwidth = 6,\n      barheight = .3,\n      title.position = 'top'\n    )\n  )"
  },
  {
    "objectID": "posts/2025-03-04/notebook.html",
    "href": "posts/2025-03-04/notebook.html",
    "title": "Long Beach Animal Shelter",
    "section": "",
    "text": "Note\n\n\n\n Check data in TidyTuesday GitHub repository.\n\n\nThis week we’re exploring the Long Beach Animal Shelter Data!\nThe dataset comes from the City of Long Beach Animal Care Services via the {animalshelter} R package.\n\nThis dataset comprises of the intake and outcome record from Long Beach Animal Shelter."
  },
  {
    "objectID": "posts/2025-03-04/notebook.html#about-the-data",
    "href": "posts/2025-03-04/notebook.html#about-the-data",
    "title": "Long Beach Animal Shelter",
    "section": "",
    "text": "Note\n\n\n\n Check data in TidyTuesday GitHub repository.\n\n\nThis week we’re exploring the Long Beach Animal Shelter Data!\nThe dataset comes from the City of Long Beach Animal Care Services via the {animalshelter} R package.\n\nThis dataset comprises of the intake and outcome record from Long Beach Animal Shelter."
  },
  {
    "objectID": "posts/2025-03-04/notebook.html#initializing",
    "href": "posts/2025-03-04/notebook.html#initializing",
    "title": "Long Beach Animal Shelter",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport seaborn as sns\n\nimport calendar # to convert number to month\n\n\n\n1.2 Set theme\n\nplt.style.use('~/Documents/GitHub/tidytuesday/posts/2025-03-04/rb-style.mplstyle')\n\n# Color palette\ncolor_map = [\n    \"#495373\",\n    \"#ce4441\",\n    \"#ee8577\",\n    \"#eb7926\",\n    \"#ffbb44\",\n    \"#859b6c\",\n    \"#62929a\",\n    \"#004f63\",\n    \"#122451\",\n]\n\n\n\n1.3 Load this week’s data\n\nlongbeach = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-04/longbeach.csv')"
  },
  {
    "objectID": "posts/2025-03-04/notebook.html#time-to-plot",
    "href": "posts/2025-03-04/notebook.html#time-to-plot",
    "title": "Long Beach Animal Shelter",
    "section": "2 Time to plot!",
    "text": "2 Time to plot!\n\nPlot 1\n\n# Add year\nlongbeach[\"outcome_year\"] = pd.to_datetime(longbeach[\"outcome_date\"]).dt.year\n\n\n# Start plot ----------------------------------------------------------------------------\nfig, ax = plt.subplots()\nfig.set_figwidth(5)\nfig.set_figheight(3)\n\n# Grid\nax.set_axisbelow(True)\nax.grid(True, axis=\"y\", which=\"major\", linestyle=\"-\", linewidth=0.7, color=\"#d3daed\")\n\n\nsns.histplot(longbeach, x=\"outcome_year\", binwidth=1, color = color_map[0],element=\"step\")\n\n# Apply the formatter to the y-axis\nax.yaxis.set_major_formatter(ticker.StrMethodFormatter(\"{x:,.0f}\"))\n\nax.set_title(\"Entries by Year\")\nax.set_ylabel(\"Counts (n)\")\nax.set_xlabel(\"\")\n\nplt.tight_layout()\nplt.show()\n\n# ---------------------------------------------------------------------------------------\n\n\n\n\n\n\n\n\n\n\nPlot 2\n\n# Add year\nlongbeach[\"outcome_month\"] = pd.to_datetime(longbeach[\"outcome_date\"]).dt.month\n\ndata2plot = (\n    longbeach.groupby([\"outcome_year\", \"outcome_month\"]).size().reset_index(name=\"n\")\n)\ndata2plot[\"outcome_year\"] = data2plot[\"outcome_year\"].astype(\"int\")\ndata2plot[\"outcome_month\"] = data2plot[\"outcome_month\"].astype(\"int\")\n\nmonth_map = {i: calendar.month_abbr[i] for i in range(1, 13)}\ndata2plot[\"outcome_month_abbr\"] = data2plot[\"outcome_month\"].apply(\n    lambda x: month_map.get(x)\n)\n\n# Start plot ----------------------------------------------------------------------------\nfig, ax = plt.subplots()\nfig.set_figwidth(5)\nfig.set_figheight(3)\n\n# Grid\nax.set_axisbelow(True)\nax.grid(True, axis=\"y\", which=\"major\", linestyle=\"-\", linewidth=0.7, color=\"#d3daed\")\n\nsns.lineplot(\n    data2plot, x=\"outcome_month_abbr\", y=\"n\", hue=\"outcome_year\", palette=color_map\n)\n\n# Apply the formatter to the y-axis\nax.yaxis.set_major_formatter(ticker.StrMethodFormatter(\"{x:,.0f}\"))\n\n# Labels\nax.set_title(\"Entries by Year\")\nax.set_ylabel(\"Counts (n)\")\nax.set_xlabel(\"\")\n\n# Legend\nlegend = plt.legend(\n    title=\"Year\",\n    title_fontproperties={\"weight\": \"bold\"},\n    loc=\"lower right\",\n)\nplt.setp(legend.get_title(), color='#495373')\n\n# Plot & Pray\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\nPlot 3\n\n# Start plot ----------------------------------------------------------------------------\n\n# Geometry\ng = sns.relplot(\n    data2plot,\n    x=\"outcome_month_abbr\",\n    y=\"n\",\n    hue=\"outcome_year\",\n    palette=color_map,\n    legend=False,\n    kind=\"line\",\n    col=\"outcome_year\",\n    col_wrap=4,\n    zorder=5,\n    height=1.51,\n    aspect=1 \n)\n\n# Iterate over each subplot to customize further\nfor year, ax in g.axes_dict.items():\n\n    # Add the title as an annotation within the plot\n    ax.text(0.8, 0.85, year, transform=ax.transAxes, color = '#495373', fontsize = 8)\n\n    # Plot every year's time series in the background\n    sns.lineplot(\n        data2plot,\n        x=\"outcome_month_abbr\",\n        y=\"n\",\n        units=\"outcome_year\",\n        estimator=None,\n        color=\"#d3daed\",\n        linewidth=1,\n        ax=ax,\n    )\n\n    # Grid\n    ax.set_axisbelow(True)\n    ax.grid(True, axis=\"y\", which=\"major\", linestyle=\"-\", linewidth=0.7, color=\"#d3daed\")\n\n# Apply the formatter to the y-axis\n# g.yaxis.set_major_formatter(ticker.StrMethodFormatter(\"{x:,.0f}\"))\n\n# Reduce the frequency of the x axis ticks\nax.set_xticks(ax.get_xticks()[::4]+[ax.get_xticks()[-1]])\n\n# Labels\ng.fig.suptitle(\"Long Beach Animal Shelter Reports\", y=.93, color = '#495373', weight = 'bold') \ng.set_titles(\" \")\ng.set_ylabels(\"Counts (n)\")\ng.set_xlabels(\" \")\n\n# Legend\n# legend = g.legend(\n#     title=\"Year\",\n#     title_fontproperties={\"weight\": \"bold\"},\n#     loc=\"lower right\",\n# )\n# g.setp(legend.get_title(), color='#495373')\n\n# Plot & Pray\ng.tight_layout()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tidytuesday by Rodrigo Barreiro",
    "section": "",
    "text": "Hey there, and welcome to my TidyTuesday gallery!  👋\nIf you’re not familiar, #TidyTuesday is this awesome weekly data challenge run by the R for Data Science online community. Every week, they release a brand new dataset, and I jump at the chance to practice my data wrangling and visualization skills in R (and Python).\nFor each entry, you’ll find my code, the visuals I came up with.\nI love seeing what stories the numbers can tell and I hope you enjoy it too!\n— Rodrigo Barreiro\n\nGallery\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspatial, composition\n\n\n\n\nSep 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nartistic\n\nridges\n\ntimeseries\n\n\n\n\nAug 26, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeospatial\n\nmaps\n\n\n\n\nAug 19, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbars\n\ncomposition\n\ntimeseries\n\n\n\n\nAug 12, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbars\n\nslope\n\ncomposition\n\n\n\n\nAug 5, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnetwork\n\n\n\n\nJul 29, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntimeseries\n\nsubway\n\n\n\n\nJul 22, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwaterfall\n\ntimeseries\n\nbars\n\n\n\n\nJul 15, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncircular\n\nscatter\n\n\n\n\nJul 8, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntimeseries\n\n\n\n\nJul 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbars\n\ncircular\n\nmap\n\nsubplot\n\n\n\n\nJun 24, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbars\n\ncircular\n\n\n\n\nJun 17, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntimeseries\n\nsubplot\n\n\n\n\nJun 10, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbars\n\n\n\n\nJun 3, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nradar\n\n\n\n\nMay 27, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntimeseries\n\n\n\n\nMay 23, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeospatial\n\n\n\n\nMay 13, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmap\n\ncircular\n\n\n\n\nApr 11, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\ntimeseries\n\n\n\n\nMar 4, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\nbars\n\n\n\n\nFeb 18, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2025-02-18/notebook.html",
    "href": "posts/2025-02-18/notebook.html",
    "title": "Agencies from the FBI Crime Data API",
    "section": "",
    "text": "Note\n\n\n\n Check data in TidyTuesday GitHub repository.\n\n\nThis week we’re exploring data from the FBI Crime Data API! Specifically, we’re looking at agency-level data across all 50 states in the USA. This dataset provides details on law enforcement agencies that have submitted data to the FBI’s Uniform Crime Reporting (UCR) Program and are displayed on the Crime Data Explorer (CDE).\n\nThe Open Data Portal of Istituto Nazionale di Geofisica e Vulcanologia (INGV) gives public access to data resulting from institutional research activities in the fields of Seismology, Volcanology, and Environment."
  },
  {
    "objectID": "posts/2025-02-18/notebook.html#about-the-data",
    "href": "posts/2025-02-18/notebook.html#about-the-data",
    "title": "Agencies from the FBI Crime Data API",
    "section": "",
    "text": "Note\n\n\n\n Check data in TidyTuesday GitHub repository.\n\n\nThis week we’re exploring data from the FBI Crime Data API! Specifically, we’re looking at agency-level data across all 50 states in the USA. This dataset provides details on law enforcement agencies that have submitted data to the FBI’s Uniform Crime Reporting (UCR) Program and are displayed on the Crime Data Explorer (CDE).\n\nThe Open Data Portal of Istituto Nazionale di Geofisica e Vulcanologia (INGV) gives public access to data resulting from institutional research activities in the fields of Seismology, Volcanology, and Environment."
  },
  {
    "objectID": "posts/2025-02-18/notebook.html#initializing",
    "href": "posts/2025-02-18/notebook.html#initializing",
    "title": "Agencies from the FBI Crime Data API",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\n\n\n1.2 Set theme\n\nplt.style.use('~/Documents/GitHub/tidytuesday/posts/2025-02-18/rb-style.mplstyle')\n\n\n\n1.3 Load this week’s data\n\nagencies = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-02-18/agencies.csv')"
  },
  {
    "objectID": "posts/2025-02-18/notebook.html#time-to-plot",
    "href": "posts/2025-02-18/notebook.html#time-to-plot",
    "title": "Agencies from the FBI Crime Data API",
    "section": "2 Time to plot!",
    "text": "2 Time to plot!\n\n2.1 Before\n\ndata2plot = (\n    agencies.groupby(\"state\").size().reset_index(name=\"n\").sort_values(by=\"n\").tail(10)\n)\n\nfig, ax = plt.subplots()\nfig.set_figwidth(5)\nfig.set_figheight(3)\n\nax.set_axisbelow(True)\nax.grid(True, axis=\"x\", which=\"major\", linestyle=\"-\", linewidth=0.7, color=\"#d3daed\")\n\n\nax.barh(data2plot[\"state\"], data2plot[\"n\"], color=\"#495373\")\n\n# Apply the formatter to the y-axis\nax.xaxis.set_major_formatter(ticker.StrMethodFormatter(\"{x:,.0f}\"))\n\nax.set_title(\"Number of agencies by state\")\nax.set_xlabel(\"Counts (n)\")\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n2.2 After\n\nplt.style.use(\"~/Documents/GitHub/tidytuesday/posts/2025-02-18/rb-style.mplstyle\")\n\ndata2plot = (\n    agencies.groupby([\"state\", \"agency_type\"])\n    .size()\n    .reset_index(name=\"n\")\n    .sort_values(by=\"n\")\n)\n\n# Pivot wider to make the stacked byplot\ndata2plot_wide = data2plot.pivot_table(\n    index=\"state\", columns=\"agency_type\", values=\"n\", fill_value=0\n)\n\n# Sorting and filtering\ndata2plot_wide[\"total_agencies\"] = data2plot_wide.sum(axis=1)\ndata2plot_wide_sorted = data2plot_wide.sort_values(by=\"total_agencies\", ascending=True)\ndata2plot_wide_sorted = data2plot_wide_sorted.query(\"total_agencies &gt; 450\")\ndata2plot_wide_sorted.drop(columns=\"total_agencies\", inplace=True)\n\n# Start plotting ------------------------------------------------------------------------\nfig, ax = plt.subplots()\n\n# Color palette\ncolor_map = [\n    \"#495373\",\n    \"#ce4441\",\n    \"#ee8577\",\n    \"#eb7926\",\n    \"#ffbb44\",\n    \"#859b6c\",\n    \"#62929a\",\n    \"#004f63\",\n    \"#122451\",\n]\n\n# Geom\ndata2plot_wide_sorted.plot(\n    kind=\"barh\", stacked=True, figsize=(5, 3), ax=ax, width=0.8, color=color_map\n)\n\n# Add grid\nax.set_axisbelow(True)\nax.grid(True, axis=\"x\", which=\"major\", linestyle=\"-\", linewidth=0.7, color=\"#d3daed\")\n\n# Format x axis (add comma)\nax.xaxis.set_major_formatter(ticker.StrMethodFormatter(\"{x:,.0f}\"))\n\n# Labels\nax.set_title(\"Number of agencies by state\")\nax.set_xlabel(\"Counts (n)\")\nax.set_ylabel(\"\")\n\n# Legend\nplt.legend(\n    title=\"Type of Agency\", title_fontproperties={\"weight\": \"bold\"}, alignment=\"left\"\n)\n\n# Plot & Pray\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "posts/2025-04-11/notebook.html",
    "href": "posts/2025-04-11/notebook.html",
    "title": "National Science Foundation Grant Terminations under the Trump Administration",
    "section": "",
    "text": "library(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(curl)\nlibrary(ggplot2)\nlibrary(ggimage)\nlibrary(ggrepel)\nlibrary(ggtext)\n  \n\n# ---- Data Preparation ----\n\ntuesdata &lt;- tidytuesdayR::tt_load(2025, week = 14)\ncare_state &lt;- tuesdata$care_state\n\ndata2plot &lt;- \n  care_state |&gt;\n  mutate(score = if_else(is.na(score), 0, score)) |&gt;\n  filter(measure_id %in% c('HCP_COVID_19','IMM_3')) |&gt;\n  mutate(measure_id = case_when(\n    measure_id == 'HCP_COVID_19' ~ \"COVID-19\",\n    measure_id == 'IMM_3' ~ \"Influenza\"\n  ))\n\n# --- Raw Plot\ndata2plot |&gt;\n  ggplot(aes(x = score, y = state, fill = measure_id)) +\n  geom_col()\n\n\n\n\n\n\n\n# --- Stage 2\n\nlibrary(geofacet)\ndata2plot |&gt;\n  ggplot(aes(x = score, y = measure_id)) +\n  geom_col(aes(fill = measure_id)) +\n  facet_geo(~ state, grid = \"us_state_grid1\", strip.position = \"top\")\n\n\n\n\n\n\n\n# --- Stage 3\n\ndata2plot |&gt;\n  ggplot(aes(x = score, y = measure_id)) +\n  geom_col(aes(fill = measure_id)) +\n  facet_geo(~ state, grid = \"us_state_grid1\", strip.position = \"top\") +\n  coord_polar() +\n  geom_text(data = .%&gt;% filter(measure_id == 'Influenza'), x = 0, y = -1, aes(label = scales::percent(score/100, accuracy = 1), color = measure_id), size = 2.5,fontface = \"bold\") +\n  geom_text(data = .%&gt;% filter(measure_id == 'COVID-19'), x = 0, y = -3, aes(label = scales::percent(score/100, accuracy = 1), color = measure_id), size = 2.5,fontface = \"bold\") +\n  scale_y_discrete(expand = c(0,3,0,0)) +\n  scale_x_continuous(limits = c(0,100), expand = c(0,0,0,0)) +\n  theme_void()\n\n\n\n\n\n\n\n# --- Stage 4\n\n\ndata2plot |&gt;\n  ggplot(aes(x = score, y = measure_id)) +\n  geom_col(aes(fill = measure_id)) +\n  geom_text(data = .%&gt;% filter(measure_id == 'Influenza'), x = 0, y = -1, aes(label = scales::percent(score/100, accuracy = 1), color = measure_id), size = 2.5,fontface = \"bold\") +\n  geom_text(data = .%&gt;% filter(measure_id == 'COVID-19'), x = 0, y = -3, aes(label = scales::percent(score/100, accuracy = 1), color = measure_id), size = 2.5,fontface = \"bold\") +\n  coord_polar() +\n  facet_geo(~ state, grid = \"us_state_grid1\", strip.position = \"top\") +\n  scale_y_discrete(expand = c(0,3,0,0)) +\n  scale_x_continuous(limits = c(0,100), expand = c(0,0,0,0)) +\n  scale_fill_manual(values = c(\"#99780b\",\"#14405C\")) +\n  scale_color_manual(values = c(\"#99780b\",\"#14405C\")) +\n  labs(\n    fill = NULL, \n    title = \"US Healthcare Personnel Vaccination\", \n    subtitle = \"Percentage of healthcare personnel who are up to date with COVID-19 or Influenza vaccinations on US (2024)\",\n    caption = 'SOURCE: #Tidytuesday 2025-04-08') +\n  guides(color = 'none') +\n  theme_void() +\n  theme(\n    plot.title.position = \"plot\",\n    plot.title = element_text(family = \"Ubuntu\", size = 20, face = 'bold'),\n    plot.subtitle = element_markdown(size = 9,lineheight = 1.25, margin = margin(5,0,20,0)),\n    legend.position = \"top\",\n    text = element_text(family = \"Ubuntu\"),\n    strip.text = element_text(color = 'grey30'),\n    legend.margin = margin(0,0,20,0),\n    legend.spacing = unit(0.1, 'cm'),\n    legend.key.height= unit(0.3, 'cm'),\n    legend.key.width= unit(0.5, 'cm'))"
  },
  {
    "objectID": "posts/2025-05-20/notebook.html",
    "href": "posts/2025-05-20/notebook.html",
    "title": "Water quality at Sydney Beaches",
    "section": "",
    "text": "tuesdata &lt;- tidytuesdayR::tt_load(2025, week = 20)\nwater_quality &lt;- tuesdata$water_quality\nweather &lt;- tuesdata$weather\n\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(scales)\nlibrary(showtext)\nlibrary(ggtext)\n\nfont_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 300, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)"
  },
  {
    "objectID": "posts/2025-05-20/notebook.html#before",
    "href": "posts/2025-05-20/notebook.html#before",
    "title": "Water quality at Sydney Beaches",
    "section": "Before",
    "text": "Before\n\ndata2plot |&gt;\n  filter(region != 'Western Sydney') |&gt;\n  ggplot(aes(x = date, y = roll_mean_enterococci)) +\n  geom_smooth(aes(color = region), linewidth = 0.5, se = FALSE, span = .2) +\n  labs(\n    title = 'Water Quality at Sydney Beaches',\n    subtitle = str_wrap(\n      width = 50,\n      'High concetration of _Enterococci spp._ in beach water can indicate contamination and poses health risks to swimmers, such as gastrointestinal upset and infections.'\n    )\n  )"
  },
  {
    "objectID": "posts/2025-05-20/notebook.html#after",
    "href": "posts/2025-05-20/notebook.html#after",
    "title": "Water quality at Sydney Beaches",
    "section": "After",
    "text": "After\n\naxis_text &lt;-\n  tibble(y = c(100, 200, 300)) |&gt;\n  mutate(\n    label = if_else(\n      y == max(y),\n      str_c(y, ' Enterococcus spp. CFL/ml'),\n      str_c(y)\n    )\n  ) |&gt;\n  mutate(date = data2plot$date |&gt; min())\n\ndata2plot |&gt;\n  filter(region != 'Western Sydney') |&gt;\n  ggplot(aes(x = date, y = roll_mean_enterococci)) +\n\n  geom_text(\n    data = axis_text,\n    aes(y = y, label = label, x = date - 2000),\n    size = 2,\n    color = '#9fa8c2',\n    hjust = 0,\n    vjust = -0.4\n  ) +\n\n  geom_smooth(aes(color = region), linewidth = 0.5, se = FALSE, span = .2) +\n  guides(color = 'none') +\n  facet_wrap(~region, ncol = 2, scales = 'free_x') +\n  gghighlight::gghighlight(\n    roll_mean_enterococci &gt;= 0,\n    keep_scales = TRUE,\n    use_direct_label = FALSE,\n    unhighlighted_params = list(\n      alpha = 0.75,\n      linewidth = 0.3,\n      color = '#d3daed'\n    )\n  ) +\n\n  theme_minimal() +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = 'Water Quality at Sydney Beaches',\n    subtitle = str_wrap(\n      width = 60,\n      'High concetration of _Enterococci spp._ in beach water can indicate contamination and poses health risks to swimmers, such as gastrointestinal upset and infections.'\n    ) |&gt; str_replace_all('\\n','&lt;br&gt;')\n  ) +\n\n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.grid.major.y = element_line(\n      linewidth = .1,\n      color = '#d3daed'\n    ),\n    panel.grid.minor = element_blank(),\n    axis.ticks.x = element_line(color = '#9fa8c2', linewidth = .25),\n    text = element_text(family = \"Ubuntu\"),\n    axis.text = element_text(color = '#9fa8c2', hjust = .5, size = 6),\n    axis.text.y = element_blank(),\n    plot.title = element_text(family = 'Ubuntu', face = 'bold', size = 16),\n    plot.subtitle = element_markdown(\n      family = 'Ubuntu',\n      size = 9,\n      color = '#4a5063',\n      margin = margin(0, 0, 20, 0),\n      lineheight = 1.25,\n    ),\n    panel.spacing = unit(2, \"lines\"),\n    strip.placement = \"outside\",\n    strip.text = element_text(\n      # hjust = -0.11,\n      color = '#0d3bb8',\n      hjust = 0,\n      size = 7,\n      margin = margin(0, 0.5, 0, 0)\n    ),\n    strip.background = element_blank(),\n    plot.margin = margin(25, 25, 25, 25)\n  ) +\n  scale_y_continuous(expand = c(0, 0, 0, 0)) +\n  scale_x_date(\n    expand = c(0, 0, 0.1, 0),\n    label = year,\n    breaks = c(\n      data2plot$date |&gt; min(),\n      as.Date('2010-01-01'),\n      data2plot$date |&gt; max()\n    )\n  ) +\n  scale_color_manual(values = c('#0d3bb8', '#0d3bb8', '#0d3bb8', '#0d3bb8'))"
  },
  {
    "objectID": "posts/2025-06-03/notebook.html",
    "href": "posts/2025-06-03/notebook.html",
    "title": "Project Gutenberg",
    "section": "",
    "text": "Note\n\n\n\n Check data in TidyTuesday GitHub repository.\n\n\nThis week we’re exploring books from Project Gutenberg and the {https://docs.ropensci.org/gutenbergr/} R package!\n\n[{gutenbergr} allows you to] Download and process public domain works in the Project Gutenberg collection https://www.gutenberg.org/. Includes metadata for all Project Gutenberg works, so that they can be searched and retrieved."
  },
  {
    "objectID": "posts/2025-06-03/notebook.html#about-the-data",
    "href": "posts/2025-06-03/notebook.html#about-the-data",
    "title": "Project Gutenberg",
    "section": "",
    "text": "Note\n\n\n\n Check data in TidyTuesday GitHub repository.\n\n\nThis week we’re exploring books from Project Gutenberg and the {https://docs.ropensci.org/gutenbergr/} R package!\n\n[{gutenbergr} allows you to] Download and process public domain works in the Project Gutenberg collection https://www.gutenberg.org/. Includes metadata for all Project Gutenberg works, so that they can be searched and retrieved."
  },
  {
    "objectID": "posts/2025-06-03/notebook.html#initializing",
    "href": "posts/2025-06-03/notebook.html#initializing",
    "title": "Project Gutenberg",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(scales)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(shadowtext)\n\nfont_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 400, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n1.2 Set theme\n\ntheme_set(\n    theme_minimal() +\n    theme(\n    # axis.line.x.bottom = element_line(color = '#474747', linewidth = .3),\n    # axis.ticks.x= element_line(color = '#474747', linewidth = .3),\n    # axis.line.y.left = element_line(color = '#474747', linewidth = .3),\n    # axis.ticks.y= element_line(color = '#474747', linewidth = .3),\n    # # panel.grid = element_line(linewidth = .3, color = 'grey90'),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.ticks.length = unit(-0.15, \"cm\"),\n    plot.background = element_blank(),\n    plot.title.position = \"plot\",\n    plot.title = element_text(family = \"Ubuntu\", size = 18, face = 'bold'),\n    plot.caption = element_text(size = 8, color = 'grey60',margin = margin(20,0,0,0)),\n    plot.subtitle = element_text(size = 9,lineheight = 1.15, margin = margin(5,0,15,0)),\n    axis.title.x = element_markdown(family = \"Ubuntu\", hjust = .5, size = 8, color = \"grey40\"),\n    axis.title.y = element_markdown(family = \"Ubuntu\", hjust = .5, size = 8, color = \"grey40\"),\n    axis.text = element_text(family = \"Ubuntu\", hjust = .5, size = 8, color = \"grey40\"),\n    legend.position = \"top\",\n    text = element_text(family = \"Ubuntu\", color = \"#495373\"),\n    plot.margin = margin(25, 25, 25, 25))\n)\n\n\n\n1.3 Load this week’s data\n\ntuesdata &lt;- tidytuesdayR::tt_load(2025, week = 22)\n\ngutenberg_authors &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-03/gutenberg_authors.csv')\ngutenberg_languages &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-03/gutenberg_languages.csv')\ngutenberg_metadata &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-03/gutenberg_metadata.csv')\ngutenberg_subjects &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-03/gutenberg_subjects.csv')"
  },
  {
    "objectID": "posts/2025-06-03/notebook.html#data-analysis",
    "href": "posts/2025-06-03/notebook.html#data-analysis",
    "title": "Project Gutenberg",
    "section": "2 Data analysis",
    "text": "2 Data analysis\nHow many types are languages?\n\ngutenberg_languages |&gt; count(language, sort = TRUE)\n\n# A tibble: 70 × 2\n   language     n\n   &lt;chr&gt;    &lt;int&gt;\n 1 en       60693\n 2 fr        3973\n 3 fi        3313\n 4 de        2324\n 5 it        1056\n 6 nl        1046\n 7 es         885\n 8 pt         647\n 9 hu         609\n10 zh         444\n# ℹ 60 more rows\n\n\nHow many authors are there?\n\ngutenberg_authors |&gt; count(author, sort = TRUE) \n\n# A tibble: 25,940 × 2\n   author                n\n   &lt;chr&gt;             &lt;int&gt;\n 1 Hughes, Thomas        4\n 2 Smith, George         4\n 3 Taylor, Thomas        4\n 4 Wilson, John          4\n 5 Anderson, William     3\n 6 Brown, John           3\n 7 Brown, Thomas         3\n 8 Butler, Samuel        3\n 9 Edwards, Edward       3\n10 Fowler, Frank         3\n# ℹ 25,930 more rows\n\n\nRepeated author names? (Coincidence?)"
  },
  {
    "objectID": "posts/2025-06-03/notebook.html#transform-data-for-plotting",
    "href": "posts/2025-06-03/notebook.html#transform-data-for-plotting",
    "title": "Project Gutenberg",
    "section": "3 Transform Data for Plotting",
    "text": "3 Transform Data for Plotting\n\n3.1 Creating table of authors with most records for each language\n\nauthor_blocklist &lt;- c('Various', 'Anonymous', 'Unknown', NA)\n\ndata2plot &lt;-\n  gutenberg_metadata |&gt;\n  select(gutenberg_author_id, language) |&gt;\n  left_join(gutenberg_authors, by = 'gutenberg_author_id') |&gt;\n  count(gutenberg_author_id, author, language, sort = TRUE) |&gt;\n  filter(!author %in% author_blocklist) |&gt;\n  group_by(language) |&gt;\n  slice_max(n = 1, order_by = n, with_ties = FALSE) |&gt;\n  ungroup() |&gt;\n  arrange(-n) |&gt;\n  head(10)\n\n\ndata2plot &lt;- bind_rows(\n  data2plot |&gt; mutate(to_dodge = TRUE),\n  data2plot |&gt; mutate(to_dodge = FALSE))\n\ndata2plot &lt;- data2plot |&gt; mutate(label = glue('**{author}**&lt;span style=\"color:#aebae0\"&gt; {language}&lt;/span&gt;'))"
  },
  {
    "objectID": "posts/2025-06-03/notebook.html#time-to-plot",
    "href": "posts/2025-06-03/notebook.html#time-to-plot",
    "title": "Project Gutenberg",
    "section": "4 Time to plot!",
    "text": "4 Time to plot!\n\n4.1 Before\n\ndata2plot |&gt; filter(to_dodge) |&gt;\n  ggplot(aes(x = n, y = author)) +\n  geom_col() +\n  theme_gray() +\n  labs(\n    title = 'Language Favorites',\n    subtitle = 'Authors in Project Gutenberg with most records for the top 10 languages.')\n\n\n\n\n\n\n\n\n\ndata2plot |&gt;\n  ggplot(aes(x = n, y = fct_reorder(author, n))) +\n  geom_col(aes(alpha = to_dodge), position = 'dodge', width = 0.8, fill = '#aebae0') +\n  geom_text(\n    aes(label = comma(n)),\n    color = 'white',\n    nudge_y = -0.2,\n    nudge_x = -2,\n    hjust = 1\n  ) +\n  geom_richtext(\n    aes(label = label, alpha = to_dodge),\n    x = 0,\n    hjust = 0,\n    nudge_y = 0.18,\n    color = '#495373',\n    family = 'Ubuntu',\n    size = 3,\n    fill = NA,\n    label.color = NA, # remove background and outline\n    label.padding = grid::unit(rep(0, 4), \"pt\") # remove padding\n  ) +\n  scale_alpha_manual(values = c('TRUE' = 0, 'FLASE' = 1)) +\n  guides(alpha = 'none') +\n  coord_cartesian(expand = FALSE) +\n  theme(axis.text.y = element_blank(), axis.text.x = element_blank()) +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = 'Language Favorites',\n    subtitle = 'Authors in Project Gutenberg with most records for the top 10 languages.')"
  },
  {
    "objectID": "posts/2025-06-17/notebook.html",
    "href": "posts/2025-06-17/notebook.html",
    "title": "API Specs",
    "section": "",
    "text": "Note\n\n\n\n Check data in TidyTuesday GitHub repository.\n\n\nThis week we’re exploring Web APIs! The lead volunteer for TidyTuesday (Jon Harmon) is writing a book about working with Web APIs with R as well as a series of R packages to make it easier to create API-wrapping R packages. On Thursday, 2025-06-19, Jon will present a talk on this package ecosystem at the Ghana R Conference 2025. While working on the packages and the talk, Jon explored a list of APIs from the website APIs.guru. That dataset is provided here.\n\n[APIs.guru’s] goal is to create a machine-readable Wikipedia for Web APIs in the OpenAPI Specification format."
  },
  {
    "objectID": "posts/2025-06-17/notebook.html#about-the-data",
    "href": "posts/2025-06-17/notebook.html#about-the-data",
    "title": "API Specs",
    "section": "",
    "text": "Note\n\n\n\n Check data in TidyTuesday GitHub repository.\n\n\nThis week we’re exploring Web APIs! The lead volunteer for TidyTuesday (Jon Harmon) is writing a book about working with Web APIs with R as well as a series of R packages to make it easier to create API-wrapping R packages. On Thursday, 2025-06-19, Jon will present a talk on this package ecosystem at the Ghana R Conference 2025. While working on the packages and the talk, Jon explored a list of APIs from the website APIs.guru. That dataset is provided here.\n\n[APIs.guru’s] goal is to create a machine-readable Wikipedia for Web APIs in the OpenAPI Specification format."
  },
  {
    "objectID": "posts/2025-06-17/notebook.html#initializing",
    "href": "posts/2025-06-17/notebook.html#initializing",
    "title": "API Specs",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(scales)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(shadowtext)\n\nfont_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 400, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n1.2 Set theme\n\nis_the_new_black &lt;- \"#374571\"\ntheme_set(\n  theme_minimal() +\n    theme(\n      # axis.line.x.bottom = element_line(color = '#474747', linewidth = .3),\n      # axis.ticks.x= element_line(color = '#474747', linewidth = .3),\n      # axis.line.y.left = element_line(color = '#474747', linewidth = .3),\n      # axis.ticks.y= element_line(color = '#474747', linewidth = .3),\n      # # panel.grid = element_line(linewidth = .3, color = 'grey90'),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      axis.ticks.length = unit(-0.15, \"cm\"),\n      plot.background = element_blank(),\n      # plot.title.position = \"plot\",\n      plot.title = element_text(family = \"Ubuntu\", size = 18, face = 'bold'),\n      plot.caption = element_text(\n        size = 8,\n        color = '#aebae0',\n        margin = margin(20, 0, 0, 0),\n        hjust = 0\n      ),\n      plot.subtitle = element_text(\n        size = 9,\n        lineheight = 1.15,\n        margin = margin(5, 0, 15, 0)\n      ),\n      axis.title.x = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = \"#374571\"\n      ),\n      axis.title.y = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = \"#374571\"\n      ),\n      axis.text = element_text(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = \"#374571\"\n      ),\n      legend.position = \"top\",\n      text = element_text(family = \"Ubuntu\", color = \"#374571\"),\n      plot.margin = margin(25, 25, 25, 25)\n    )\n)\n\n\n\n1.3 Load this week’s data\n\napi_categories &lt;-readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-17/api_categories.csv')\napi_info &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-17/api_info.csv')\napi_logos &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-17/api_logos.csv')\napi_origins &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-17/api_origins.csv')\napisguru_apis &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-17/apisguru_apis.csv')"
  },
  {
    "objectID": "posts/2025-06-17/notebook.html#data-analysis",
    "href": "posts/2025-06-17/notebook.html#data-analysis",
    "title": "API Specs",
    "section": "2 Data analysis",
    "text": "2 Data analysis\n\nHow many API format are there?\n\napi_origins |&gt; distinct(name, .keep_all = TRUE) |&gt; count(format, sort = TRUE)\n\n# A tibble: 7 × 2\n  format           n\n  &lt;chr&gt;        &lt;int&gt;\n1 swagger       1057\n2 openapi        919\n3 &lt;NA&gt;           272\n4 google         258\n5 postman         15\n6 wadl             5\n7 apiBlueprint     3\n\n\nSo many NA, why?\n\napi_origins |&gt; filter(format |&gt; is.na()) |&gt; mutate(is_aws = str_detect(name, 'aws'))\n\n# A tibble: 272 × 5\n   name                                  format url               version is_aws\n   &lt;chr&gt;                                 &lt;chr&gt;  &lt;chr&gt;             &lt;chr&gt;   &lt;lgl&gt; \n 1 amazonaws.com:AWSMigrationHub         &lt;NA&gt;   https://raw.gith… &lt;NA&gt;    TRUE  \n 2 amazonaws.com:accessanalyzer          &lt;NA&gt;   https://raw.gith… &lt;NA&gt;    TRUE  \n 3 amazonaws.com:acm                     &lt;NA&gt;   https://raw.gith… &lt;NA&gt;    TRUE  \n 4 amazonaws.com:acm-pca                 &lt;NA&gt;   https://raw.gith… &lt;NA&gt;    TRUE  \n 5 amazonaws.com:alexaforbusiness        &lt;NA&gt;   https://raw.gith… &lt;NA&gt;    TRUE  \n 6 amazonaws.com:amp                     &lt;NA&gt;   https://raw.gith… &lt;NA&gt;    TRUE  \n 7 amazonaws.com:amplify                 &lt;NA&gt;   https://raw.gith… &lt;NA&gt;    TRUE  \n 8 amazonaws.com:amplifybackend          &lt;NA&gt;   https://raw.gith… &lt;NA&gt;    TRUE  \n 9 amazonaws.com:apigateway              &lt;NA&gt;   https://raw.gith… &lt;NA&gt;    TRUE  \n10 amazonaws.com:apigatewaymanagementapi &lt;NA&gt;   https://raw.gith… &lt;NA&gt;    TRUE  \n# ℹ 262 more rows\n\n\nMost of them are AWS. Let’s add it as a format.\n\n\nCount how many categories are there\n\napi_categories |&gt; count(name, sort = TRUE) |&gt; filter(n &gt; 1)\n\n# A tibble: 426 × 2\n   name                                 n\n   &lt;chr&gt;                            &lt;int&gt;\n 1 threatjammer.com                     8\n 2 neutrinoapi.net                      5\n 3 beanstream.com                       3\n 4 edrv.io                              3\n 5 googleapis.com:my-business           3\n 6 slack.com:openai                     3\n 7 spectrocoin.com                      3\n 8 stackexchange.com                    3\n 9 who-hosts-this.com                   3\n10 amentum.space:aviation_radiation     2\n# ℹ 416 more rows\n\napi_categories |&gt; count(apisguru_category, sort = TRUE)\n\n# A tibble: 42 × 2\n   apisguru_category     n\n   &lt;chr&gt;             &lt;int&gt;\n 1 cloud               955\n 2 media               340\n 3 open_data           318\n 4 analytics           284\n 5 developer_tools     168\n 6 ecommerce            78\n 7 financial            72\n 8 messaging            62\n 9 entertainment        61\n10 telecom              60\n# ℹ 32 more rows\n\n\nOne name can have multiple categories. In fact, 416 of 2,331 (17%) have more than one category. Let’s let it repeat."
  },
  {
    "objectID": "posts/2025-06-17/notebook.html#transform-data-for-plotting",
    "href": "posts/2025-06-17/notebook.html#transform-data-for-plotting",
    "title": "API Specs",
    "section": "3 Transform Data for Plotting",
    "text": "3 Transform Data for Plotting\n\n3.1 Creating table of authors with most records for each language\n\n# Add AWS format, add Other and remove NA.\napi_origins_mod &lt;-\n  api_origins |&gt;\n  mutate(\n    format = if_else(is.na(format) & str_detect(name, 'aws'), 'aws', format)\n  ) |&gt;\n  mutate(format = fct_lump(format, n = 4)) |&gt;\n  filter(!is.na(format)) |&gt;\n  count(name, format, sort = TRUE)\n\n# Creating \"Other\" category for api_categories\napi_categories_mod &lt;-\n  api_categories |&gt;\n  mutate(apisguru_category = fct_lump(apisguru_category, n = 5)) |&gt;\n  distinct(name, apisguru_category) |&gt;\n  filter(!is.na(apisguru_category))\n\ndata2plot &lt;-\n  api_origins_mod |&gt;\n  left_join(api_categories_mod, by = 'name') |&gt;\n  count(format, apisguru_category) |&gt;\n  filter(!is.na(apisguru_category))"
  },
  {
    "objectID": "posts/2025-06-17/notebook.html#time-to-plot",
    "href": "posts/2025-06-17/notebook.html#time-to-plot",
    "title": "API Specs",
    "section": "4 Time to plot!",
    "text": "4 Time to plot!\n\n4.1 Before\n\ndata2plot |&gt; \n  ggplot(aes(x = n, y = format)) +\n  geom_col(aes(fill = apisguru_category), position = 'stack')\n\n\n\n\n\n\n\n\n\nmy_order &lt;-\n  data2plot |&gt;\n  group_by(format) |&gt;\n  summarise(n = sum(n)) |&gt;\n  ungroup() |&gt;\n  arrange(desc(n)) |&gt;\n  pull(format) |&gt;\n  as.character()\n\npretty_format_label &lt;- c(\n  'aws' = 'AWS    ',\n  'swagger' = 'Swagger    ',\n  'google' = 'Google    ',\n  'openapi' = 'OpenAPI    ',\n  'Other' = 'Other    '\n)\n\ndata2plot2 &lt;-\n  data2plot |&gt;\n  group_by(format) |&gt;\n  mutate(cumsum = cumsum(n)) |&gt;\n  ungroup()\n\n\ndata2plot2 |&gt;\n  ggplot(aes(x = n, y = factor(format, levels = rev(my_order)))) +\n  geom_segment(\n    aes(\n      x = cumsum - n,\n      xend = cumsum,\n      color = str_to_sentence(apisguru_category) |&gt; str_replace_all('_', ' ')\n    ),\n    linewidth = 5,\n    lineend = 'round',\n    key_glyph = 'point'\n  ) +\n  geom_text(\n    data = tibble(format = my_order, n = 0),\n    aes(label = pretty_format_label[format]),\n    hjust = 1,\n    family = 'Ubuntu',\n    size = 3,\n    color = is_the_new_black\n  ) +\n  MetBrewer::scale_color_met_d('Nizami', direction = -1) +\n  scale_x_continuous(expand = c(0, 0, 0, 0)) +\n  guides(color = guide_legend(override.aes = list(size = 3))) +\n  coord_radial(start = 0, end = 1.6 * pi, theta = 'x', inner.radius = .15) +\n  theme(\n    axis.text.y = element_blank(),\n    legend.position = 'bottom',\n    legend.key.size = unit(0, 'line'),\n    legend.key.spacing.y = unit(-.45, 'line'),\n    legend.text = element_text(margin = margin(l = -0.15, unit = \"cm\"))\n  ) +\n  labs(\n    x = 'Number of APIs',\n    y = NULL,\n    color = NULL,\n    title = \"API.guru\",\n    subtitle = \"Which API formats are used the most? and for what?\",\n    caption = str_wrap(\n      \"NOTE This visualization offers a preliminary look at the data and may not capture the full complexity of the underlying reality. SOURCE #Tidytuesday 2025-06-17 GITHUB barreiro-r\",\n      width = 65\n    ) |&gt;\n      str_replace_all(\"@\", \"\\n\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nI tryed to use ggforce::zoom_panel() and {ggmagnify} but both didn’t work."
  },
  {
    "objectID": "posts/2025-07-01/notebook.html",
    "href": "posts/2025-07-01/notebook.html",
    "title": "Weekly US Gas Prices",
    "section": "",
    "text": "Note\n\n\n\n Check data in TidyTuesday GitHub repository.\n\n\nThis week we’re exploring weekly US gas prices! The data comes from the U.S. Energy Information Administration (EIA), which publishes average retail gasoline and diesel prices each Monday. The original data (including additional datasets) can be found at eia.gov/petroleum/gasdiesel, and the weekly time series used here was downloaded from this XLS file.\nGas price methodology:\n\n“Every Monday, retail prices for all three grades of gasoline are collected mainly by telephone and email from a sample of approximately 1,000 retail gasoline outlets. The prices are published around 5:00 p.m. ET Monday, except on government holidays, when the data are released on Tuesday (but still represent Monday’s price). The reported price includes all taxes and is the cash pump price paid by a consumer as of 8:00 a.m. Monday. This price represents the self-serve price except in areas having only full-serve. The price data from the sample are used to calculate volume-weighted average gasoline price estimates at the national, regional, and selected city and state levels for all gasoline grades and formulations.”\n\nDiesel price methodology:\n\n“Every Monday, cash self-serve on-highway diesel prices (including taxes) are collected from a sample of approximately 590 retail diesel outlets in the continental United States. The sample includes a combination of truck stops and service stations that sell on-highway diesel fuel. The data represent the price of ultra low sulfur diesel (ULSD), which contains less than 15 parts-per-million sulfur. All collected prices are subjected to automated edit checks during data collection and data processing. Data flagged by the edits are verified with the respondents. Imputation is used for companies that cannot be contacted and for reported prices that are extreme outliers. The average survey response rate for 2020 was 98%. Average national and regional prices are released around 5:00 p.m. ET on Mondays, except on government holidays, in which case the data are released on Tuesday (but still represent Monday’s price).”"
  },
  {
    "objectID": "posts/2025-07-01/notebook.html#about-the-data",
    "href": "posts/2025-07-01/notebook.html#about-the-data",
    "title": "Weekly US Gas Prices",
    "section": "",
    "text": "Note\n\n\n\n Check data in TidyTuesday GitHub repository.\n\n\nThis week we’re exploring weekly US gas prices! The data comes from the U.S. Energy Information Administration (EIA), which publishes average retail gasoline and diesel prices each Monday. The original data (including additional datasets) can be found at eia.gov/petroleum/gasdiesel, and the weekly time series used here was downloaded from this XLS file.\nGas price methodology:\n\n“Every Monday, retail prices for all three grades of gasoline are collected mainly by telephone and email from a sample of approximately 1,000 retail gasoline outlets. The prices are published around 5:00 p.m. ET Monday, except on government holidays, when the data are released on Tuesday (but still represent Monday’s price). The reported price includes all taxes and is the cash pump price paid by a consumer as of 8:00 a.m. Monday. This price represents the self-serve price except in areas having only full-serve. The price data from the sample are used to calculate volume-weighted average gasoline price estimates at the national, regional, and selected city and state levels for all gasoline grades and formulations.”\n\nDiesel price methodology:\n\n“Every Monday, cash self-serve on-highway diesel prices (including taxes) are collected from a sample of approximately 590 retail diesel outlets in the continental United States. The sample includes a combination of truck stops and service stations that sell on-highway diesel fuel. The data represent the price of ultra low sulfur diesel (ULSD), which contains less than 15 parts-per-million sulfur. All collected prices are subjected to automated edit checks during data collection and data processing. Data flagged by the edits are verified with the respondents. Imputation is used for companies that cannot be contacted and for reported prices that are extreme outliers. The average survey response rate for 2020 was 98%. Average national and regional prices are released around 5:00 p.m. ET on Mondays, except on government holidays, in which case the data are released on Tuesday (but still represent Monday’s price).”"
  },
  {
    "objectID": "posts/2025-07-01/notebook.html#initializing",
    "href": "posts/2025-07-01/notebook.html#initializing",
    "title": "Weekly US Gas Prices",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(scales)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(shadowtext)\nlibrary(maps)\nlibrary(ggpattern)\n\nfont_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 400, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n1.2 Set theme\n\ncool_gray0 &lt;- \"#323955\"\ncool_gray1 &lt;- \"#5a6695\"\ncool_gray2 &lt;- \"#7e89bb\"\ncool_gray3 &lt;- \"#a4aee2\"\ncool_gray4 &lt;- \"#cbd5ff\"\ncool_gray5 &lt;- \"#e7efff\"\n\ncool_red0 &lt;- \"#A31C44\"\ncool_red1 &lt;- \"#F01B5B\"\ncool_red2 &lt;- \"#F43E75\"\ncool_red3 &lt;- \"#E891AB\"\ncool_red4 &lt;- \"#FAC3D3\"\ncool_red5 &lt;- \"#FCE0E8\"\n\ntheme_set(\n  theme_minimal() +\n    theme(\n      # axis.line.x.bottom = element_line(color = '#474747', linewidth = .3),\n      # axis.ticks.x= element_line(color = '#474747', linewidth = .3),\n      # axis.line.y.left = element_line(color = '#474747', linewidth = .3),\n      # axis.ticks.y= element_line(color = '#474747', linewidth = .3),\n      # # panel.grid = element_line(linewidth = .3, color = 'grey90'),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      axis.ticks.length = unit(-0.15, \"cm\"),\n      plot.background = element_blank(),\n      plot.title.position = \"plot\",\n      plot.title = element_text(family = \"Ubuntu\", size = 18, face = 'bold'),\n      plot.caption = element_text(\n        size = 8,\n        color = cool_gray4,\n        margin = margin(20, 0, 0, 0),\n        hjust = 0\n      ),\n      plot.subtitle = element_text(\n        size = 9,\n        lineheight = 1.15,\n        margin = margin(5, 0, 15, 0)\n      ),\n      axis.title.x = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.title.y = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.text = element_text(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      legend.position = \"top\",\n      text = element_text(family = \"Ubuntu\", color = cool_gray1),\n      plot.margin = margin(25, 25, 25, 25)\n    )\n)\n\n\n\n1.3 Load this week’s data\n\nweekly_gas_prices &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-07-01/weekly_gas_prices.csv')"
  },
  {
    "objectID": "posts/2025-07-01/notebook.html#data-analysis",
    "href": "posts/2025-07-01/notebook.html#data-analysis",
    "title": "Weekly US Gas Prices",
    "section": "2 Data analysis",
    "text": "2 Data analysis\n\nHow much data we have for all categories?\n\nweekly_gas_prices |&gt; count(fuel, grade, formulation)\n\n# A tibble: 15 × 4\n   fuel     grade            formulation      n\n   &lt;chr&gt;    &lt;chr&gt;            &lt;chr&gt;        &lt;int&gt;\n 1 diesel   all              &lt;NA&gt;          1632\n 2 diesel   low_sulfur       &lt;NA&gt;            96\n 3 diesel   ultra_low_sulfur &lt;NA&gt;           960\n 4 gasoline all              all           1682\n 5 gasoline all              conventional  1596\n 6 gasoline all              reformulated  1596\n 7 gasoline midgrade         all           1596\n 8 gasoline midgrade         conventional  1596\n 9 gasoline midgrade         reformulated  1596\n10 gasoline premium          all           1596\n11 gasoline premium          conventional  1596\n12 gasoline premium          reformulated  1596\n13 gasoline regular          all           1813\n14 gasoline regular          conventional  1813\n15 gasoline regular          reformulated  1596\n\n\nNot so complete for diesel low_sulfur and ultra_low_sulfur.\n\n\nWhen data started to be collected?\n\nrecording_range &lt;- \n  weekly_gas_prices |&gt;\n  group_by(fuel, grade, formulation) |&gt;\n  filter(date %in% c(min(date), max(date))) |&gt;\n  mutate(date_categ = if_else(date == min(date), 'min_date', 'max_date')) |&gt;\n  select(-price)\n\nrecording_range |&gt;\n  mutate(formulation = if_else(is.na(formulation), 'NA', formulation)) |&gt;\n  ggplot(aes(x = date, y = str_c(fuel,grade,formulation, sep = ' '))) +\n  geom_line(linewidth = 4, color = cool_gray4, lineend = 'round') +\n  geom_point(aes(color = date_categ), show.legend = FALSE) +\n  scale_color_manual(values = c(min_date = \"white\", max_date = cool_gray2)) +\n  labs(x = \"Date\", y = NULL, title = \"Fuel price per category\")"
  },
  {
    "objectID": "posts/2025-07-01/notebook.html#transform-data-for-plotting",
    "href": "posts/2025-07-01/notebook.html#transform-data-for-plotting",
    "title": "Weekly US Gas Prices",
    "section": "3 Transform Data for Plotting",
    "text": "3 Transform Data for Plotting\n\ndata2plot &lt;- \n  weekly_gas_prices |&gt;\n  filter(date &gt; as.Date('2000-01-01')) |&gt;\n  mutate(month = month(date)) |&gt;\n  mutate(year = year(date)) |&gt;\n  filter(fuel == 'gasoline') |&gt;\n  group_by(fuel, grade, formulation, month, year) |&gt;\n  mutate(price = mean(price, na.rm = TRUE)) |&gt;\n  filter(grade != \"all\", formulation != \"all\") |&gt;\n  ungroup() |&gt;\n  pivot_wider(names_from = grade, values_from = price) |&gt;\n  mutate(delta_premium = premium - midgrade, delta_regular = regular - midgrade) |&gt;\n  pivot_longer(cols = c(delta_premium, delta_regular), names_to = 'type', values_to = 'price')"
  },
  {
    "objectID": "posts/2025-07-01/notebook.html#time-to-plot",
    "href": "posts/2025-07-01/notebook.html#time-to-plot",
    "title": "Weekly US Gas Prices",
    "section": "4 Time to plot!",
    "text": "4 Time to plot!\n\n4.1 Before\n\ndata2plot |&gt;\n  ggplot(aes(x = date, y = price)) +\n  geom_line(aes(color = str_c(type,formulation, sep = ' '))) +\n  geom_ribbon(aes(ymin = 0, ymax = price, fill = str_c(type,formulation, sep = ' ')), alpha = .3) +\n  theme_gray()\n\n\n\n\n\n\n\n\n\ndata2plot |&gt;\n  mutate(formulation = str_to_sentence(formulation)) |&gt;\n  ggplot(aes(x = date, y = price)) +\n  geom_text(\n    data = tibble(\n      price = c(-0.8, -0.4, 0.4, 0.8)\n    ),\n    x = as.Date('2000-01-01'),\n    aes(label = scales::dollar(price), y = price),\n    color = cool_gray2,\n    size = 2.5,\n    hjust = 0,\n    vjust = -0.25,\n  ) +\n  # geom_line(aes(color = str_c(type, formulation, sep = ' '))) +\n  geom_ribbon_pattern(\n    aes(\n      ymin = 0,\n      ymax = price,\n      pattern_fill = type,\n      pattern_spacing = formulation,\n      fill = type\n    ),\n    alpha = .1,\n    pattern = \"stripe\",\n    pattern_color = NA,\n    # pattern_spacing = .01,\n    pattern_angle = 45\n  ) +\n  scale_y_continuous(\n    limits = c(-0.82, 0.82),\n    breaks = c(-0.8, -0.4, 0, 0.4, 0.8),\n    label = scales::dollar\n  ) +\n  scale_x_date(breaks = '3 years', labels = year, expand = c(0, 0, 0, 0)) +\n  scale_fill_manual(\n    values = c(delta_premium = cool_gray2, delta_regular = cool_red1)\n  ) +\n  scale_pattern_fill_manual(\n    values = c(delta_premium = cool_gray2, delta_regular = cool_red1)\n  ) +\n  scale_pattern_spacing_discrete(range = c(0.01, 100)) +\n  labs(\n    title = \"More premium, more expensive gasoline\",\n    subtitle = str_wrap(\n      \"The price difference between midgrade and premium gasoline, as well as between midgrade and regular gasoline, has been increasing rapidly in the last decade.\",\n      width = 90\n    ),\n    pattern_spacing = NULL,\n    y = NULL,\n    x = NULL,\n    caption = str_wrap(\n      \"NOTE This visualization offers a preliminary look at the data and may not capture the full complexity of the underlying reality. SOURCE #Tidytuesday 2025-06-17 GITHUB barreiro-r\",\n      width = 110,\n    ) |&gt;\n      str_replace_all(\"@\", \"\\n\")\n  ) +\n  annotate(\n    geom = \"richtext\",\n    label.color = NA,\n    label = \"regular gasoline\",\n    x = as.Date(\"2000-01-01\"),\n    y = 0,\n    hjust = -.15,\n    vjust = .5,\n    size = 2.5,\n    family = \"Ubuntu\",\n    color = cool_gray0\n  ) +\n  annotate(\n    geom = \"richtext\",\n    label.color = NA,\n    fill = NA,\n    label = \"Premium gasoline\",\n    x = as.Date(\"2000-01-01\"),\n    y = 0.25,\n    hjust = -.15,\n    vjust = .5,\n    size = 2.5,\n    family = \"Ubuntu\",\n    color = cool_gray1\n  ) +\n  annotate(\n    geom = \"richtext\",\n    label.color = NA,\n    fill = NA,\n    label = \"Regular gasoline\",\n    x = as.Date(\"2000-01-01\"),\n    y = -0.25,\n    hjust = -.15,\n    vjust = .5,\n    size = 2.5,\n    family = \"Ubuntu\",\n    color = cool_red1\n  ) +\n  guides(\n    pattern_fill = 'none',\n    fill = 'none',\n    pattern_spacing = guide_legend(\n      override.aes = list(\n        alpha = 1,\n        fill = cool_gray1,\n        pattern_alpha = 1,\n        pattern_fill = cool_gray3\n      )\n    )\n  ) +\n  theme(\n    legend.position = c(1, 1),\n    legend.justification = c(1, 1),\n    legend.key.size = unit(0.3, 'cm'),\n    axis.text.y = element_blank(),\n    legend.key.spacing.y = unit(3, 'pt'),\n    plot.margin = margin(25, 25, 25, 25),\n    panel.grid.major.y = element_line(\n      color = cool_gray5,\n      linewidth = .5,\n      linetype = '22'\n    ),\n  )"
  },
  {
    "objectID": "posts/2025-07-15/notebook.html",
    "href": "posts/2025-07-15/notebook.html",
    "title": "British Library Funding",
    "section": "",
    "text": "Tip\n\n\n\n If this code was useful to you, please consider give it a little star on GitHub."
  },
  {
    "objectID": "posts/2025-07-15/notebook.html#about-the-data",
    "href": "posts/2025-07-15/notebook.html#about-the-data",
    "title": "British Library Funding",
    "section": "About the Data",
    "text": "About the Data\n\n\n\n\n\n\nNote\n\n\n\n Check the data in TidyTuesday GitHub repository.\n\n\nThis week we’re looking into British Library funding! Thank you to Andy Jackson for compiling this data (and updating it with more information) and posting it on BlueSky! Also thanks to David Rosenthal’s 2017 blog for inspiring Andy’s efforts!\n\nI often refer back to this 2017 analysis by DSHR, which documents how the inflation-adjusted income of the British Library fell between 1999 and 2016. I referenced it in Invisible Memory Machines, but of course I was missing the data from the last eight years. Perhaps it’s all turned around since then!"
  },
  {
    "objectID": "posts/2025-07-15/notebook.html#initializing",
    "href": "posts/2025-07-15/notebook.html#initializing",
    "title": "British Library Funding",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(scales)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(shadowtext)\nlibrary(maps)\nlibrary(ggpattern)\nlibrary(ggrepel)\nlibrary(patchwork)\n\nfont_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 400, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n1.2 Set theme\n\ncool_gray0 &lt;- \"#323955\"\ncool_gray1 &lt;- \"#5a6695\"\ncool_gray2 &lt;- \"#7e89bb\"\ncool_gray3 &lt;- \"#a4aee2\"\ncool_gray4 &lt;- \"#cbd5ff\"\ncool_gray5 &lt;- \"#e7efff\"\n\ncool_red0 &lt;- \"#A31C44\"\ncool_red1 &lt;- \"#F01B5B\"\ncool_red2 &lt;- \"#F43E75\"\ncool_red3 &lt;- \"#E891AB\"\ncool_red4 &lt;- \"#FAC3D3\"\ncool_red5 &lt;- \"#FCE0E8\"\n\ntheme_set(\n  theme_minimal() +\n    theme(\n      # axis.line.x.bottom = element_line(color = '#474747', linewidth = .3),\n      # axis.ticks.x= element_line(color = '#474747', linewidth = .3),\n      # axis.line.y.left = element_line(color = '#474747', linewidth = .3),\n      # axis.ticks.y= element_line(color = '#474747', linewidth = .3),\n      # # panel.grid = element_line(linewidth = .3, color = 'grey90'),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      axis.ticks.length = unit(-0.15, \"cm\"),\n      plot.background = element_blank(),\n      plot.title.position = \"plot\",\n      plot.title = element_text(family = \"Ubuntu\", size = 18, face = 'bold'),\n      plot.caption = element_text(\n        size = 8,\n        color = cool_gray3,\n        margin = margin(20, 0, 0, 0),\n        hjust = 0\n      ),\n      plot.subtitle = element_text(\n        size = 9,\n        lineheight = 1.15,\n        margin = margin(5, 0, 15, 0)\n      ),\n      axis.title.x = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.title.y = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.text = element_text(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      legend.position = \"top\",\n      text = element_text(family = \"Ubuntu\", color = cool_gray1),\n      plot.margin = margin(25, 25, 25, 25)\n    )\n)\n\n\n\n1.3 Load this week’s data\n\nbl_funding &lt;- \nreadr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-07-15/bl_funding.csv')"
  },
  {
    "objectID": "posts/2025-07-15/notebook.html#data-analysis",
    "href": "posts/2025-07-15/notebook.html#data-analysis",
    "title": "British Library Funding",
    "section": "2 Data analysis",
    "text": "2 Data analysis\n\nWhat is the contribuition of each type o funding\n\nbl_funding |&gt;\n  select(year, ends_with('y2000_gbp_millions')) |&gt;\n  pivot_longer(-year, names_to = 'type', values_to = 'amount') |&gt;\n  mutate(type = str_remove(type, '_y2000_gbp_millions')) |&gt;\n  ggplot(aes(x = year, y = amount)) +\n  geom_point(aes(color = type)) +\n  geom_line(aes(color = type, group = type))\n\n\n\n\n\n\n\n\nNice spike o Voluntary funding in 2006.\n\nbl_funding |&gt;\n  select(year, ends_with('y2000_gbp_millions')) |&gt;\n  pivot_longer(-year, names_to = 'type', values_to = 'amount') |&gt;\n  mutate(type = str_remove(type, '_y2000_gbp_millions')) |&gt;\n  filter(year %in% c(min(year), max(year))) |&gt;\n  ggplot(aes(x = as.character(year), y = amount)) +\n  geom_point(aes(color = type)) +\n  geom_line(aes(color = type, group = type))\n\n\n\n\n\n\n\n\nWell, not that interesting…"
  },
  {
    "objectID": "posts/2025-07-15/notebook.html#transform-data-for-plotting",
    "href": "posts/2025-07-15/notebook.html#transform-data-for-plotting",
    "title": "British Library Funding",
    "section": "3 Transform Data for Plotting",
    "text": "3 Transform Data for Plotting\n\ndata2plot &lt;- \n  bl_funding |&gt;\n  select(year, ends_with('y2000_gbp_millions')) |&gt;\n  pivot_longer(-year, names_to = 'type', values_to = 'amount_end') |&gt;\n  mutate(type = str_remove(type, '_y2000_gbp_millions'))\n\ndata2plot &lt;- \n  left_join(\n    data2plot,\n    data2plot |&gt; transmute(year = year - 1, type, amount_start = amount_end),\n    by = c('year', 'type'))\n\ndata2plot &lt;- \n  data2plot |&gt;\n  mutate(change = if_else(amount_start-amount_end &gt; 0, 'Increase', 'Decrease')) |&gt;\n  filter(type == 'total') |&gt;\n  mutate(amount_start = if_else(year == max(year), 0, amount_start)) |&gt;\n  mutate(amount_end = if_else(year == min(year), 0, amount_end)) |&gt;\n  mutate(change = if_else(year %in% c(min(year), max(year)), \"total\", change))"
  },
  {
    "objectID": "posts/2025-07-15/notebook.html#time-to-plot",
    "href": "posts/2025-07-15/notebook.html#time-to-plot",
    "title": "British Library Funding",
    "section": "4 Time to plot!",
    "text": "4 Time to plot!\n\n4.1 Before\n\nbl_funding |&gt;\n  select(year, ends_with('y2000_gbp_millions')) |&gt;\n  pivot_longer(-year, names_to = 'type', values_to = 'amount') |&gt;\n  mutate(type = str_remove(type, '_y2000_gbp_millions')) |&gt;\n  filter(type == 'total') |&gt;\n  ggplot(aes(x = year, y = amount)) +\n  geom_col() +\n  theme_grey() +\n  labs(\n    x = NULL,\n    y = \"Total funding (Y2000 GBP Millions)\",\n    title = \"Shrinking Budget of the British Library\",\n    subtitle = \"On the last quarter-century the British Library had only 5 years of increasing funding\",\n    caption = str_wrap(\n      \"NOTE This visualization offers a preliminary look at the data and may not capture the full complexity of the underlying reality. SOURCE #Tidytuesday 2025-06-17 GITHUB barreiro-r\",\n      width = 100,\n    ) |&gt;\n      str_replace_all(\"@\", \"\\n\")\n  )\n\n\n\n\n\n\n\n\n\nlibrary(ggforce)\nlibrary(ggh4x)\n\nbackground &lt;-\n  tibble(\n    year = seq(min(data2plot$year), max(data2plot$year), by = 1),\n    y = max(data2plot$amount_end) * 1.05\n  ) |&gt;\n  mutate(color = row_number() %% 2)\n\ndata2plot |&gt;\n  filter(type == 'total') |&gt;\n  ggplot(aes(x = year)) +\n  geom_col(data = background, aes(y = y, bg = color), width = 1) +\n  geom_link(\n    data = subset(data2plot, change == 'Increase'),\n    aes(\n      xend = year,\n      y = amount_start,\n      yend = amount_end,\n      increase = after_stat(index)\n    ),\n    n = 1000,\n    linewidth = 6,\n    show.legend = FALSE\n  ) +\n  geom_link(\n    data = subset(data2plot, change == 'Decrease'),\n    aes(\n      xend = year,\n      y = amount_start,\n      yend = amount_end,\n      decrease = after_stat(index)\n    ),\n    n = 1000,\n    linewidth = 6,\n    show.legend = FALSE\n  ) +\n  geom_segment(\n    data = subset(data2plot, change == 'total'),\n    aes(\n      xend = year,\n      y = amount_start,\n      yend = amount_end\n    ),\n    color = cool_gray2,\n    linewidth = 6,\n    show.legend = FALSE\n  ) +\n  geom_point(\n    data = subset(data2plot, change != 'total'),\n    aes(y = amount_start),\n    shape = \"_\",\n    size = 7,\n    color = 'grey40'\n  ) +\n  scale_colour_multi(\n    aesthetics = c('increase', 'decrease'),\n    name = list(\"Increase\", \"Decrease\"),\n    colours = list(\n      c(cool_gray0, cool_gray1, cool_gray2, cool_gray4),\n      c(cool_red0, cool_red1, cool_red2, cool_red4)\n    )\n  ) +\n  scale_fill_multi(\n    aesthetics = c('bg'),\n    name = list(\"bg\"),\n    colours = list(\n      c(\"#F8FAFD\", \"white\")\n    )\n  ) +\n  scale_colour_gradient(low = cool_gray1, high = cool_gray5) +\n  scale_x_discrete(\n    limits = seq(min(data2plot$year), max(data2plot$year), by = 5)\n  ) +\n  labs(\n    x = NULL,\n    y = \"Total funding (Y2000 GBP Millions)\",\n    title = \"Shrinking Budget of the British Library\",\n    subtitle = \"On the last quarter-century the British Library had only 5 years of increasing funding.\",\n    caption = str_wrap(\n      \"NOTE This visualization offers a preliminary look at the data and may not capture the full complexity of the underlying reality. SOURCE #Tidytuesday 2025-06-17 GITHUB barreiro-r\",\n      width = 100,\n    ) |&gt;\n      str_replace_all(\"@\", \"\\n\")\n  )"
  },
  {
    "objectID": "posts/2025-07-29/notebook.html",
    "href": "posts/2025-07-29/notebook.html",
    "title": "What have we been watching on Netflix?",
    "section": "",
    "text": "Tip\n\n\n\n If this code was useful to you, please consider give it a little star on GitHub."
  },
  {
    "objectID": "posts/2025-07-29/notebook.html#about-the-data",
    "href": "posts/2025-07-29/notebook.html#about-the-data",
    "title": "What have we been watching on Netflix?",
    "section": "About the Data",
    "text": "About the Data\n\n\n\n\n\n\nNote\n\n\n\n Check the data in TidyTuesday GitHub repository.\n\n\nThis week we are exploring TV show and movie viewing data from Netflix. Since 2023, Netflix has released regular Engagement Reports summarising the number of hours that users have spent watching each show and movie in the last 6 months.\nThis report, which captures ~99% of all viewing in the first half of 2025, shows that people watched a lot of Netflix — over 95B hours — spanning a wide range of genres and languages. It’s why we continue to invest in a variety of quality titles for various moods and tastes and work hard to make them great.\nThe dataset this week combines viewing data from late 2023 through the first half of 2025."
  },
  {
    "objectID": "posts/2025-07-29/notebook.html#initializing",
    "href": "posts/2025-07-29/notebook.html#initializing",
    "title": "What have we been watching on Netflix?",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(scales)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(shadowtext)\nlibrary(maps)\nlibrary(ggpattern)\nlibrary(ggrepel)\nlibrary(patchwork)\nlibrary(tidylog)\n\nfont_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 400, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n1.2 Set theme\n\ncool_gray0 &lt;- \"#323955\"\ncool_gray1 &lt;- \"#5a6695\"\ncool_gray2 &lt;- \"#7e89bb\"\ncool_gray3 &lt;- \"#a4aee2\"\ncool_gray4 &lt;- \"#cbd5ff\"\ncool_gray5 &lt;- \"#e7efff\"\n\ncool_red0 &lt;- \"#A31C44\"\ncool_red1 &lt;- \"#F01B5B\"\ncool_red2 &lt;- \"#F43E75\"\ncool_red3 &lt;- \"#E891AB\"\ncool_red4 &lt;- \"#FAC3D3\"\ncool_red5 &lt;- \"#FCE0E8\"\n\ntheme_set(\n  theme_minimal() +\n    theme(\n      # axis.line.x.bottom = element_line(color = '#474747', linewidth = .3),\n      # axis.ticks.x= element_line(color = '#474747', linewidth = .3),\n      # axis.line.y.left = element_line(color = '#474747', linewidth = .3),\n      # axis.ticks.y= element_line(color = '#474747', linewidth = .3),\n      # # panel.grid = element_line(linewidth = .3, color = 'grey90'),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      axis.ticks.length = unit(-0.15, \"cm\"),\n      plot.background = element_blank(),\n      plot.title.position = \"plot\",\n      plot.title = element_text(family = \"Ubuntu\", size = 18, face = 'bold'),\n      plot.caption = element_text(\n        size = 8,\n        color = cool_gray3,\n        margin = margin(20, 0, 0, 0),\n        hjust = 0\n      ),\n      plot.subtitle = element_text(\n        size = 9,\n        lineheight = 1.15,\n        margin = margin(5, 0, 15, 0)\n      ),\n      axis.title.x = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.title.y = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.text = element_text(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      legend.position = \"top\",\n      text = element_text(family = \"Ubuntu\", color = cool_gray1),\n      plot.margin = margin(25, 25, 25, 25)\n    )\n)\n\n\n\n1.3 Load this week’s data\n\nmovies &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-07-29/movies.csv')\nshows &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-07-29/shows.csv')\n\nnetflix &lt;- bind_rows(movies |&gt; mutate(type = 'movie'), shows |&gt; mutate(type = 'show'))"
  },
  {
    "objectID": "posts/2025-07-29/notebook.html#data-analysis",
    "href": "posts/2025-07-29/notebook.html#data-analysis",
    "title": "What have we been watching on Netflix?",
    "section": "2 Data analysis",
    "text": "2 Data analysis\n\nLet see the release date distribution\n\nnetflix |&gt;\n  ggplot(aes(x = release_date)) +\n  geom_histogram(aes(fill = type)) \n\n\n\n\n\n\n\n\nIt is correlated to the number of views?\n\nnetflix |&gt;\n  ggplot(aes(x = release_date, y = views)) +\n  geom_point(aes(color = type))\n\n\n\n\n\n\n\n\n\n\nIs runtime related to the number of views?\n\nlibrary(lubridate)\nnetflix |&gt;\n  mutate(seconds = period_to_seconds(hms(runtime))) |&gt;\n  filter(seconds &lt; 100000) |&gt;\n  ggplot(aes(x = seconds, y = views)) +\n  geom_point(aes(color = type))\n\n\n\n\n\n\n\n\nWhat about quantiles?\n\nnetflix |&gt;\n  mutate(seconds = period_to_seconds(hms(runtime))) |&gt;\n  group_by(type) |&gt;\n  mutate(seconds_quantile = ntile(seconds, 5)) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(x = seconds_quantile, y = log(hours_viewed))) +\n  ggbeeswarm::geom_quasirandom(\n    aes(color = type),\n    dodge.width = 0.5,\n    size = .1,\n    alpha = .01\n  ) +\n  stat_summary(\n    fun = mean,\n    geom = \"point\",\n    size = 2,\n    aes(color = type),\n    position = position_dodge(width = .5)\n  ) +\n  stat_summary(\n    aes(color = type),\n    fun.data = 'mean_sdl',\n    fun.args = list(mult = 1),\n    geom = \"errorbar\",\n    width = 0.15,\n    position = position_dodge(width = .5)\n  )\n\n\n\n\n\n\n\n# facet_wrap(~type, ncol = 1)"
  },
  {
    "objectID": "posts/2025-07-29/notebook.html#transform-data-for-plotting",
    "href": "posts/2025-07-29/notebook.html#transform-data-for-plotting",
    "title": "What have we been watching on Netflix?",
    "section": "3 Transform Data for Plotting",
    "text": "3 Transform Data for Plotting\n\nlibrary(igraph)\n\nlibrary(tidytext)\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(widyr)\nlibrary(qdapDictionaries)\n\nenglish_words &lt;- tibble(word = GradyAugmented)\ndata(\"stop_words\")\n\nblocklist_words &lt;- c(\n  'season',\n  'limited',\n  'series',\n  'movie',\n  'trailer',\n  'de',\n  'la',\n  'el',\n  'los',\n  'las',\n  'les',\n  'di'\n)\n\ndata2plot &lt;-\n  netflix |&gt;\n  filter(report == \"2025Jan-Jun\") |&gt;\n  mutate(title = str_remove(title, \" // .*\")) |&gt;\n  distinct(title) |&gt;\n  mutate(id = row_number()) |&gt;\n  mutate(id = as.character(id)) |&gt;\n  unnest_tokens(word, title, drop = FALSE) |&gt;\n  anti_join(stop_words, by = \"word\") |&gt;\n  filter(!str_detect(word, \"[0-9]\")) |&gt;\n  filter(!str_detect(word, \"[[:punct:]]\")) |&gt;\n  semi_join(english_words, by = \"word\") |&gt;\n  filter(!word %in% blocklist_words)\n\nword_pairs &lt;- data2plot |&gt;\n  pairwise_count(word, id, sort = TRUE, upper = FALSE)\n\ntop_words &lt;-\n  data2plot |&gt;\n  count(word, sort = TRUE) |&gt;\n  head(15) |&gt;\n  mutate(rank = row_number())\n\n# Filter for pairs that appear at least twice to reduce noise\nfiltered_pairs &lt;- word_pairs |&gt;\n  filter(item1 %in% top_words$word | item2 %in% top_words$word) |&gt;\n  mutate(top_word = if_else(item1 %in% top_words$word, item1, item2)) |&gt;\n  group_by(top_word) |&gt;\n  slice_max(n, n = 5) |&gt;\n  ungroup() |&gt;\n  select(-top_word)\n\n# --- Create Nodes\nnodes &lt;-\n  filtered_pairs |&gt;\n  select(-n) |&gt;\n  mutate(id = row_number()) |&gt;\n  pivot_longer(names_to = 'names', values_to = 'word', -id) |&gt;\n  select(-id, -names) |&gt;\n  distinct(word) |&gt;\n  left_join(top_words, by = 'word') |&gt;\n  mutate(is_top = !is.na(rank)) |&gt;\n  mutate(rank = if_else(is.na(rank), 16, rank))\n\n# -- Create Edges\nedges &lt;-\n  filtered_pairs\n\n# Create an igraph object from the filtered pairs\nmy_graph_df &lt;- graph_from_data_frame(edges, vertices = nodes)"
  },
  {
    "objectID": "posts/2025-07-29/notebook.html#time-to-plot",
    "href": "posts/2025-07-29/notebook.html#time-to-plot",
    "title": "What have we been watching on Netflix?",
    "section": "4 Time to plot!",
    "text": "4 Time to plot!\n\n4.1 Attempt 1\nI was tring to create an eye…\n\nlibrary(lubridate)\ndata2plot &lt;-\n  netflix |&gt;\n  filter(!is.na(release_date)) |&gt;\n  filter(report == \"2025Jan-Jun\") |&gt;\n  group_by(type) |&gt;\n  slice_max(hours_viewed, n = 100) |&gt;\n  arrange(type, hours_viewed) |&gt;\n  mutate(order = -1 * row_number()) |&gt;\n  mutate(order = if_else(type == 'show', order * -1, order)) |&gt;\n  mutate(title = fct_reorder(title, order)) |&gt;\n  ungroup()\n\n\ndata2plot |&gt;\n  ggplot(aes(x = hours_viewed, y = title)) +\n  geom_segment(\n    aes(x = 0, xend = hours_viewed, color = type),\n    show.legend = FALSE\n  ) +\n  coord_radial(theta = \"y\", inner.radius = .2, start = 90 * (pi / 180)) +\n  scale_color_manual(values = c(cool_gray1, cool_red1)) +\n  theme_void() +\n  theme(margin = margin(0, 0, 0, 0))\n\n\n\n\n\n\n\n\n\n\n4.2 Final\n\nggraph(my_graph_df, layout = \"fr\") +\n  geom_edge_link(color = cool_gray5, show.legend = FALSE) +\n  geom_node_point(aes(size = is_top, color = n)) +\n  geom_node_text(\n    aes(label = name, filter = is_top),\n    repel = FALSE,\n    size = 2.5,\n    color = cool_gray0,\n    nudge_y = .2,\n    fontface = 'bold'\n  ) +\n  geom_node_text(\n    aes(label = name, filter = !is_top),\n    repel = FALSE,\n    size = 2,\n    color = cool_gray1\n  ) +\n  geom_node_text(aes(label = n), repel = FALSE, size = 2, , nudge_y = -.2) +\n  labs(\n    title = \"Netflix top 15 words in titles\",\n    subtitle = \"and its 5 most common co-occurrences\",\n    color = \"Word Frequency\",\n    caption = str_wrap(\n      \"NOTE This visualization offers a preliminary look at the data and may not capture the full complexity of the underlying reality. SOURCE #Tidytuesday 2025-06-17 GITHUB barreiro-r\",\n      width = 100,\n    )\n  ) +\n  theme_void() +\n  scale_color_continuous(\n    low = cool_gray4,\n    high = cool_red2,\n    na.value = cool_gray5,\n    breaks = c(min(top_words$n), max(top_words$n))\n  ) +\n  scale_size_manual(values = c(2, 9)) +\n  guides(\n    size = 'none',\n    color = 'none',\n    # color = guide_colorbar(\n    #   barwidth = 7,\n    #   barheight = .3\n    # )\n  ) +\n  theme(\n    legend.position = 'top',\n    legend.direction = 'horizontal',\n    legend.title.position = 'top',\n    legend.title = element_text(size = 8, hjust = .5),\n\n    # the the update didint work\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.ticks.length = unit(-0.15, \"cm\"),\n    plot.background = element_blank(),\n    plot.title.position = \"plot\",\n    plot.title = element_text(family = \"Ubuntu\", size = 18, face = 'bold'),\n    plot.caption = element_text(\n      size = 8,\n      color = cool_gray3,\n      margin = margin(20, 0, 0, 0),\n      hjust = 0\n    ),\n    plot.subtitle = element_text(\n      size = 9,\n      lineheight = 1.15,\n      margin = margin(5, 0, 15, 0)\n    ),\n    text = element_text(family = \"Ubuntu\", color = cool_gray1),\n    plot.margin = margin(25, 25, 25, 25)\n  )"
  },
  {
    "objectID": "posts/2025-08-12/notebook.html",
    "href": "posts/2025-08-12/notebook.html",
    "title": "Extreme Weather Attribution Studies",
    "section": "",
    "text": "Tip\n\n\n\n If this code was useful to you, please consider give it a little star on GitHub."
  },
  {
    "objectID": "posts/2025-08-12/notebook.html#about-the-data",
    "href": "posts/2025-08-12/notebook.html#about-the-data",
    "title": "Extreme Weather Attribution Studies",
    "section": "About the Data",
    "text": "About the Data\n\n\n\n\n\n\n\nNote\n\n\n\n Check the data in TidyTuesday GitHub repository.\n\n\n\nThis week we’re exploring extreme weather attribution studies. The dataset comes from Carbon Brief’s article Mapped: How climate change affects extreme weather around the world. An in-depth exploration of the evolution of extreme weather attribution science can be found in this Q & A article.\nThe data was last updated in November 2024 and single studies that cover multiple events or locations are separated out into individual entries when possible.\n\nAttribution studies calculate whether, and by how much, climate change affected the intensity, frequency or impact of extremes - from wildfires in the US and drought in South Africa through to record-breaking rainfall in Pakistan and typhoons in Taiwan."
  },
  {
    "objectID": "posts/2025-08-12/notebook.html#initializing",
    "href": "posts/2025-08-12/notebook.html#initializing",
    "title": "Extreme Weather Attribution Studies",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\npacman::p_load(\n  tidyverse,\n  glue,\n  scales,\n  showtext,\n  ggtext,\n  shadowtext,\n  maps,\n  ggpattern,\n  ggrepel,\n  patchwork,\n  tidylog\n)\n\nfont_add_google(\"Ubuntu\", \"Ubuntu\", regular.wt = 400, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n1.2 Set theme\n\ncool_gray0 &lt;- \"#323955\"\ncool_gray1 &lt;- \"#5a6695\"\ncool_gray2 &lt;- \"#7e89bb\"\ncool_gray3 &lt;- \"#a4aee2\"\ncool_gray4 &lt;- \"#cbd5ff\"\ncool_gray5 &lt;- \"#e7efff\"\n\ncool_red0 &lt;- \"#A31C44\"\ncool_red1 &lt;- \"#F01B5B\"\ncool_red2 &lt;- \"#F43E75\"\ncool_red3 &lt;- \"#E891AB\"\ncool_red4 &lt;- \"#FAC3D3\"\ncool_red5 &lt;- \"#FCE0E8\"\n\ntheme_set(\n  theme_minimal() +\n    theme(\n      # axis.line.x.bottom = element_line(color = 'cool_gray0', linewidth = .3),\n      # axis.ticks.x= element_line(color = 'cool_gray0', linewidth = .3),\n      # axis.line.y.left = element_line(color = 'cool_gray0', linewidth = .3),\n      # axis.ticks.y= element_line(color = 'cool_gray0', linewidth = .3),\n      # # panel.grid = element_line(linewidth = .3, color = 'grey90'),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      axis.ticks.length = unit(-0.15, \"cm\"),\n      plot.background = element_blank(),\n      # plot.title.position = \"plot\",\n      plot.title = element_text(family = \"Ubuntu\", size = 14, face = 'bold'),\n      plot.caption = element_text(\n        size = 8,\n        color = cool_gray3,\n        margin = margin(20, 0, 0, 0),\n        hjust = 0\n      ),\n      plot.subtitle = element_text(\n        size = 9,\n        lineheight = 1.15,\n        margin = margin(5, 0, 15, 0)\n      ),\n      axis.title.x = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.title.y = element_markdown(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.text = element_text(\n        family = \"Ubuntu\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      strip.text = element_text(\n        family = \"Ubuntu\",\n        size = 8,\n        color = cool_gray0\n      ),\n      legend.position = \"top\",\n      text = element_text(family = \"Ubuntu\", color = cool_gray1),\n      # plot.margin = margin(25, 25, 25, 25)\n    )\n)\n\n\n\n1.3 Load this week’s data\n\ntuesdata &lt;- tidytuesdayR::tt_load('2025-08-12')"
  },
  {
    "objectID": "posts/2025-08-12/notebook.html#quick-exploratory-data-analysis",
    "href": "posts/2025-08-12/notebook.html#quick-exploratory-data-analysis",
    "title": "Extreme Weather Attribution Studies",
    "section": "2 Quick Exploratory Data Analysis",
    "text": "2 Quick Exploratory Data Analysis\n\n2.1 Study focus analysis\n\ntuesdata$attribution_studies |&gt; count(study_focus, sort = TRUE)\n\n# A tibble: 2 × 2\n  study_focus     n\n  &lt;chr&gt;       &lt;int&gt;\n1 Event         593\n2 Trend         151\n\n\n\n\n2.2 Event period analysis\n\ntuesdata$attribution_studies |&gt; \n  mutate(event_period_numeric = suppressWarnings(as.numeric(event_period))) |&gt;\n  count(event_period_numeric,study_focus, sort = TRUE) \n\n# A tibble: 26 × 3\n   event_period_numeric study_focus     n\n                  &lt;dbl&gt; &lt;chr&gt;       &lt;int&gt;\n 1                   NA Event         266\n 2                   NA Trend         151\n 3                 2015 Event          31\n 4                 2020 Event          31\n 5                 2018 Event          30\n 6                 2012 Event          27\n 7                 2014 Event          26\n 8                 2022 Event          23\n 9                 2013 Event          20\n10                 2017 Event          20\n# ℹ 16 more rows\n\n\nGuess I’ll skip the trends?\n\n\n2.3 What about the region\n\ntuesdata$attribution_studies |&gt; \n  mutate(event_period_numeric = suppressWarnings(as.numeric(event_period))) |&gt;\n  count(event_period_numeric,study_focus,cb_region, sort = TRUE)\n\n# A tibble: 126 × 4\n   event_period_numeric study_focus cb_region                          n\n                  &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;                          &lt;int&gt;\n 1                   NA Event       Europe                            73\n 2                   NA Event       Eastern and south-eastern Asia    52\n 3                   NA Event       Northern America                  50\n 4                   NA Trend       Global                            49\n 5                   NA Trend       Eastern and south-eastern Asia    30\n 6                   NA Event       Australia and New Zealand         27\n 7                   NA Event       Sub-Saharan Africa                19\n 8                   NA Trend       Northern America                  19\n 9                 2020 Event       Eastern and south-eastern Asia    16\n10                   NA Trend       Europe                            16\n# ℹ 116 more rows\n\n\n\n\n2.4 Classification\n\ntuesdata$attribution_studies |&gt;\n  count(classification, sort = TRUE)\n\n# A tibble: 4 × 2\n  classification                                    n\n  &lt;chr&gt;                                         &lt;int&gt;\n1 More severe or more likely to occur             554\n2 No discernible human influence                   71\n3 Decrease, less severe or less likely to occur    66\n4 Insufficient data/inconclusive                   53\n\n\nMaybe just keep “More severe or more likely to occur”"
  },
  {
    "objectID": "posts/2025-08-12/notebook.html#transform-data-for-plotting",
    "href": "posts/2025-08-12/notebook.html#transform-data-for-plotting",
    "title": "Extreme Weather Attribution Studies",
    "section": "3 Transform Data for Plotting",
    "text": "3 Transform Data for Plotting\n\nevent_type_heat_drought_wildfire &lt;- c(\"Heat\", \"Drought\", \"Wildfire\")\nevent_type_rain_flooding_storm &lt;- c(\"Rain & flooding\", \"Storm\")\n\n\ndata2plot_event &lt;- tuesdata$attribution_studies |&gt;\n  filter(study_focus == \"Event\") |&gt;\n  filter(classification == \"More severe or more likely to occur\") |&gt;\n  select(event_year, event_type, cb_region) |&gt;\n  filter(!is.na(suppressWarnings(as.numeric(event_year)))) |&gt;\n  mutate(event_year = as.numeric(event_year)) |&gt;\n  mutate(\n    event_type = case_when(\n      event_type %in% event_type_heat_drought_wildfire ~\n        \"Heath, Drought and Wildfire\",\n      event_type %in% event_type_rain_flooding_storm ~ \"Storm, Rain & Flooding\",\n      TRUE ~ NA\n    )\n  ) |&gt;\n  filter(!is.na(event_type)) |&gt;\n  filter(event_year &gt; 2000) |&gt;\n  count(event_type, cb_region, event_year, sort = TRUE) |&gt;\n  group_by(cb_region) |&gt;\n  filter(n() &gt; 10) |&gt;\n  ungroup() |&gt;\n  mutate(\n    cb_region = factor(\n      cb_region,\n      levels = c(\n        \"Northern America\",\n        \"Europe\",\n        \"Central and southern Asia\",\n        \"Latin America and the Caribbean\",\n        \"Sub-Saharan Africa\",\n        \"Eastern and south-eastern Asia\"\n      )\n    )\n  )\n  # mutate(cb_region_label = str_wrap(cb_region, 15)) |&gt;\n  # mutate(cb_region_label = factor(cb_region_label, levels = as.numeric(cb_region)))"
  },
  {
    "objectID": "posts/2025-08-12/notebook.html#time-to-plot",
    "href": "posts/2025-08-12/notebook.html#time-to-plot",
    "title": "Extreme Weather Attribution Studies",
    "section": "4 Time to plot!",
    "text": "4 Time to plot!\n\n4.1 Raw chart\n\ndata2plot_event |&gt;\n  ggplot() +\n  geom_segment(\n    data = subset(data2plot_event, event_type == 'Heath, Drought and Wildfire'),\n    aes(x = event_year, y = 0.4, yend = n),\n    size = 1.5,\n    lineend = \"round\"\n  ) +\n  geom_segment(\n    data = subset(data2plot_event, event_type == 'Storm, Rain & Flooding'),\n    aes(x = event_year, y = -0.4, yend = -n),\n    size = 1.5,\n    lineend = \"round\"\n  ) +  \n  facet_wrap(cb_region ~ .) \n\n\n\n\n\n\n\n\n\n\n4.2 Final chart\n\ncustom_grid_data &lt;- tibble(\n  y = seq(\n    -max(data2plot_event$n),\n    max(data2plot_event$n),\n    by = 3\n  )\n)\n\nglobal_data &lt;-\n  data2plot_event |&gt;\n  group_by(event_type, event_year) |&gt;\n  summarise(n = sum(n)) |&gt;\n  ungroup()\n\ncustom_grid_data_global &lt;- tibble(\n  y = seq(\n    -max(global_data$n),\n    max(global_data$n),\n    by = 4\n  )\n)\n\n# Global plot\np1 &lt;-\n  global_data |&gt;\n  ggplot() +\n  # Grid\n  geom_segment(\n    data = custom_grid_data_global,\n    aes(\n      x = -Inf,\n      xend = Inf,\n      y = y\n    ),\n    color = cool_gray5,\n    size = 0.25\n  ) +\n  geom_text(\n    data = custom_grid_data_global,\n    x = min(data2plot_event$event_year) - 2,\n    aes(y = y, label = abs(y)),\n    vjust = -0.3,\n    size = 3,\n    color = cool_gray3\n  ) +\n\n  # Anotate labels\n  annotate(\n    geom = \"text\",\n    label = \"Heath, Drought and Wildfire\",\n    y = max(global_data$n) + 6,\n    x = (min(global_data$event_year) + max(global_data$event_year)) / 2,\n    hjust = 0.5,\n    color = \"#900001\",\n    family = \"Ubuntu\"\n  ) +\n\n  annotate(\n    geom = \"text\",\n    label = \"Storm, Rain & Flooding\",\n    y = -1 * max(global_data$n) - 4,\n    x = (min(global_data$event_year) + max(global_data$event_year)) / 2,\n    hjust = 0.5,\n    color = \"#144563ff\",\n    family = \"Ubuntu\"\n  ) +\n\n  # Top lines\n  suppressWarnings(ggforce::geom_link(\n    data = subset(global_data, event_type == 'Heath, Drought and Wildfire'),\n    aes(\n      x = event_year,\n      xend = event_year,\n      y = 1,\n      yend = n,\n      warm = after_stat(y)\n    ),\n    size = 2.5,\n    lineend = \"round\",\n    show.legend = FALSE\n  )) +\n  # Bottom lines\n  suppressWarnings(ggforce::geom_link(\n    data = subset(global_data, event_type == 'Storm, Rain & Flooding'),\n    aes(\n      x = event_year,\n      xend = event_year,\n      y = -1,\n      yend = -n,\n      wet = after_stat(-y)\n    ),\n    size = 2.5,\n    lineend = \"round\",\n    show.legend = FALSE\n  )) +\n\n  ggh4x::scale_colour_multi(\n    aesthetics = c(\"warm\", \"wet\"),\n    name = list(\"Warm\", \"Wet\"),\n    colours = list(\n      c(\"#F8DF9D\", \"#D75004\", \"#900001\", \"#3c0602ff\"),\n      c(\"#18BDE2\", \"#144563ff\", \"#0D394F\")\n    )\n  ) +\n  theme(axis.text.y = element_blank()) +\n  labs(\n    x = NULL,\n    y = \"Number of events\",\n    title = \"Extreme events from Carbon brief report\",\n    subtitle = \"Only events classified as \\\"More severe or more likely to occur\\\" were included.\",\n    caption = str_wrap(\n      \"NOTE This visualization offers a preliminary look at the data and may not capture the full complexity of the underlying reality. SOURCE #Tidytuesday 2025-06-17 GITHUB barreiro-r\",\n      width = 120,\n    )\n  ) +\n  scale_x_continuous(\n    expand = c(0, 3, 0, 3),\n    breaks = c(\n      min(data2plot_event$event_year),\n      max(data2plot_event$event_year)\n    )\n  ) +\n  theme(\n    strip.text = element_text(hjust = .5, color = cool_gray2),\n    panel.spacing = unit(3, \"lines\")\n  )\n\n# Subplots\np2 &lt;-\n  data2plot_event |&gt;\n  ggplot() +\n  # Grid\n  geom_segment(\n    data = custom_grid_data,\n    aes(\n      x = -Inf,\n      xend = Inf,\n      y = y\n    ),\n    color = cool_gray5,\n    size = 0.25\n  ) +\n  geom_text(\n    data = custom_grid_data,\n    x = min(data2plot_event$event_year) - 2,\n    aes(y = y, label = abs(y)),\n    vjust = -0.3,\n    size = 3,\n    color = cool_gray3\n  ) +\n  # Top lines\n  suppressWarnings(ggforce::geom_link(\n    data = subset(data2plot_event, event_type == 'Heath, Drought and Wildfire'),\n    aes(\n      x = event_year,\n      xend = event_year,\n      y = 0.4,\n      yend = n,\n      warm = after_stat(y)\n    ),\n    size = 0.75,\n    lineend = \"round\",\n    show.legend = FALSE\n  )) +\n  # Bottom lines\n  suppressWarnings(ggforce::geom_link(\n    data = subset(data2plot_event, event_type == 'Storm, Rain & Flooding'),\n    aes(\n      x = event_year,\n      xend = event_year,\n      y = -0.4,\n      yend = -n,\n      wet = after_stat(-y)\n    ),\n    size = 0.75,\n    lineend = \"round\",\n    show.legend = FALSE\n  )) +\n  ggh4x::scale_colour_multi(\n    aesthetics = c(\"warm\", \"wet\"),\n    name = list(\"Warm\", \"Wet\"),\n    colours = list(\n      c(\"#F8DF9D\", \"#D75004\", \"#900001\", \"#3c0602ff\"),\n      c(\"#18BDE2\", \"#144563ff\", \"#0D394F\")\n    )\n  ) +\n  facet_wrap(cb_region ~ ., labeller = label_wrap_gen(width = 15)) +\n  labs(\n    x = NULL,\n    y = NULL,\n  ) +\n  scale_x_continuous(\n    expand = c(0, 3, 0, 3),\n    breaks = c(\n      min(data2plot_event$event_year),\n      max(data2plot_event$event_year)\n    )\n  ) +\n  theme(\n    strip.text = element_text(hjust = .5, color = cool_gray2),\n    panel.spacing = unit(1, \"lines\"),\n    axis.text.y = element_blank(),\n    axis.text.x = element_blank(),\n  )\n\np1 + p2"
  },
  {
    "objectID": "posts/2025-08-26/notebook.html",
    "href": "posts/2025-08-26/notebook.html",
    "title": "Billboard Hot 100 Number Ones",
    "section": "",
    "text": "Tip\n\n\n\n If this code was useful to you, please consider give it a little star on GitHub."
  },
  {
    "objectID": "posts/2025-08-26/notebook.html#about-the-data",
    "href": "posts/2025-08-26/notebook.html#about-the-data",
    "title": "Billboard Hot 100 Number Ones",
    "section": "About the Data",
    "text": "About the Data\n\n\n\n\n\n\n\nNote\n\n\n\n Check the data in TidyTuesday GitHub repository.\n\n\n\nThis week we are exploring the Billboard Hot 100 Number Ones Database. This workbook contains substantial data about every song to ever top the Billboard Hot 100 between August 4, 1958 and January 11, 2025. It was compiled by Chris Dalla Riva as he wrote the book Uncharted Territory: What Numbers Tell Us about the Biggest Hit Songs and Ourselves. It also often powers his newsletter Can’t Get Much Higher.\n\n7 years ago, I decided that I was going to listen to every number one hit. Along the way, I tracked an absurd amount of information about each song. Using that information, I wrote a data-driven history of popular music covering 1958 through today."
  },
  {
    "objectID": "posts/2025-08-26/notebook.html#initializing",
    "href": "posts/2025-08-26/notebook.html#initializing",
    "title": "Billboard Hot 100 Number Ones",
    "section": "1 Initializing",
    "text": "1 Initializing\n\n1.1 Load libraries\n\npacman::p_load(\n  tidyverse,\n  glue,\n  scales,\n  showtext,\n  ggtext,\n  shadowtext,\n  maps,\n  ggpattern,\n  ggrepel,\n  patchwork,\n  tidylog\n)\n\nfont_add_google(\"DM Sans\", \"DM Sans\", regular.wt = 400, bold.wt = 700)\nshowtext_auto()\nshowtext_opts(dpi = 300)\n\n\n\n1.2 Set theme\n\ncool_gray0 &lt;- \"#323955\"\ncool_gray1 &lt;- \"#5a6695\"\ncool_gray2 &lt;- \"#7e89bb\"\ncool_gray3 &lt;- \"#a4aee2\"\ncool_gray4 &lt;- \"#cbd5ff\"\ncool_gray5 &lt;- \"#e7efff\"\n\ncool_red0 &lt;- \"#A31C44\"\ncool_red1 &lt;- \"#F01B5B\"\ncool_red2 &lt;- \"#F43E75\"\ncool_red3 &lt;- \"#E891AB\"\ncool_red4 &lt;- \"#FAC3D3\"\ncool_red5 &lt;- \"#FCE0E8\"\n\ntheme_set(\n  theme_minimal() +\n    theme(\n      # axis.line.x.bottom = element_line(color = 'cool_gray0', linewidth = .3),\n      # axis.ticks.x= element_line(color = 'cool_gray0', linewidth = .3),\n      # axis.line.y.left = element_line(color = 'cool_gray0', linewidth = .3),\n      # axis.ticks.y= element_line(color = 'cool_gray0', linewidth = .3),\n      # # panel.grid = element_line(linewidth = .3, color = 'grey90'),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      axis.ticks.length = unit(-0.15, \"cm\"),\n      plot.background = element_blank(),\n      # plot.title.position = \"plot\",\n      plot.title = element_text(family = \"DM Sans\", size = 14, face = 'bold'),\n      plot.caption = element_text(\n        size = 8,\n        color = cool_gray3,\n        margin = margin(20, 0, 0, 0),\n        hjust = 0\n      ),\n      plot.subtitle = element_text(\n        size = 9,\n        lineheight = 1.15,\n        margin = margin(5, 0, 15, 0)\n      ),\n      axis.title.x = element_markdown(\n        family = \"DM Sans\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.title.y = element_markdown(\n        family = \"DM Sans\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      axis.text = element_text(\n        family = \"DM Sans\",\n        hjust = .5,\n        size = 8,\n        color = cool_gray1\n      ),\n      legend.position = \"top\",\n      text = element_text(family = \"DM Sans\", color = cool_gray1),\n      # plot.margin = margin(25, 25, 25, 25)\n    )\n)\n\n\n\n1.3 Load this week’s data\n\ntuesdata &lt;- tidytuesdayR::tt_load('2025-08-26')"
  },
  {
    "objectID": "posts/2025-08-26/notebook.html#quick-exploratory-data-analysis",
    "href": "posts/2025-08-26/notebook.html#quick-exploratory-data-analysis",
    "title": "Billboard Hot 100 Number Ones",
    "section": "2 Quick Exploratory Data Analysis",
    "text": "2 Quick Exploratory Data Analysis\n\n2.1 Top 10 artists\n11 actualy because ties\n\ntuesdata$billboard |&gt;\n  count(artist) |&gt;\n  slice_max(n, n = 10) |&gt;\n  mutate(artist = fct_reorder(artist, n)) |&gt;\n  ggplot(aes(y = artist, x = n)) +\n  geom_col(fill = cool_gray1) +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Top 10 Artists\")\n\n\n\n\n\n\n\n\n\n\n2.2 Top 10 topics\n11 actualy because ties\n\ntuesdata$billboard |&gt;\n  select(lyrical_topic) |&gt;\n  separate_rows(lyrical_topic, sep = \";\") |&gt;\n  count(lyrical_topic) |&gt;\n  slice_max(n, n = 10) |&gt;\n  mutate(lyrical_topic = fct_reorder(lyrical_topic, n)) |&gt;\n  ggplot(aes(y = lyrical_topic, x = n)) +\n  geom_col(fill = cool_gray1) +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Top 10 Topics\")"
  },
  {
    "objectID": "posts/2025-08-26/notebook.html#transform-data-for-plotting",
    "href": "posts/2025-08-26/notebook.html#transform-data-for-plotting",
    "title": "Billboard Hot 100 Number Ones",
    "section": "3 Transform Data for Plotting",
    "text": "3 Transform Data for Plotting\n\ntop_lyrical_topic &lt;-\n  tuesdata$billboard |&gt;\n  separate_rows(lyrical_topic, sep = \";\") |&gt;\n  count(lyrical_topic) |&gt;\n  filter(!is.na(lyrical_topic)) |&gt;\n  slice_max(n, n = 20) |&gt;\n  pull(lyrical_topic) |&gt;\n  unique()\n\ndata2plot &lt;-\n  tuesdata$billboard |&gt;\n  mutate(year = year(date)) |&gt;\n  select(lyrical_topic, year) |&gt;\n  separate_rows(lyrical_topic, sep = \";\") |&gt;\n  filter(lyrical_topic %in% top_lyrical_topic)"
  },
  {
    "objectID": "posts/2025-08-26/notebook.html#time-to-plot",
    "href": "posts/2025-08-26/notebook.html#time-to-plot",
    "title": "Billboard Hot 100 Number Ones",
    "section": "4 Time to plot!",
    "text": "4 Time to plot!\n\n4.1 Raw chart\n\ndata2plot |&gt;\n  ggplot(aes(y = lyrical_topic, x = year)) +\n  geom_count() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\n\n4.2 Final chart\n\nlibrary(ggridges)\n\ndata2plot |&gt;\n  ggplot(aes(y = lyrical_topic, x = year)) +\n  ggridges::geom_density_ridges(color = 'white', fill = 'black', scale = 3) +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Lyrical Topics Popularity \",\n    subtitle = \"in Billboard Hot 100\",\n    caption = paste0(\"Displaying relative popularity for each lyrical topic (not absolute numbers)\\n\\n\", str_wrap(\"NOTE This visualization offers a preliminary look at the data and may not capture the full complexity of the underlying reality. SOURCE #Tidytuesday 2025-06-17 GITHUB barreiro-r\", width = 70))\n  ) +\n  scale_x_continuous(\n    breaks = seq(min(data2plot$year), max(data2plot$year), length.out = 5),\n    label = round\n  ) +\n  theme(\n    plot.background = element_rect(fill = 'black'),\n    text = element_text(color = 'white'),\n    axis.text = element_text(color = 'white'),\n    axis.text.x = element_text(color = 'white', margin = margin(20, 0, 0, 0)),\n    plot.margin = margin(50, 50, 50, 50),\n    plot.title = element_text(\n      hjust = .5,\n      margin = margin(0, 0, 5, 0)\n    ),\n    plot.subtitle = element_text(\n      hjust = .5,\n      margin = margin(0, 0, 30, 0)\n    ),\n    plot.caption = element_text(\n      color = 'grey40',\n      hjust = .5,\n      margin = margin(20, 0, 0, 0)\n    )\n  )"
  }
]